import React from 'react';
import {
    Image,
    PixelRatio,
    StyleSheet
} from 'react-native';
import { NativeModules } from 'react-native';

import imageSuffix from './utils';

const pixelRatioValue = PixelRatio.get();
const AppData = NativeModules.SCCRNAppData;

class SImage extends React.Component {
    constructor (props) {
        super(props);

        this.state = { uri: '' }

        this._genWH(props)
    }

    _genWH({ source, style }) {
        const { width, height } = StyleSheet.flatten([ {width: source.width, height: source.height}, style ]) || {};
        this._width = width || 0
        this._height = height || 0

        this.isWHFixed = !!(width && height)
    }

    _resizeURI({ source }) {
        let { uri } = source

        if ( !uri ) {
            console.warn('source.uri should not be an empty string');
        }

        // 没有尺寸时，渲染默认图（其实没有尺寸图片也显示不出来）
        // 有尺寸时，再渲染正式的图
        if ( !uri || this._width === 0 || this._height === 0 ) {
            uri = imageSuffix()
        } else {
            uri = imageSuffix( uri, {
                width: this._width * pixelRatioValue,
                height: this._height * pixelRatioValue
            }, { 
                origins: AppData.sImageOrigins 
            })
        }

        this.setState({ uri })
    }

    componentWillMount() {
        // 第一次进来其实是渲染默认图片，为了不要加载原始的正式图片
        // 在onlayout中才真正渲染带有尺寸的正式图片
        this._resizeURI( this.props )
    }

    componentWillReceiveProps (nextProps) {
        this._genWH(nextProps)
        this._resizeURI(nextProps)
    }

    setNativeProps(nativeProps) {
        const { image } = this.refs
        image && image.setNativeProps(nativeProps)
    }

    _onLayout = (e) => {
        const { width, height } = e.nativeEvent.layout

        this._width = width
        this._height = height

        this._resizeURI( this.props )

        const { onLayout } = this.props
        onLayout && onLayout(e)
    }
    
    render () {
        const { uri } = this.state
        const { securable, source: propSource } = this.props

        const source = { ...propSource, uri }
        securable && ( source.headers = {
            'Souche-Security-Token': AppData ? AppData.userToken: ''
        })

        let extraProps = {}
        if ( !this.isWHFixed ) {
            extraProps = { 
                onLayout: this._onLayout,
                key: uri
            }
        }


        return (
          <Image {...this.props}
                ref="image"
                source={ source }
                {...extraProps} />
        )
    }
}

export default SImage;
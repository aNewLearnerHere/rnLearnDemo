import React from "react";
import {
    NativeModules,
    NativeAppEventEmitter,
    AppRegistry,
    AsyncStorage
} from "react-native";
import { EventEmitter } from "fbemitter";
import mobx, { observable } from "mobx";
import NavHelper from "@souche-f2e/srn-navigator";
import SRNSentry from "@souche-f2e/srn-sentry";

jest.mock("@souche-f2e/srn-navigator", ()=> {
    return {
        clear: jest.fn(),
        load: jest.fn(),
        push: jest.fn(),
        pop: jest.fn(),
    }
});
jest.mock("@souche-f2e/srn-sentry", () => jest.fn());
jest.mock("@souche-f2e/srn-native", () => {
    return {
        openWebview: jest.fn(),
        open: jest.fn(),
    }
});
import SRNApp from "../src/modules/SRNApp";
import SRNConfig from "../src/modules/SRNConfig";
import SRNModel from "../src/modules/SRNModel";
import UnitType from "../src/modules/decorators/Unit/UnitType";
import CheckType from "../src/modules/decorators/Check/CheckType";
import Check from "../src/modules/decorators/Check/Check";
import checker from "../src/modules/decorators/Check/checker";
import Unit from "../src/modules/decorators/Unit/Unit";
import ServerName from "../src/modules/decorators/ServerName/ServerName";
import SRNPage from "../src/modules/SRNPage";
import SRNStore from "../src/modules/SRNStore";
import SRNFetch from "../src/libs/Fetch";
import Storage from "../src/libs/Storage";
import LifeCircle from "../src/modules/decorators/LifeCircle";

jest.mock("../src/libs/Fetch");
jest.mock("../src/libs/Storage");

SRNConfig.appName = "dfc";
SRNConfig.env = "dev";



describe("srn-framework modules/decorators LifeCircle test", () => {
    test("LifeCircle", () => {
        @LifeCircle
        class SRNPageLifeCycle extends SRNPage {
            route = {
                path: '',
                referrer: '',
                params: '',
            }
            constructor(props) {
                super(props);
                this.emitter = new EventEmitter();
                this.emitter.on = this.emitter.addListener;
                this.props = {
                    _route_path: 'testPath/Index'
                }
            }
            
        }
        const srnPageLifeCycle = new SRNPageLifeCycle();

        srnPageLifeCycle.viewDidAppear = jest.fn();
        srnPageLifeCycle.viewDidDisappear = jest.fn();
        srnPageLifeCycle.viewDidLoad = jest.fn();
        srnPageLifeCycle.dealloc = jest.fn();
        
        srnPageLifeCycle.componentWillMount();
        srnPageLifeCycle.emitter.emit("view_appear");
        expect(srnPageLifeCycle.viewDidAppear).toHaveBeenCalledTimes(2);
        
        srnPageLifeCycle.emitter.emit("view_disappear");
        srnPageLifeCycle.componentWillMount();
        expect(srnPageLifeCycle.viewDidDisappear).toBeCalled();
        expect(srnPageLifeCycle.viewDidAppear).toBeCalled();

        srnPageLifeCycle.componentDidMount();
        expect(srnPageLifeCycle.viewDidLoad).toBeCalled();
        srnPageLifeCycle.componentWillUnmount();
        expect(srnPageLifeCycle.dealloc).toBeCalled();

    });
});

describe("srn-framework modules/SRNApp test", ()=> {
    test("styleNav", ()=> {
        const srnApp = new SRNApp();
        const obj = { test: "test" };
        srnApp.styleNav(obj);
        expect(srnApp.navStyle).toEqual({ test: "test" });
    });
    test("setNavigation", () => {
        const srnApp = new SRNApp();
        const obj = { test: "test" };
        srnApp.setNavigation(obj);
        expect(srnApp.navigation).toEqual({ test: "test" });
    });
    test("init", () => {
        const srnApp = new SRNApp();
        const routes = {"/page1": "page1 function" , "/page2": "page2 function" };
        const defaultRoute = "/page1";
        const archerWrap = undefined;
        AppRegistry.registerComponent = jest.fn();
        srnApp.init(routes, defaultRoute, archerWrap);
        expect(NavHelper.clear).toBeCalled();
        expect(NavHelper.load).toBeCalledWith({ "/page1": 'page1 function', "/page2": 'page2 function' });
        expect(AppRegistry.registerComponent).toBeCalledWith("dfc", expect.any(Function));
    });
    test("initSentry", () => {
        const srnApp = new SRNApp();
        SRNConfig.sentry = {
            dsn: 'testDSN',
            version: '0.0.1'
        };
        srnApp.initSentry();
        expect(SRNSentry).toBeCalledWith(
            { "appName": "dfc", "appVersion": "0.0.1", "dsn": "testDSN", "env": "dev", "hostAppName": "", "hostAppVersion": "" }
        );
        srnApp.initSentry("0.5.3-beta.1",'testDSN2');
        expect(SRNSentry).toBeCalledWith(
            { "appName": "dfc", "appVersion": "0.5.3-beta.1", "dsn": "testDSN2", "env": "dev", "hostAppName": "", "hostAppVersion": "" }
        );
    });
    test('global.babelHelpers.defineEnumerableProperties', () => {
        global.babelHelpers.defineEnumerableProperties({obj: {value:''}}, {
            obj: {
                value: "testValue"
            },
            obj2: {
                name: "testName"
            }
        });
    });
    
});

describe("srn-framework modules/SRNConfig test", () => {
    test("load", ()=> {
        SRNConfig.load({
            default: {
                appName: "framework",
                appVersion: "x.x.x",
                sentry: {
                    version: "x.x.x",
                    dsn: ""
                }
            },
            dev: {},
            prepub: {},
            prod: {}
        });
        expect(SRNConfig.appName).toEqual("framework");
        expect(SRNConfig.appVersion).toEqual("x.x.x");
        expect(SRNConfig.sentry).toEqual({ version: "x.x.x", dsn: "" });

       
    });
    test("load if NativeModules.SCCRNHostData", () => {
        NativeModules.SCCRNHostData = { cheniu: "http://niu.dasouche.net" };
        SRNConfig.load({
            default: {
                appName: "framework",
                appVersion: "x.x.x",
                sentry: {
                    version: "x.x.x",
                    dsn: ""
                }
            },
            dev: {},
            prepub: {},
            prod: {}
        });
        expect(SRNConfig.appName).toEqual("framework");
        expect(SRNConfig.appVersion).toEqual("x.x.x");
        expect(SRNConfig.sentry).toEqual({ version: "x.x.x", dsn: "" });
    });
    test("load if NativeModules.SCCRNHostData with defined host", () => {
        NativeModules.SCCRNHostData = { cheniu: "http://niu.dasouche.net" };
        SRNConfig.load({
            default: {
                appName: "framework",
                appVersion: "x.x.x",
                sentry: {
                    version: "x.x.x",
                    dsn: ""
                }
            },
            dev: {"cheniu":'http://networkhost'},
            prepub: {"cheniu":'http://networkhost'},
            prod: {"cheniu":'http://networkhost'}
        });
        expect(SRNConfig.appName).toEqual("framework");
        expect(SRNConfig.appVersion).toEqual("x.x.x");
        expect(SRNConfig.sentry).toEqual({ version: "x.x.x", dsn: "" });
    });
    test("getHostData", () => {
        let host = { cheniu: "http://networkhostFromNative" };
        NativeModules.SCCRNHostData = undefined;
        SRNConfig["cheniu"] = "http://networkhost";
        SRNConfig.getHostData(host);
        expect(SRNConfig["cheniu"]).toEqual("http://networkhostFromNative");
    });
    test("getHostData SCCRNHostData", () => {
        let host = { cheniu: "http://niu.dasouche.net", dfc: "http://networkhost" };
        const args = [, { cheniu: "http://networkhostFromNative", tgc: "http://networkhostFromNative" }];
        NativeModules.SCCRNHostData = { getHostData: (cb) => { cb(...args); } };
        SRNConfig.getHostData(host);
        expect(SRNConfig["cheniu"]).toEqual("http://networkhostFromNative");
        expect(SRNConfig["dfc"]).toEqual("http://networkhost");
        expect(SRNConfig["tgc"]).toEqual("http://networkhostFromNative");
    });
    test("getStaticHostData", () => {
        let host = { cheniu: "http://networkhost" };
        NativeModules.SCCRNHostData = undefined;
        SRNConfig["cheniu"] = "http://networkhostFromNative";
        SRNConfig.getStaticHostData(host);
        expect(SRNConfig["cheniu"]).toEqual("http://networkhost");
    });
    test("getStaticHostData SCCRNHostData", () => {
        let host = { cheniu: "http://niu.dasouche.net", dfc: "http://networkhost" };
        NativeModules.SCCRNHostData = { cheniu: "http://networkhostFromNative", tgc: "http://networkhostFromNative" };
        SRNConfig.getStaticHostData(host);
        expect(SRNConfig["cheniu"]).toEqual("http://networkhostFromNative");
        expect(SRNConfig["dfc"]).toEqual("http://networkhost");
        expect(SRNConfig["tgc"]).toEqual("http://networkhostFromNative");
    });

    test("hostConfig", ()=> {
        let hostConfig = { host: { cheniu: "http://networkhostFromNative" } };
        NativeAppEventEmitter.addListener = jest.fn();
        SRNConfig.getStaticHostData = jest.fn();
        SRNConfig.hostConfig(hostConfig);
        expect(NativeAppEventEmitter.addListener).toBeCalledWith("kEventEmitterHostsListChange", expect.any(Function));
        expect(SRNConfig.getStaticHostData).toBeCalledWith({ cheniu: "http://networkhostFromNative" });
    });
});

describe("srn-framework SRNModel test", () => {

    test("__mapping", () => {
        class SRNModelTestMapping extends SRNModel {
            @observable a = "test";
            @observable b = "";
            @observable c = undefined;
            @observable @Unit(UnitType.PRICE_UNIT_F) priceF = 0;
            @observable @Unit(UnitType.PRICE_UNIT_Y) priceY = 0;
            @observable @Unit(UnitType.PRICE_UNIT_WY) priceWY = 0;
            @observable @Unit(UnitType.PRICE_UNIT_WY) priceNotMatch = 0;
            @observable @Unit(UnitType.MILEAGE_UNIT_M) distanceM = 0;
            @observable @Unit(UnitType.MILEAGE_UNIT_KM) distanceKM = 0;
            @observable @Unit(UnitType.MILEAGE_UNIT_WKM) distanceWKM = 0;
            @observable @Unit(UnitType.MILEAGE_UNIT_WKM) distanceNotMatch = 0;
            @observable @Check(CheckType.String) name = "";
            @observable @Check(CheckType.Object) obj = {};
            @observable @Check(CheckType.Array) array = [];
            @observable @Check(CheckType.Number) number = 0;
            @observable @Check(CheckType.Boolean) boolean = false;
            @observable @Check(CheckType.Any) any = "";
            @observable @Check(RegExp(/\d/g)) reg = "";
            @observable @ServerName("serverTestValue") value = "";
        }
        const srnModelTestMapping = observable(new SRNModelTestMapping());
        let srnModelData = srnModelTestMapping.__mapping({
            a: "testA",
            b: undefined,
            d: "testE",
            priceF: "12.34_$f",
            priceY: "12.34_$y",
            priceWY: "12.34_$wy",
            priceNotMatch: "12.34",
            distanceM: "43.21_$m",
            distanceKM: "43.21_$km",
            distanceWKM: "43.21_$wkm",
            distanceNotMatch: "43.21",
            name: "testName",
            serverTestValue: "testValue",
            obj: "",
            array: "",
            number: "",
            boolean: "",
            any: [{ any: [""] }],
            reg: "test"
        });
        expect(JSON.parse(JSON.stringify(srnModelData))).toEqual({
            a: "testA",
            priceF: 12.34,
            priceY: 12.34,
            priceWY: 12.34,
            priceNotMatch: 12.34,
            distanceM: 43.21,
            distanceKM: 43.21,
            distanceWKM: 43.21,
            distanceNotMatch: 43.21,
            name: "testName",
            value: "testValue",
            obj: {},
            array: [],
            number: "",
            boolean: "",
            any: [{ any: [""] }],
            reg: "test"
        });
    });
    test("__map", () => {
        class SRNModelTestMap extends SRNModel {
            @observable a = "test";
            @observable b = "";
            @observable c = undefined;
            @observable @Unit(UnitType.PRICE_UNIT_Y) price = 0;
            @observable @Unit(UnitType.MILEAGE_UNIT_KM) distance = 0;
            @observable @Check(CheckType.String) name = "";
            @observable @Check(CheckType.Object) obj = {};
            @observable @Check(CheckType.Array) array = [];
            @observable @ServerName("serverTestValue") value = "";
        }
        const srnModelTestMap = new SRNModelTestMap();
        srnModelTestMap.__map({ a: 'testA', b: undefined, d: 'testE', price: '12.34_$y', distance: "43.21_$km", name: "testName", serverTestValue: "testValue", obj: "", array: "" });
        expect(srnModelTestMap).toEqual({ a: "testA", b: undefined, c: undefined, price: 12.34, distance: 43.21, name: "testName", value: "testValue", obj: {}, array: [] });
    });
    test("toJSON", () => {
        class SRNModelTestToJSON extends SRNModel {
            @observable a = "test";
            @observable b = "";
            @observable c = undefined;
            @observable @Unit(UnitType.PRICE_UNIT_Y) price = 0;
            @observable @Unit(UnitType.MILEAGE_UNIT_KM) distance = 0;
        }
        const srnModelTestToJSON = new SRNModelTestToJSON();
        srnModelTestToJSON.toJSON();
        expect(JSON.parse(JSON.stringify(srnModelTestToJSON))).toEqual({ a: "test", b: "", c: undefined, price: "0_$y", distance: "0_$km" });
    });

});

describe("srn-framework SRNPage test", ()=> {
    test("navigation open RN", () => {
        const srnPage = new SRNPage();
        const data = { name: "test" };
        const cb = () => {};
        srnPage.route.open("/Index", data, cb);
        expect(NavHelper.push).toBeCalledWith("/Index", { name: "test" }, cb);
    });
    test("navigation open H5", () => {
        const srnPage = new SRNPage();
        const path = "http://test"
        const data = { name: "test" };
        const cb = jest.fn();
        const SRNNative = require("@souche-f2e/srn-native");
        SRNNative.openWebview = jest.fn(() => Promise.resolve(cb()));
        srnPage.route.open(path, data, cb);    
        expect(SRNNative.openWebview).toBeCalledWith("http://test", { name: "test" });
        expect(cb).toBeCalled();
    });
    test("navigation open Native", () => {
        const srnPage = new SRNPage();
        const path = "cheniu://test"
        const data = { name: "test" };
        const cb = jest.fn();
        const SRNNative = require("@souche-f2e/srn-native");
        SRNNative.open = jest.fn(() => Promise.resolve(cb()));
        srnPage.route.open(path, data, cb);    
        expect(SRNNative.open).toBeCalledWith("cheniu://test", { name: "test" });
        expect(cb).toBeCalled();
    });
    test("navigation close", () => {
        const srnPage = new SRNPage();
        const data = { name: "test" };
        srnPage.route.close(data);
        expect(NavHelper.pop).toBeCalledWith({ name: "test" });
    });
});

describe("srn-framework SRNStore test", () => {
    test("__fetch", () => {
        const srnStore = new SRNStore();
        srnStore.__fetch();
        expect(SRNFetch).toBeCalled();
    });
    test("__getCache", () => {
        const srnStore = new SRNStore();
        let key = 'test';
        let cb = () => {};
        srnStore.__getCache(key, cb);
        expect(Storage.getItem).toBeCalledWith("test", cb);
    });
    test("__setCache", () => {
        const srnStore = new SRNStore();
        let key = "test";
        let cb = () => {};
        srnStore.__setCache(key, cb);
        expect(Storage.setItem).toBeCalledWith("test", cb);
    });
    test("replaceFetchTemp", () => {
        let cb = jest.fn();
        SRNStore.replaceFetchTemp(cb);
        expect(SRNStore.prototype.__fetch).toEqual(cb);
        expect(cb.mock.calls.length).toEqual(0);
    });
});
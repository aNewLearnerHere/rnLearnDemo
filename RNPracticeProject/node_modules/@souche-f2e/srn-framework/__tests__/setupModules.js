import React from "react";
import {
    NativeModules,
    NativeAppEventEmitter,
    AppRegistry,
    AsyncStorage
} from "react-native";
import { EventEmitter } from "fbemitter";
import mobx, { observable } from "mobx";

jest.mock("@souche-f2e/srn-sentry", () => jest.fn());
jest.mock("@souche-f2e/srn-native", () => {
    return {
        log: jest.fn(),
        Loading: {
            hide: jest.fn(),
            show: jest.fn()
        },
        toast: jest.fn()
    }
});
import SRNConfig from "../src/modules/SRNConfig";
import SRNStorage from "../src/libs/Storage";
import SRNFetch from "../src/libs/Fetch";
import SRNAxios from "../src/libs/Axios";
import Axios from "axios";
jest.mock("axios");


SRNConfig.appName = "dfc";
SRNConfig.env = "dev";

jest.useFakeTimers();

describe("srn-framework Storage test", () => {
    test("setItem", () => {
        AsyncStorage.setItem = jest.fn();
        SRNStorage.setItem("testKey", { value: 'test' });
        expect(AsyncStorage.setItem).toBeCalledWith("testKey", "{\"value\":\"test\"}");
    });
    test("getItem", () => {
        const cbTest = jest.fn();
        const err = null;
        const data = JSON.stringify({ value: 'test' });
        const cb = (err, data) => cbTest(err, data);
        AsyncStorage.getItem = (key, cb) => cb(err, data);
        SRNStorage.getItem("testKey", cb);
        expect(cbTest).toBeCalledWith(null, { value: "test" });
    });
})

describe("srn-framework Fetch test", () => {
    NativeModules.SCCRNModuleBridge = Object.assign(...NativeModules.SCCRNModuleBridge || {}, { ModuleBridge: jest.fn() });
    const SRNNative = require("@souche-f2e/srn-native");
    test("Fetch SyntaxError", () => {
        let err = new SyntaxError("test");
        global.fetch = jest.fn().mockImplementation(() => Promise.reject(err));
        const data = { userToken: "testToken", appName: "dfc"};
        const cb = () => jest.fn(null, data);
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        return SRNFetch("http://niu.souche.com/car/E3mzQRagdT", { timeout: 400}).catch((err)=> {
            expect(SRNNative.log).toBeCalled();
            expect(NativeModules.SCCRNAppData.getAppData).toBeCalledWith(expect.any(Function));
            let SyntaxErrorTimer = setTimeout(() => {
                expect( NativeModules.SCCRNModuleBridge.ModuleBridge).toBeCalledWith({ "data": { "duration": 2000, "icon": "", "qrcodeText": "", "text": "网络错误：解析出错" }, "protocol": "test://open/wirelessToast" }, expect.any(Function));
            }, 200);
            clearTimeout(SyntaxErrorTimer);
        });
    });
    test("Fetch Network request failed", () => {
        let err = new Error("Network request failed");
        global.fetch = jest.fn().mockImplementation(() => Promise.reject(err));
        const data = { userToken: "testToken", appName: "dfc" };
        const cb = () => jest.fn(null, data);
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        return SRNFetch("http://niu.souche.com/car/E3mzQRagdT", { timeout: 400}).catch((err)=> {
            expect(SRNNative.log).toBeCalled();
            expect(NativeModules.SCCRNAppData.getAppData).toBeCalledWith(expect.any(Function));
            let NetworkFailedTimer = setTimeout(() => {
                expect(NativeModules.SCCRNModuleBridge.ModuleBridge).toBeCalledWith({ data: { duration: 2000, icon: "", qrcodeText: "", text: "网络信号异常，连接网络失败" }, protocol: "test://open/wirelessToast" }, expect.any(Function));
            }, 200);
            clearTimeout(NetworkFailedTimer);
        });
    });
    test("Fetch other error", () => {
        let err = new Error("test other error");
        err.traceId = 12345;
        global.fetch = jest.fn().mockImplementation(() => Promise.reject(err));
        const data = { userToken: "testToken", appName: "dfc" };        
        const cb = () => jest.fn(null, data);
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        return SRNFetch("http://niu.souche.com/car/E3mzQRagdT", { timeout: 400}).catch((err)=> {
            expect(SRNNative.log).toBeCalled();
            expect(NativeModules.SCCRNAppData.getAppData).toBeCalledWith(expect.any(Function));
            let otherErrorTimer = setTimeout(() => {
                expect(NativeModules.SCCRNModuleBridge.ModuleBridge).toBeCalledWith({ data: { duration: 2000, icon: "qrcode", qrcodeText: "12345", text: "test other error" }, protocol: "test://open/wirelessToast" }, expect.any(Function));
            }, 200);
            clearTimeout(otherErrorTimer);
        });
    });
    test("Fetch response fetchStatus!== 200 ", () => {
        let body = { data: "test" };
        global.fetch = jest.fn().mockImplementation(() => Promise.resolve({ json: () => Promise.resolve(body), status: 400 }));
        const data = { userToken: "testToken", appName: "dfc" };        
        const cb = () => jest.fn(null, data);
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        return SRNFetch("http://niu.souche.com/car/E3mzQRagdT", { timeout: 400 }).catch(error=> {
            expect(SRNNative.log).toBeCalled();
            expect(NativeModules.SCCRNAppData.getAppData).toBeCalledWith(expect.any(Function));
            let fetchStatusErrorTimer = setTimeout(() => {
                expect(NativeModules.SCCRNModuleBridge.ModuleBridge).toBeCalledWith({ data: { duration: 2000, icon: "", qrcodeText: "", text: "网络信号异常，连接网络失败" }, protocol: "test://open/wirelessToast" }, expect.any(Function));
            }, 200);
            clearTimeout(fetchStatusErrorTimer);
        });
    });
    test("Fetch response code and success is undefined", () => {
        let body = { data: { value: "test" } };
        global.fetch = jest.fn().mockImplementation(() => Promise.resolve({ json: () => Promise.resolve(body), status: 200 }));
        const data = { userToken: "testToken", appName: "dfc" };
        const cb = () => jest.fn(null, data);
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        return SRNFetch("http://niu.souche.com/car/E3mzQRagdT", { timeout: 400 }).then(res=> {
            expect(SRNNative.log).toBeCalled();
            expect(NativeModules.SCCRNAppData.getAppData).toBeCalledWith(expect.any(Function));
            let fetchNotCalledTimer = setTimeout(() => {
                expect(NativeModules.SCCRNModuleBridge.ModuleBridge).toBeCalled();
            }, 200);
            clearTimeout(fetchNotCalledTimer);
            expect(res).toEqual({ data: { value: "test" } });
        });
    });
    test("Fetch response code is 10000", () => {
        let body = { code: 10000, data: { value: "test" }, success: false };
        global.fetch = jest.fn().mockImplementation(() => Promise.resolve({ json: () => Promise.resolve(body), status: 200 }));
        const data = { userToken: "testToken", appName: "dfc" };
        const cb = () => jest.fn(null, data);
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        return SRNFetch("http://niu.souche.com/car/E3mzQRagdT", { timeout: 400 }).then(res => {
            expect(SRNNative.log).toBeCalled();
            expect(NativeModules.SCCRNAppData.getAppData).toBeCalledWith(expect.any(Function));
            let fetchNotCalledTimer = setTimeout(() => {
                expect(NativeModules.SCCRNModuleBridge.ModuleBridge).toBeCalled();
            }, 200);
            clearTimeout(fetchNotCalledTimer);
            expect(res).toEqual({ value: "test" });
        });
        
    });
    test("Fetch response success", () => {
        let body = { code: 0, data: { value: "test" }, success: true };
        global.fetch = jest.fn().mockImplementation(() => Promise.resolve({ json: () => Promise.resolve(body), status: 200 }));
        const data = { userToken: "testToken", appName: "dfc" };
        const cb = () => jest.fn(null, data);
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        return SRNFetch("http://niu.souche.com/car/E3mzQRagdT", { timeout: 400 }).then(res => {
            expect(SRNNative.log).toBeCalled();
            expect(NativeModules.SCCRNAppData.getAppData).toBeCalledWith(expect.any(Function));
            let fetchNotCalledTimer = setTimeout(() => {
                expect(NativeModules.SCCRNModuleBridge.ModuleBridge).toBeCalled();
            }, 200);
            clearTimeout(fetchNotCalledTimer);
            expect(res).toEqual({ value: "test" });
        });
        
    });

    // Fetch response code 10001 need login 暂不可测
    // test("Fetch response code 10001 need login", () => {
    //     let body = { code: 10001, data: { value: "test" }, success: false };
    //     global.fetch = jest.fn().mockImplementation(() => Promise.resolve({ json: () => Promise.resolve(body), status: 200 }));
    //     global.LOGIN_PROTOCOL = "test://login";
    //     const data = { userToken: "testToken", appName: "dfc" };
    //     const cb = () => jest.fn(null, data);
    //     const param = { protocol: "" };
    //     const loginCB = (cb) => jest.fn((param, OpenVCBridgeCB) => OpenVCBridgeCB(cb));
    //     const OpenVCBridgeCB = () => jest.fn(() => { console.log('!!!') });
    //     NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
    //     NativeModules.SCCRNOpenVCBridge = Object.assign(...NativeModules.SCCRNOpenVCBridge || {}, { OpenVCBridge: (param, OpenVCBridgeCB) => OpenVCBridgeCB() });
    //     return SRNFetch("http://niu.souche.com/car/E3mzQRagdT", { timeout: 400 }).then(res => {
    //         expect(SRNNative.log).toBeCalled();
    //         expect(NativeModules.SCCRNAppData.getAppData).toBeCalled();
    //     });
    // });

});


describe("srn-framework Axios test", () => {
    NativeModules.SCCRNModuleBridge = Object.assign(...NativeModules.SCCRNModuleBridge || {}, { ModuleBridge: jest.fn() });
    const SRNNative = require("@souche-f2e/srn-native");
    test("SRNAxios getAppData", () => {
        const data = { userToken: "testToken", appName: "dfc" };
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        SRNAxios.prototype.getAppData();
        expect(NativeModules.SCCRNAppData.getAppData).toBeCalledWith(expect.any(Function));
    });
    test("SRNAxios getDefaultHeaders", async () => {
        const data = { userToken: "testToken", appName: "dfc" };
        SRNAxios.prototype.getAppData = jest.fn(() => new Promise(resolve => resolve(data)));
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, {
            getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test'});
        const result = await SRNAxios.prototype.getDefaultHeaders();
        expect(SRNAxios.prototype.getAppData).toBeCalled();
        expect(result).toEqual({
            Agent: 11,
            Authorization: "Token token=testToken",
            BundleVersion: undefined,
            "Souche-Inc-Security-Token": "testToken",
            "Souche-Security-Token": "testToken",
            TT: "testToken",
            Token: "testToken",
            "User-Agent": "ReactNative Platforms/ios AppName/undefined AppVersion/ ",
            Version: "",
            _security_token: "testToken",
            _security_token_inc: "testToken",
            appname: "dfc",
            appscheme: "test",
            "souche-std-response": 1
        });
    });
    test("SRNAxios handelErrorToast", () => {
        SRNAxios.prototype.handelErrorToast("this is test handelErrorToast", { hide: true });
        expect(SRNNative.Loading.hide).toBeCalled();
        let handelErrorToastTimer = setTimeout(() => {
            expect(SRNNative.toast).toBeCalledWith("this is test handelErrorToast");
        }, 200);
        clearTimeout(handelErrorToastTimer);
    });
    test("SRNAxios defaultHandelResponse", () => {
        let res = { data: { success: true }, config: { dataResponse: true } };
        expect(SRNAxios.prototype.defaultHandelResponse(res)).toEqual({ success: true });
        res = { data: { success: true, data: { value: "test" } } };
        expect(SRNAxios.prototype.defaultHandelResponse(res)).toEqual({ value: "test" });
        SRNAxios.prototype.handelErrorToast = jest.fn();
        res = { data: { success: false, msg: "Network request failed" }, config: { errorToastConfig: { hide: true } } };
        try {
            SRNAxios.prototype.defaultHandelResponse(res);
        } catch (error) {
            expect(SRNAxios.prototype.handelErrorToast).toBeCalledWith("网络信号异常，连接网络失败", { hide: true });
            expect(error.message).toEqual("Network request failed");
        }
        SRNAxios.prototype.handelErrorToast = jest.fn();
        res = { data: { success: false }, config: { errorToastConfig: { hide: true }}};
        try {
            SRNAxios.prototype.defaultHandelResponse(res);
        } catch (error) {
            expect(SRNAxios.prototype.handelErrorToast).toBeCalledWith("请求失败，请稍后重试", { hide: true });
            expect(error.message).toEqual("请求失败，请稍后重试");
        }
        res = {};
        try {
            SRNAxios.prototype.defaultHandelResponse(res);
        } catch (error) {
            expect(error.message).toEqual("网络错误：解析出错");
        };        
    });

    test("SRNAxios redefineAxiosMethods with config handelErrorToast and errorToastConfig", () => {
        const data = { userToken: "testToken", appName: "dfc" };
        const err = { catchErrorMessage: "this is the testCatchErrorMessage", errorToastConfig: true };
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        Axios.post = () => Promise.resolve(Promise.reject(err));
        SRNAxios.prototype.handelErrorToast = jest.fn();
        return SRNAxios.prototype.redefineAxiosMethods('post', ['https://test.com', err]).catch(err=> {
            return expect(SRNAxios.prototype.handelErrorToast).toBeCalledWith("this is the testCatchErrorMessage", true);
        });
    });
    test("SRNAxios redefineAxiosMethods with config allResponse", () => {
        const data = { userToken: "testToken", appName: "dfc" };
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        const defaultHeaders = { allResponse: true };
        const res = { data: "testValue" };
        Axios.post = jest.fn(() => Promise.resolve(Promise.resolve(res)));
        SRNAxios.prototype.defaultHandelResponse = jest.fn();
        SRNAxios.prototype.handelErrorToast = jest.fn();
        return SRNAxios.prototype.redefineAxiosMethods('post', ['https://test.com', defaultHeaders]).then(res=> {
            expect(res).toEqual({
                data: "testValue",
                headers: {
                    Agent: 11,
                    Authorization: "Token token=testToken",
                    BundleVersion: undefined,
                    "Souche-Inc-Security-Token": "testToken",
                    "Souche-Security-Token": "testToken",
                    TT: "testToken",
                    Token: "testToken",
                    Version: "",
                    _security_token: "testToken",
                    _security_token_inc: "testToken",
                    appname: "dfc",
                    appscheme: "test",
                    "souche-std-response": 1
                }
            });
        });
    });
    test("SRNAxios redefineAxiosMethods default status 200 without config", () => {
        const data = { userToken: "testToken", appName: "dfc" };
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        const res = { data: "testValue", status: 200 };
        Axios.post = jest.fn(() => Promise.resolve(Promise.resolve(res)));
        SRNAxios.prototype.defaultHandelResponse = jest.fn();
        SRNAxios.prototype.handelErrorToast = jest.fn();
        return SRNAxios.prototype.redefineAxiosMethods('post', ['https://test.com']).then(res=> {
            expect(SRNAxios.prototype.defaultHandelResponse).toBeCalledWith({ data: "testValue", status: 200 });
        });
    });
    test("SRNAxios redefineAxiosMethods default status 200 with config handelResponse", () => {
        const data = { userToken: "testToken", appName: "dfc" };
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        const config = { handelResponse: jest.fn()};
        const res = { data: "testValue", status: 200 };
        Axios.post = jest.fn(() => Promise.resolve(Promise.resolve(res)));
        SRNAxios.prototype.defaultHandelResponse = jest.fn();
        SRNAxios.prototype.handelErrorToast = jest.fn();
        return SRNAxios.prototype.redefineAxiosMethods('post', ['https://test.com', config]).then(res=> {
            expect(config.handelResponse).toBeCalledWith({ data: "testValue", status: 200 });
        });
    });
    test("SRNAxios redefineAxiosMethods default status is not 200 without config", () => {
        const data = { userToken: "testToken", appName: "dfc" };
        NativeModules.SCCRNAppData = Object.assign(...NativeModules.SCCRNAppData || {}, { getAppData: jest.fn(cb => cb(null, data)), appScheme: 'test' });
        const res = { data: "testValue", status: 0 };
        const config = { statusErrorMessage: "This is test statusErrorMessage" };
        Axios.post = () => Promise.resolve(new Promise((resolve, reject)=> {
            try {
                resolve(res);
            } catch (err) {
                reject(err);
            }
        }));
        SRNAxios.prototype.defaultHandelResponse = jest.fn();
        SRNAxios.prototype.handelErrorToast = jest.fn();
        return SRNAxios.prototype.redefineAxiosMethods('post', ['https://test.com', config]).then(res).catch(err => {
            expect(err.message).toEqual("This is test statusErrorMessage");
            expect(err.code).toEqual(0);
        });
    });

    
});


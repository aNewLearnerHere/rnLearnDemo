
import { NativeModules, Platform, DeviceEventEmitter } from "react-native";

import Axios from "axios";

import SRNConfig from "../modules/SRNConfig";
import SRNNative from "@souche-f2e/srn-native";
// import stacktraceParser from "stacktrace-parser";

var reloginCallbacks = [];
var hasPopupLogin = false;

const SRNNativeUtil = {
    getAppData: function(cb) {
         NativeModules.SCCRNAppData.getAppData(function(err, data) {
             if (err) {
                 console.error(err);
                 return;
             }
             cb && cb(null, data);
         });
     }, reLogin: function(cb) {
         reloginCallbacks.push(cb);
         if (!hasPopupLogin) {
             hasPopupLogin = true;
             NativeModules.SCCRNOpenVCBridge.OpenVCBridge(
                 { protocol: global.LOGIN_PROTOCOL || "" },
                 () => {
                     setTimeout(() => {
                         hasPopupLogin = false;
                         this.getAppData(() => {
                             while (this.reloginCallbacks.length > 0) {
                                 var _cb = this.reloginCallbacks.shift();
                                 _cb && _cb();
                             }
                         });
                     }, 100);
                 }
             );
         }
     } };

class SRNAxios {
    constructor() {
        this.APP_DATA = NativeModules.SCCRNAppData || { env: 0, userToken: "" };
        ["delete", "get", "head", "post", "put", "patch"].map(method => {
            SRNAxios.prototype[method] = function() {
                return SRNAxios.prototype.redefineAxiosMethods(method, arguments);
            };
        });
        this.interceptors = Axios.interceptors;
    }
    // 获取AppData
    getAppData() {
        return new Promise((resolve, reject) => {
            SRNNativeUtil.getAppData((err, data) => {
                if (err) {
                    console.warn(err);
                    reject(err);
                }
                resolve(data);
            });
        });
    }
    // 定义默认headers
    async getDefaultHeaders() {
        let data = await this.getAppData();
        let token = data.userToken || "empty_token";
        let appName = data.appName || "undefined";

        Axios.defaults.headers.common["Authorization"] = token;

        return {
            Authorization: "Token token=" + token,
            Token: token,
            appname: appName,
            appscheme: NativeModules.SCCRNAppData.appScheme,
            TT: token,
            Agent: Platform.OS === "ios" ? 11 : 10,
            _security_token: token,
            _security_token_inc: token,
            "Souche-Security-Token": token,
            "Souche-Inc-Security-Token": token,
            "souche-std-response": 1,
            "User-Agent": SRNConfig.ua,
            Version: SRNConfig.hostAppVersion,
            BundleVersion: SRNConfig.appVersion
        };
    }
    // 重新定义Axios方法
    redefineAxiosMethods(method, args) {
        let self = this;
        let [url, ...restConfig] = Array.from(args);
        let config = restConfig[0] || {};
        return this.getDefaultHeaders().then(defaultHeaders => {
            // 合并defaultHeaders
            config.headers = { ...config.headers, ...defaultHeaders };
            //本地开发调试环境，删掉 User-Agent 属性，以避免开启允许浏览器跨域后 在 Chrome DevTools 中调试网络请求时的 'Refused to set unsafe header "user-agent"'报错
            if (__DEV__) {
                delete config.headers["User-Agent"];
            }
            return Axios[method].call(self, url, config).then(res => {
                // 根据 config.allResponse 判断是否需要返回全部数据;
                if (config.allResponse) {
                    return { ...res, ...{ headers: config.headers } };
                } else {
                    if (res.status === 200) {
                        /**
                         * handelResponse 设置后可自定义数据返回处理方法
                         * @param {res} 返回的原始数据
                         * return {obj} 方法中需返回处理后的数据
                         */
                        if (config.handelResponse && typeof config.handelResponse === 'function') {
                            return config.handelResponse(res);
                        } else {
                            return this.defaultHandelResponse(res);
                        }
                    } else {
                        let e = new Error();
                        e.message = config.statusErrorMessage || "系统错误，请稍后重试";
                        e.code = res.status;
                        throw e;
                    }
                }
            }).catch(e=> {
               this.handelErrorToast(config.catchErrorMessage || e.message, config.errorToastConfig);
               throw e;
            });
        });
    }

    // 返回数据的默认处理逻辑
    defaultHandelResponse(res) {
        let e = new Error();
        if (res.data) {
            if (res.data.success) {
                // dataResponse 会返回 data 内的全部数据（数据包含code、data、msg、success、traceId）
                if (res.config && res.config.dataResponse) {
                    return res.data;
                }
                // 仅返回data.data内部业务的数据
                return res.data.data;
            } else {
                // unsuccessMessage  返回 success 为 false 时的错误提示信息字符串设置
                e.message = res.data.unsuccessMessage || res.data.msg || "请求失败，请稍后重试";
                if (e.message === "Network request failed") {
                    this.handelErrorToast("网络信号异常，连接网络失败", res.config && res.config.errorToastConfig);
                } else {
                    this.handelErrorToast(e.message + (e.traceId ? "\n" + e.traceId : ""), res.config && res.config.errorToastConfig);
                }
                throw e;
            }
        } else {
            e.message = "网络错误：解析出错";
            throw e;
        }
    }

    /**
     * 错误弹窗处理
     * @param {str} 错误提示弹窗文案 
     * @param {config} 错误提示弹窗设置
     */
    handelErrorToast(str, config) {
    if (!config || !config.hide) {
        SRNNative.Loading.hide();
        setTimeout(() => SRNNative.toast(str), 200);
    }

}

}



export default SRNAxios;
import { NativeAppEventEmitter } from 'react-native';
var ReactMixin = {
    componentWillMount: function () {
        this.route.path = this.props._route_path;
        this.route.referrer = this.props._route_referrer;
        this.route.params = this.props._route_params;
        if(this.emitter) {
            this.emitter.on('view_appear', () => {
                activeEmitter = this.emitter;
                this.viewDidAppear();

            });
            this.emitter.on('view_disappear', () => {
                this.viewDidDisappear();
            });
        }
        activeEmitter = this.emitter;
        this.viewDidAppear();
    },
    componentDidMount: function () {
        this.viewDidLoad();
    },
    componentWillUnmount: function () {
        activeEmitter = null;
        this.dealloc();
    }
};
var activeEmitter ;
NativeAppEventEmitter.addListener(
  'AppearAction',
  (reminder) => {
      activeEmitter&&activeEmitter.emit('view_appear')
  }
);
NativeAppEventEmitter.addListener(
  'DisappearAction',
  (reminder) => {
      activeEmitter&&activeEmitter.emit('view_disappear')
  }
);
/**
 * 包装 react 组件
 * @param target
 */
function LifeCircle (target) {
    let targetCWM = target.prototype.componentWillMount;
    target.prototype.componentWillMount = function () {
        targetCWM && targetCWM.call(this);
        ReactMixin.componentWillMount.call(this);
    };
    let targetCDM = target.prototype.componentDidMount;
    target.prototype.componentDidMount = function () {
        targetCDM && targetCDM.call(this);
        ReactMixin.componentDidMount.call(this);
    };
    let targetCWU = target.prototype.componentWillUnmount;
    target.prototype.componentWillUnmount = function () {
        targetCWU && targetCWU.call(this);
        ReactMixin.componentWillUnmount.call(this);
    };
}

export  default  LifeCircle;
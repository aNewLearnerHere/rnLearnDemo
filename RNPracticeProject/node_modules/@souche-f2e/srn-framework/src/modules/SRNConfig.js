import {
    NativeModules,
    DeviceEventEmitter,
    NativeAppEventEmitter,
    Platform
} from 'react-native';
import _ from 'lodash';

let AppData = NativeModules.SCCRNAppData || {
      env: 0,
      userToken: ''
  };
const ENV_MAP = {
    0: 'dev',
    1: 'prod',
    2: 'prepub'
}
class SRNConfig {
  /**
   * 测试环境
   * @type {number}
   */
  static ENV_DEV = "dev";
  /**
   * 预发环境
   * @type {number}
   */
  static ENV_PREPUB = "prepub";
  /**
   * 线上环境
   * @type {number}
   */
  static ENV_PROD = "prod";

  /**
   * 车牛 app
   * @type {string}
   */
  static APPNAME_CHENIU = "cheniu";
  /**
   * 大风车 app
   * @type {string}
   */
  static APPNAME_DAFENGCHE = "dafengche";
  /**
   * 弹个车 app
   * @type {string}
   */
  static APPNAME_TANGECHE = "destiny";

  /**
   * ios 平台
   * @type {number}
   */
  static PLATFORM_IOS = "ios";
  /**
   * android 平台
   * @type {number}
   */
  static PLATFORM_ANDROID = "android";
  /**
   * 当前环境，分别对应 ENV_DEV、ENV_PREPUB、ENV_PROD
   * @type {number}
   */
  static env = ENV_MAP[AppData.env];
  /**
   * 当前宿主 app 的 appName，分别对应 APPNAME_CHENIU、APPNAME_DAFENGCHE、APPNAME_TANGECHE
   * @type {string}
   */
  static hostAppName = AppData.appName ? AppData.appName.toLowerCase() : "";
  /**
   * 当前的OS，分别对应 PLATFORM_IOS、PLATFORM_ANDROID
   * @type {number}
   */
  static platform = Platform.OS;
  /**
   * 当前宿主 app 的协议头，不带冒号
   * @type {string}
   */
  static appScheme = AppData.appScheme || "";
  /**
   *
   * @type {string}
   */
  static ua = `ReactNative Platforms/${Platform.OS} AppName/${
    AppData.appName
    } AppVersion/${AppData.appVersion || ""} `;

  /**
   * 当前宿主 app 的版本号
   * @type {string}
   */
  static hostAppVersion = AppData.appVersion || "";

  /**
   * 加载本地配置信息
   * @param defaultConfig 默认配置
   * @param localConfig 环境相关的配置
   * @param loadConfig.useEnvHost 是否使用环境Host
   */
  static load(localConfig, loadConfig = {}) {
    let _localConfig = localConfig[SRNConfig.env];
    let _defaultConfig = localConfig.default;
    if (!_defaultConfig.appName || !_defaultConfig.appVersion) {
      console.error(
        "必须在 default.config.js 中定义 appName 和 appVersion 字段"
      );
    }
    let config = _.extend(_defaultConfig, _localConfig);
    for (let i in config) {
        if (config.hasOwnProperty(i)) {
          // 如果存在SCCRNHostData模块，则不会使用环境配置中的host
          if (NativeModules.SCCRNHostData) {
            if (_localConfig && typeof _localConfig[i] === "string" && _localConfig[i].includes("http") && (!loadConfig.useEnvHost || !loadConfig)) {
                setTimeout(() => {
                    console.warn(`[srn-framework] 统一配置管理：${SRNConfig.env}.config中定义的host信息无效，请在host中定义所需的配置，文档详见 http://fedoc.sqaproxy.souche.com/#/rn/framework/SRNConfig配置管理`);
                }, 0);
            } else {
                SRNConfig[i] = config[i];
            }
          } else {
             SRNConfig[i] = config[i];
          }
        }
    }
    SRNConfig.ua += `BundleName/${SRNConfig.appName} BundleVersion/${
      SRNConfig.appVersion
    } `;
  }

  /**
   * 获取 Native App 与 RN 中host的配置信息（异步）
   */
  static getHostData(rnHost) {
    // 如果存在SCCRNHostData模块，则使用Native中的host与RN中的host.config混合的方式
    if (NativeModules.SCCRNHostData) {
      NativeModules.SCCRNHostData.getHostData((...args) => {
        let nativeHost = { ...args };
        if (nativeHost[1]) {
            console.log("统一配置管理：正在优先使用Native中的Host配置", "\n", "Native Host:", nativeHost[1], "\n", "RN配置:", rnHost);
        } else {
            console.log("统一配置管理：正在使用RN项目中的Host配置", "\n", rnHost);
        }
        let hosts = _.extend({}, rnHost, nativeHost[1]);
        for (let i in hosts) {
          if (typeof hosts[i] === "string") {
            SRNConfig[i] = hosts[i];
          }
        }
      });
    } else {
      for (let i in rnHost) {
        if (typeof rnHost[i] === "string") {
          SRNConfig[i] = rnHost[i];
        }
      }
      setTimeout(() => {
          console.warn("[srn-framework] 统一配置管理：NativeModules中不存在 SCCRNHostData模块，不能获取Native中的Host信息，如需自定义host请参看文档 http://fedoc.sqaproxy.souche.com/#/rn/framework/SRNConfig配置管理");
      }, 0);
    }
  }

  /**
   * 获取 Native App 与 RN 中host的静态配置信息（同步）
   */
  static getStaticHostData(rnHost) {
    // 如果存在SCCRNHostData模块，则使用Native中的host与RN中的host.config混合的方式
    if (NativeModules.SCCRNHostData) {
      let nativeHost = NativeModules.SCCRNHostData;
      if (nativeHost) {
          console.log("统一配置管理：正在优先使用Native中的Host配置", "Native Host:", nativeHost, "RN配置:", rnHost);
      } else {
          console.log("统一配置管理：正在使用RN项目中的Host配置", rnHost);
      }
      let hosts = _.extend({}, rnHost, nativeHost);
      for (let i in hosts) {
          if (typeof hosts[i] === "string") {
              SRNConfig[i] = hosts[i];
          }
      }
    } else {
      for (let i in rnHost) {
        if (typeof rnHost[i] === "string") {
          SRNConfig[i] = rnHost[i];
        }
      }
      setTimeout(()=> {
        console.warn("[srn-framework] 统一配置管理：NativeModules中不存在 SCCRNHostData模块，不能获取Native中的Host信息，如需自定义host请参看文档 http://fedoc.sqaproxy.souche.com/#/rn/framework/SRNConfig配置管理");
      }, 0);
    }
  }

  /**
   * 加载App中host配置信息
   * * @param hostConfig 环境相关的配置
   */
  static hostConfig(hostConfig) {
    //   注册切换Host环境监听
    if (NativeAppEventEmitter) {
       NativeAppEventEmitter.addListener("kEventEmitterHostsListChange", () =>
        this.getHostData(hostConfig.host)
      );
    } else {
      setTimeout(() => {
        console.warn("[srn-framework] 统一配置管理：NativeModules中不存在 NativeAppEventEmitter模块，不能通过Native的统一配置管理功能，如需自定义host请参看文档 http://fedoc.sqaproxy.souche.com/#/rn/framework/SRNConfig配置管理");
      }, 0);
    }
   
    //获取 Native App 与 RN 中host的配置信息
    this.getStaticHostData(hostConfig.host);
  }
}

export default  SRNConfig;
import NavHelper from '@souche-f2e/srn-navigator';
import SRNSentry from '@souche-f2e/srn-sentry';
import SRNConfig from './SRNConfig';
import React from 'react';
import { AppRegistry } from 'react-native';

/**
 * Support for defineEnumerableProperties
 * https://github.com/facebook/react-native/pull/12703/files
 * 为SRN内部支持getter方法引入模块使用
 */
global.babelHelpers.defineEnumerableProperties = function(obj, descs) {
     for (var key in descs) {
         var desc = descs[key];
         desc.configurable = desc.enumerable = true;
         if ("value" in desc) desc.writable = true;
         Object.defineProperty(obj, key, desc);
     }
     return obj;
 };

class SRNApp {
    constructor() {
        this.navStyle = {};
        this.navigation = {};

    }

    styleNav(obj) {
        this.navStyle = obj;
    }

    setNavigation(obj) {
        this.navigation = obj;
    }
    /**
     * 初始化应用
     * @param appName
     * @param routes
     * @param defaultRoute
     */
    init (routes, defaultRoute, archerWrap) {
        NavHelper.clear();
        NavHelper.load(routes);
        AppRegistry.registerComponent(SRNConfig.appName, () => {
            // 返回一个 stateless 的组件
            return (props) => {
                // 处理默认进入某一页
                if (props && props.route) {
                    NavHelper.push(props.route, props);
                } else {
                    NavHelper.push(defaultRoute);
                }
                const app = <NavHelper.View {...props} {...this.navStyle} {...this.navigation} />;
                return typeof(archerWrap) === 'function' ? archerWrap(app) : app;
            }
        });
    }

    /**
     * 初始化 sentry
     * @param version 应用的版本号
     * @param dsn 应用在 sentry 上的地址，具体联系黎勇或清华获取
     */
    initSentry (version, dsn) {
        // dsn, env, appName, appVersion, hostAppName, hostAppVersion
        SRNSentry && SRNSentry({
            dsn: dsn || SRNConfig.sentry.dsn,
            env: SRNConfig.env,
            appName: SRNConfig.appName,
            appVersion: version || SRNConfig.sentry.version,
            hostAppName: SRNConfig.hostAppName,
            hostAppVersion: SRNConfig.hostAppVersion
        });
    }
}

export default SRNApp;

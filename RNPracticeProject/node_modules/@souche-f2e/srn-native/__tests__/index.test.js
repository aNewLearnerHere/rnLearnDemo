import { NativeModules } from 'react-native';
import SRNNative from '../index';

describe('SRNNative', () => {
    beforeEach(() => {
        Date.__originNow = Date.now;
    });
    afterEach(() => {
        Date.now = Date.__originNow;
        delete Date.__originNow;
        NativeModules.SCCRNAppData._shouldProtocolFailed = false;
        NativeModules.SCCRNOpenVCBridge._shouldProtocolFailed = false;
        NativeModules.SCCRNPopAndPushVCBridge._shouldProtocolFailed = false;
        NativeModules.SCCRNModuleBridge._shouldProtocolFailed = false;
        NativeModules.SCCRNModuleBridge._shouldConfirmCancel = false;
        NativeModules.SCCRNModuleBridge._shareResultPlatform = 1;
        NativeModules.SCCRNModuleBridge._shouldContactsFailed = false;
    });

    // lib/common.js
    it('SRNNative.relogin()', async () => {
        const data = await SRNNative.relogin();
        expect(data).toMatchObject({
            appScheme: 'mock',
        });
    });
    
    it('SRNNative.open()', async () => {
        const data = await SRNNative.open('mock://open/reactnative');
        expect(data).toMatchObject({
            code: 1,
        });
    
        NativeModules.SCCRNOpenVCBridge._shouldProtocolFailed = true;
        try {
            await SRNNative.open('mock://open/reactnative');
        } catch (error) {
            expect(error.message).toBe('protocol error');
        }
    });
    
    it('SRNNative.popAndOpen()', async () => {
        const data = await SRNNative.popAndOpen('mock://open/reactnative');
        expect(data).toMatchObject({
            code: 1,
        });
    
        NativeModules.SCCRNPopAndPushVCBridge._shouldProtocolFailed = true;
        try {
            await SRNNative.popAndOpen('mock://open/reactnative');
        } catch (error) {
            expect(error.message).toBe('protocol error');
        }
    });
    
    it('SRNNative.popAllAndOpen()', async () => {
        const data = await SRNNative.popAllAndOpen('mock://open/reactnative');
        expect(data).toMatchObject({
            code: 1,
        });
    
        NativeModules.SCCRNPopAndPushVCBridge._shouldProtocolFailed = true;
        try {
            await SRNNative.popAllAndOpen('mock://open/reactnative');
        } catch (error) {
            expect(error.message).toBe('protocol error');
        }
    });
    
    it('SRNNative.openWebview()', async () => {
        const data = await SRNNative.openWebview('https://www.baidu.com', { data: { code: 1 } });
        expect(NativeModules.SCCRNOpenVCBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/webv?url=https%3A%2F%2Fwww.baidu.com');
        expect(data).toMatchObject({
            code: 1,
        });
    
        NativeModules.SCCRNOpenVCBridge._shouldProtocolFailed = true;
        try {
            await SRNNative.openWebview('https://www.baidu.com');
        } catch (error) {
            expect(error.message).toBe('protocol error');
        }
    });
    
    it('SRNNative.openGuideView()', async () => {
        const data = await SRNNative.openGuideView({ code: 1 });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/guideView');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.guideConigs).toMatchObject({ code: 1 });
        expect(data).toMatchObject({
            code: 1,
        });
    
        NativeModules.SCCRNModuleBridge._shouldProtocolFailed = true;
        try {
            await SRNNative.openGuideView();
        } catch (error) {
            expect(error.message).toBe('protocol error');
        }
    });
    
    it('SRNNative.openDatePicker()', async () => {
        const data = await SRNNative.openDatePicker();
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/datePicker');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            format: "yyyy/MM/dd",
            rightText: '确定',
            leftText: '',
            rightColor: '#FF5050',
            rightSize: '14'
        });
        expect(data).toBe('2018/12/27');
    
        await SRNNative.openDatePicker({
            format: "yyyy/MM/dd HH:mm",
            rightText: '完成',
            leftText: '只能使用8年',
            rightColor: '#FF571A',
            rightSize: '16'
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            format: "yyyy/MM/dd HH:mm",
            rightText: '完成',
            leftText: '只能使用8年',
            rightColor: '#FF571A',
            rightSize: '16'
        });
    
        NativeModules.SCCRNModuleBridge._shouldProtocolFailed = true;
        try {
            await SRNNative.openDatePicker();
        } catch (error) {
            expect(error.message).toBe('protocol error');
        }
    });
    
    it('SRNNative.getContacts()', async () => {
        const data = await SRNNative.getContacts();
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/getContacts');
        expect(data[0]).toMatchObject({
            "name": "John Appleseed",
            "phones": "888-555-5512,888-555-1212",
            "section": "J"
        });
    
        NativeModules.SCCRNModuleBridge._shouldContactsFailed = true;
        try {
            await SRNNative.getContacts();
        } catch (error) {
            expect(error).toBe('系统错误');
        }
    });
    
    it('SRNNative.saveContacts()', async () => {
        const contactData = {
            name: '小明',
            phone: '18767136122'
        };
        const data = await SRNNative.saveContacts([contactData]);
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/saveContacts');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.data[0]).toMatchObject(contactData);
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.filter).toBe(0);
        expect(data).toMatchObject({
            data: [
                {
                    phone: "18767136122",
                    name: "小明",
                    saved: true
                }
            ]
        });

        await SRNNative.saveContacts([contactData], true);
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.filter).toBe(1);
    
        NativeModules.SCCRNModuleBridge._shouldContactsFailed = true;
        try {
            await SRNNative.saveContacts([contactData]);
        } catch (error) {
            expect(error).toBe('系统错误');
        }
    });
    
    it('SRNNative.bury()', async () => {
        await SRNNative.bury('TANGECHE_TEST', {
            name: '小明'
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/DataEmbedding');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.typeId).toBe('TANGECHE_TEST');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.vals).toMatchObject({
            name: '小明'
        });
    });
    
    it('SRNNative.buryPage()', async () => {
        await SRNNative.buryPage('srn_native_test_/Index', 'begin');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://trackPage/DataEmbedding');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.pageID).toBe('srn_native_test_/Index');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.pageAction).toBe('begin');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.pageType).toBe(3);
    });
    
    it('SRNNative.log()', async () => {
        const now = new Date(2018, 11, 27, 17, 18, 23);
        Date.now = jest.fn(() => now);
        await SRNNative.log('d', '这里是日志信息', '[srn_native_test]');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/SCCLog');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.level).toBe('d');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.msg).toBe('这里是日志信息');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.tag).toBe('[srn_native_test]');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.exception).toBe(undefined);
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data.time).toBe(now);
    });
    
    it('SRNNative.getChannelUserInfo()', async () => {
        await SRNNative.getChannelUserInfo('channel');
        expect(NativeModules.SCCRNOpenVCBridge._savedArgumentsForTest[0].protocol).toBe('mock://getUser/userCenter?channel=channel');
    
        NativeModules.SCCRNOpenVCBridge._shouldProtocolFailed = true;
        try {
            await SRNNative.getChannelUserInfo('channel');
        } catch (error) {
            expect(error.message).toBe('protocol error');
        }
    });

    it('SRNNative.getAppData()', async () => {
        const appData = await SRNNative.getAppData();
        expect(appData).toMatchObject({
            appScheme: 'mock',
        });

        NativeModules.SCCRNAppData._shouldProtocolFailed = true;
        try {
            await SRNNative.getAppData();
        } catch (error) {
            expect(error.message).toBe('protocol error');
        }
    });

    it('SRNNative.getGPSData()', async () => {
        const gpsData = await SRNNative.getGPSData();
        expect(gpsData).toMatchObject({
            "geopoint": "5.3E-1631,3330.95",
            "state": "浙江省",
            "city": "杭州市"
        });
    });

    it('SRNNative.getDeviceData()', async () => {
        const deviceData = await SRNNative.getDeviceData();
        expect(deviceData).toMatchObject({
            "systemVersion": "8.0.0",
            "model": "msm8996ONEPLUS A3000",
            "systemName": "Android OS"
        });
    });

    // lib/img.js
    it('SRNNative.uploadImg()', async () => {
        const result = await SRNNative.uploadImg();
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/capturePic');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            maxPicCount: 1,
            needEdit: 0,
        });
        expect(result.length).toBe(2);
        expect(result[0]).toBe('https://picsum.photos/200');
        expect(result[1]).toBe('https://picsum.photos/300');

        await SRNNative.uploadImg({
            maxPicCount: 5,
            needEdit: true,
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            maxPicCount: 5,
            needEdit: 1,
        });

        await SRNNative.uploadImg(5);
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            maxPicCount: 5,
            needEdit: 0,
        });
    });

    it('SRNNative.cutImg()', async () => {
        const result = await SRNNative.cutImg('https://picsum.photos/200', 100, 50);
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/cutImage');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            width: 100,
            height: 50,
            imageUrl: 'https://picsum.photos/200',
        });
        expect(result).toBe('https://picsum.photos/100');

        await SRNNative.cutImg({
            imageUrl: 'https://picsum.photos/300',
            width: 50,
            height: 30,
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            width: 50,
            height: 30,
            imageUrl: 'https://picsum.photos/300',
        });
    });

    it('SRNNative.seeBigImg()', async () => {
        const urls = ['https://picsum.photos/200', 'https://picsum.photos/300']
        const result = await SRNNative.seeBigImg({
            pics: urls,
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/browserPic');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            enableDelete: 0,
            index: 0,
            together: 1,
            pics: urls,
        });
        expect(result.length).toBe(1);
        expect(result[0]).toBe('https://picsum.photos/300');

        await SRNNative.seeBigImg({
            enableDelete: true,
            index: 1,
            pics: urls,
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            enableDelete: 1,
            index: 1,
            together: 1,
            pics: urls,
        });
    });

    // lib/prompt.js
    it('SRNNative.toast()', async () => {
        await SRNNative.toast('保存');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/wirelessToast');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            text: '保存',
            icon: '',
            duration: 2000,
            qrcodeText: '',
        });

        await SRNNative.toast({
            text: '数据加载完成',
            icon: 'success',
            duration: 1500,
            qrcodeText: '',
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            text: '数据加载完成',
            icon: 'success',
            duration: 1500,
            qrcodeText: '',
        });

        await SRNNative.toast('收藏成功', 'collection', 1000);
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            text: '收藏成功',
            icon: 'collection',
            duration: 1000,
            qrcodeText: '',
        });

        await SRNNative.toast('消息已发送', 2500);
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            text: '消息已发送',
            icon: '',
            duration: 2500,
            qrcodeText: '',
        });
    });

    it('SRNNative.Loading.show()', async () => {
        await SRNNative.Loading.show('数据加载中');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://show/wirelessLoading');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            text: '数据加载中',
            icon: ''
        });

        await SRNNative.Loading.show({
            text: '正在检测',
            icon: 'waiting'
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            text: '正在检测',
            icon: 'waiting'
        });

        await SRNNative.Loading.show('正在检测', 'waiting');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            text: '正在检测',
            icon: 'waiting'
        });

        SRNNative.setDefaultLoadingIcon('cheniu');
        await SRNNative.Loading.show('数据加载中');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            text: '数据加载中',
            icon: 'cheniu'
        });
        SRNNative.setDefaultLoadingIcon('');
    });

    it('SRNNative.Loading.hide()', async () => {
        await SRNNative.Loading.hide();
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://hide/wirelessLoading');
    });

    it('SRNNative.alert()', async () => {
        await SRNNative.alert('提示', '已删除');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/wirelessAlert');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            title: '提示',
            text: '已删除',
            buttonArr: ['确定'],
        });

        /*
        // 此条暂时无法通过
        await SRNNative.alert({
            title: '网络错误',
            text: '请检查网络',
            button: '我知道了',
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            title: '网络错误',
            text: '请检查网络',
            buttonArr: ['我知道了'],
        });
        */

        await SRNNative.alert('网络错误', '请检查网络', '我知道了');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            title: '网络错误',
            text: '请检查网络',
            buttonArr: ['我知道了'],
        });
    });

    it('SRNNative.confirm()', async () => {
        await SRNNative.confirm('提示', '是否删除？');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/wirelessAlert');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            title: '提示',
            text: '是否删除？',
            buttonArr: ['取消', '确定'],
        });

        await SRNNative.confirm({
            title: '提示',
            text: '是否放弃新建客户？',
            leftButton: '放弃',
            rightButton: '不放弃',
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            title: '提示',
            text: '是否放弃新建客户？',
            buttonArr: ['放弃', '不放弃'],
        });

        await SRNNative.confirm('网络错误', '请检查网络', '放弃', '申请');
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].data).toMatchObject({
            title: '网络错误',
            text: '请检查网络',
            buttonArr: ['放弃', '申请'],
        });

        NativeModules.SCCRNModuleBridge._shouldConfirmCancel = true;
        await (SRNNative.confirm('提示', '是否删除？').then(() => {
            expect(false).toBe(true);
        }, () => {
            expect(true).toBe(true);
        }));
    });

    // lib/share.js
    it('SRNNative.share()', async () => {
        await SRNNative.share({
            title: '弹个车',
        });
        expect(NativeModules.SCCRNModuleBridge._savedArgumentsForTest[0].protocol).toBe('mock://open/shareHandler');

        NativeModules.SCCRNModuleBridge._shareResultPlatform = 2;
        try {
            await SRNNative.share({
                title: '弹个车',
            });
        } catch (error) {
            expect(error).toMatchObject({
                shareResult: 2,
            });
        }
    });

    // lib/other.js
    it('SRNNative.share()', async () => {
        await SRNNative.closeView({
            code: 1,
        });
        expect(NativeModules.SCCRNControlBridge._savedCallbackArgumentsForTest[0]).toMatchObject({
            code: 1,
        });
        expect(NativeModules.SCCRNControlBridge._savedCloseViewArgumentsForTest[0]).toMatchObject({});

        await SRNNative.closeView();
        expect(NativeModules.SCCRNControlBridge._savedCallbackArgumentsForTest[0]).toMatchObject({});
        expect(NativeModules.SCCRNControlBridge._savedCloseViewArgumentsForTest[0]).toMatchObject({});
    });
});

const EventEmitter = require('events').EventEmitter;

export const DeviceEventEmitter = new EventEmitter();

export const NativeModules = {
    SCCRNAppData: {
        // 测试用，正常运行时没有这个属性
        _shouldProtocolFailed: false,
        appScheme: 'mock',
        getAppData(callback) {
            if (this._shouldProtocolFailed) {
                callback(new Error('protocol error'));
            } else {
                callback(null, {
                    appScheme: 'mock',
                });
            }
        },
    },
    SCCRNModuleBridge: {
        // 测试用，正常运行时没有这个属性
        _shouldProtocolFailed: false,
        // 测试用，正常运行时没有这个属性
        _shouldConfirmCancel: false,
        // 测试用，正常运行时没有这个属性
        _shareResultPlatform: 1,
        // 测试用，正常运行时没有这个属性
        _shouldContactsFailed: false,
        ModuleBridge({ protocol, data }, callback) {
            NativeModules.SCCRNOpenVCBridge.OpenVCBridge.call(this, { protocol, data }, callback);
        },
    },
    SCCRNOpenVCBridge: {
        // 测试用，正常运行时没有这个属性
        _shouldProtocolFailed: false,
        OpenVCBridge({ protocol, data }, callback) {
            this._savedArgumentsForTest = [{ protocol, data }, callback];
            if (this._shouldProtocolFailed) {
                callback(new Error('protocol error'));
            } else if (protocol === 'mock://open.present/login') {
                DeviceEventEmitter.emit('RefreshLoginEvent');
                callback(null);
            } else if (protocol === 'mock://open/reactnative') {
                callback(null, {
                    code: 1,
                });
            } else if (protocol.indexOf('mock://open/webv?url=') === 0) {
                callback(null, {
                    code: 1,
                });
            } else if (protocol === 'mock://open/guideView') {
                callback(null, {
                    code: 1,
                });
            } else if (protocol === 'mock://open/datePicker') {
                callback(null, {
                    date: '2018/12/27',
                });
            } else if (protocol === 'mock://open/getContacts') {
                if (this._shouldContactsFailed) {
                    callback(null, {
                        error: '系统错误',
                    });
                } else {
                    callback(null, {
                        data: [{
                            "name": "John Appleseed",
                            "phones": "888-555-5512,888-555-1212",
                            "section": "J"
                        }],
                    });
                }
            } else if (protocol === 'mock://open/saveContacts') {
                if (this._shouldContactsFailed) {
                    callback(null, {
                        error: '系统错误',
                    });
                } else {
                    callback(null, {
                        data: data.data.map(contactData => Object.assign({}, contactData, {
                            saved: true
                        })),
                    });
                }
            } else if (protocol === 'mock://open/DataEmbedding') {
                callback(null);
            } else if (protocol === 'mock://trackPage/DataEmbedding') {
                callback(null);
            } else if (protocol === 'mock://open/SCCLog') {
                callback(null);
            } else if (protocol.indexOf('mock://getUser/userCenter') === 0) {
                callback(null);
            } else if (protocol === 'mock://open/getGPS') {
                callback(null, {
                    "geopoint": "5.3E-1631,3330.95",
                    "state": "浙江省",
                    "city": "杭州市"
                });
            } else if (protocol === 'mock://open/wirelessDeviceData') {
                callback(null, {
                    "systemVersion": "8.0.0",
                    "model": "msm8996ONEPLUS A3000",
                    "systemName": "Android OS"
                });
            } else if (protocol === 'mock://open/capturePic') {
                callback(null, {
                    urls: [
                        'https://picsum.photos/200',
                        'https://picsum.photos/300',
                    ],
                });
            } else if (protocol === 'mock://open/cutImage') {
                callback(null, {
                    result: 'success',
                    url: 'https://picsum.photos/100',
                });
            } else if (protocol === 'mock://open/browserPic') {
                callback(null, {
                    urls: [
                        'https://picsum.photos/300',
                    ],
                });
            } else if (protocol === 'mock://open/wirelessToast') {
                callback(null);
            } else if (protocol === 'mock://show/wirelessLoading') {
                callback(null);
            } else if (protocol === 'mock://hide/wirelessLoading') {
                callback(null);
            } else if (protocol === 'mock://open/wirelessAlert') {
                if (data.buttonArr.length === 1) {
                    callback(null);
                } else {
                    callback(null, {
                        action: this._shouldConfirmCancel ? 0 : 1,
                    });
                }
            } else if (protocol === 'mock://open/shareHandler') {
                callback(null, {
                    shareResult: this._shareResultPlatform,
                });
            }
        },
    },
    SCCRNPopAndPushVCBridge: {
        // 测试用，正常运行时没有这个属性
        _shouldProtocolFailed: false,
        popAndPushVCBridge({ protocol, data }, callback) {
            NativeModules.SCCRNOpenVCBridge.OpenVCBridge.call(this, { protocol, data }, callback);
        },
        popAllAndPushVCBridge({ protocol, data }, callback) {
            NativeModules.SCCRNOpenVCBridge.OpenVCBridge.call(this, { protocol, data }, callback);
        },
    },
    SCCRNControlBridge: {
        SCCRNTriggleCallBack(data, callback) {
            this._savedCallbackArgumentsForTest = [data, callback];
            callback(null);
        },
        SCCRNCloseView(data, callback) {
            this._savedCloseViewArgumentsForTest = [data, callback];
            callback(null);
        },
    },
};

import { loginScheme } from '../const';
import { SendModule } from '../const';
import {
    NativeModules,
    DeviceEventEmitter
} from 'react-native';
const scheme = NativeModules.SCCRNAppData.appScheme + '://';
import stacktraceParser from "stacktrace-parser";
/**
 * 通用类
 */
export default {
    relogin() {
        return new Promise((resolve, reject) => {
            DeviceEventEmitter.addListener('RefreshLoginEvent', (event) => {
                this.getAppData().then((data) => {
                    resolve(data);
                });
            });
            this.open(loginScheme);
        });
    },
    open(protocol, data = {}) {
        return new Promise((resolve, reject) => {
            NativeModules.SCCRNOpenVCBridge.OpenVCBridge({
                protocol,
                data
            }, (err, res) => {
                if(err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    },
    popAndOpen(protocol, data = {}){
        return new Promise((resolve, reject) => {
            NativeModules.SCCRNPopAndPushVCBridge.popAndPushVCBridge({
                protocol,
                data
            }, (err, res) => {
                if(err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    },
    popAllAndOpen(protocol, data = {}){
        return new Promise((resolve, reject) => {
            NativeModules.SCCRNPopAndPushVCBridge.popAllAndPushVCBridge({
                protocol,
                data
            }, (err, res) => {
                if(err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    },
    openWebview(url, data = {}) {
        return new Promise((resolve, reject) => {
            NativeModules.SCCRNOpenVCBridge.OpenVCBridge({
                protocol: scheme + 'open/webv?url=' + encodeURIComponent(url),
                data
            }, (err, res) => {
                if(err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    },
    // 新用户引导组件
    openGuideView (data = []) {
        return new Promise((resolve, reject) => {
            NativeModules.SCCRNModuleBridge.ModuleBridge({
                protocol: scheme + 'open/guideView',
                data: {
                    guideConigs: data,
                }
            }, function (err, res) {
                if (err) {
                    return reject(err);
                }

                return resolve(res);
            });
        });
    },
    openDatePicker(params = {}) {
        if(typeof params === 'object') {
            params = Object.assign({
                format: "yyyy/MM/dd",
                rightText: '确定',
                leftText: '',
                rightColor: '#FF5050',
                rightSize: '14'
            }, params);
        } else {
            console.err('openDatePicker: 参数异常', params);
        }
        return SendModule('open/datePicker', params).then(res => {
            return Promise.resolve(res.date);
        });
    },
    // 获取联系人信息
    getContacts() {
        return SendModule('open/getContacts').then(res => {
            if(res.error) {
                return Promise.reject(res.error);
            }
            return res.data;
        })
    },
    // 设置联系人信息
    saveContacts(data, flag) {
        if(typeof data !== 'object') {
            console.err('设置联系人数据异常');
            return;
        }
        return SendModule('open/saveContacts', {
            data,
            filter: flag ? 1 : 0
        }).then(res => {
            if(res.error) {
                return Promise.reject(res.error);
            }
            return res;
        });
    },
    // 埋点
    bury(typeId, vals = {}) {
        return SendModule('open/DataEmbedding', {
            typeId,
            vals
        });
    },
    // 页面埋点
    buryPage(pageID, pageAction, pageType = 3) {
        return SendModule('trackPage/DataEmbedding', {
            pageID,     // H5:url  RN：业务模块名称 + '_' + route_config中的路径名称
            pageType,   //Android:1  iOS:2  RN:3  H5:4
            pageAction      //进入页面:'begin'  离开页面:'end'
        });
    },
    //Native日志透传
    log(level, msg, tag = "", exception) {
        let time = Date.now();
        if (!tag) {
            // 获取直接调用该方法的调用栈信息
            let stackInfo = stacktraceParser.parse(new Error().stack)[1];
            delete stackInfo.file;
            tag = `stackInfo=${JSON.stringify(stackInfo)}`;
        }
        return SendModule("open/SCCLog", {
            level,
            msg,
            tag,
            exception,
            time
        });
    },
    // 获取渠道用户信息
    getChannelUserInfo(channel = "") {
        if (!channel) {
            setTimeout(()=>console.warn('渠道channel字段不能为空，请使用 SRNConfig 获取 default.config.js 中的渠道 channel'), 0);
            return;
        }
        return new Promise((resolve, reject) => {
            NativeModules.SCCRNOpenVCBridge.OpenVCBridge({
                protocol: `${NativeModules.SCCRNAppData.appScheme}://getUser/userCenter?channel=${channel}`,
                data: {}
            }, (err, res) => {
                if(err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    }
}

import {
    NativeModules,
    Platform
} from 'react-native';
import parseParam from './parseParam';
import SRNEventManager from './SRNEventManager';
import SRNNativeUtil from './SRNNativeUtil';
import SRNNative from "@souche-f2e/srn-native";

var APP_DATA = NativeModules.SCCRNAppData || {
      env: 0,
      userToken: ''
  };

var showToast = function(str = "", traceId = "") {
    if (global.SHOW_NETWORK_ERROR_TOAST !== false) {
        SRNNative.Loading.hide();
        setTimeout(() => {
            NativeModules.SCCRNModuleBridge.ModuleBridge({
                protocol: NativeModules.SCCRNAppData.appScheme + '://open/wirelessToast',
                data: {
                    text: str || '',
                    icon: traceId ? 'qrcode' : '',
                    duration: 2000,
                    qrcodeText: traceId
                }
            }, (err, res) => {
            });
        }, 200);
    }
};
const getDefaultHeader = function (token = '', appName = 'undefined') {
    return {
        'Authorization': 'Token token=' + token,
        'Token': token,
        'appname': appName,
        'appscheme': NativeModules.SCCRNAppData.appScheme,
        'TT': token,
        'Agent': (Platform.OS === 'ios') ? 11 : 10,
        '_security_token': token,
        '_security_token_inc': token,
        'Souche-Security-Token': token,
        'Souche-Inc-Security-Token': token,
        'souche-std-response': 1,
        'AppVersion': APP_DATA.appVersion,
        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_2 like Mac OS X) AppleWebKit/602.3.12 (KHTML, like Gecko) Mobile/undefined AppName/' + appName
    };
};
const isDev = (APP_DATA.env == 0);

const SRNFetch = function () {
    console.warn('srn-util 中的 SRNFetch 即将废弃，请使用 @souche-f2e/srn-framework 中的 数据请求方法')
    var options;
    if(arguments.length > 1) {
        options = arguments[1];
    } else {
        options = {};
    }

    if(!options.headers) {
        options.headers = {};
    }

    var timeout = options.timeout || 60000;
    var _args = arguments;
    var self = this;
    return new Promise((resolve, reject) => {
        var hasResolved = false;
        var hasRejected = false;
        if(NativeModules.SCCRNAppData && NativeModules.SCCRNAppData.getAppData) {
            SRNNativeUtil.getAppData(function (err, data) {
                // 附加token到header
                var token = data.userToken || 'empty_token';
                options.headers = Object.assign(options.headers, getDefaultHeader(token, data.appName));
                var method = options.method ? options.method.toUpperCase() : 'GET';
                if(method === 'POST') {
                    options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
                }
                if(options.json) {
                    options.headers['Content-Type'] = 'application/json';
                    options.body = JSON.stringify(options.json, undefined, 0)
                } else if(options.data) {
                    if(method === 'GET') {
                        _args[0] = _args[0] + (_args[0].indexOf('?') === -1 ? '?' : '&') + parseParam(options.data);
                    } else if(method === 'POST') {
                        if(typeof(options.data) == 'object') {
                            var formdata = new FormData();
                            for(var i in options.data) {
                                formdata.append(i, options.data[i]);
                            }
                            options.body = parseParam(options.data);
                        } else {
                            options.body = options.data;
                        }
                    }
                } else {
                    options.body = options.data;
                }

                _args[1] = options;
                var fetchStatus = 200;

                if(timeout) {
                    setTimeout(() => {
                        if(!hasResolved && !hasRejected) {
                            hasRejected = true;
                            var e = new Error('timeout');
                            e.code = 408;
                            showToast(`网络错误：请求超时，请稍后再试`)
                            reject(e);
                        }
                    }, timeout);
                }
                fetch(_args[0], options).then((res) => {
                    fetchStatus = res.status;
                    return res.json();
                }).then((data) => {
                    if(fetchStatus != 200) {
                        var e = new Error(data ? data.code : '');
                        e.code = data ? data.code : '';
                        throw e;
                    } else {
                        if(typeof(data.code) == 'undefined' && typeof(data.success) == 'undefined') {
                            // 兼容一些不标准的返回结构，直接抛出整个data
                            if(!hasResolved && !hasRejected) {
                                hasResolved = true;
                                resolve(data);
                            }

                        } else {
                            // 标准结构的处理
                            if(parseInt(data.code) === 10000 || data.success) {
                                if(!hasResolved && !hasRejected) {
                                    hasResolved = true;
                                    resolve(data.data);
                                }

                            } else {

                                // 后台返回错误的处理
                                var e = new Error(data.msg);
                                e.code = parseInt(data.code);
                                if((e.code === 10001 || e.code === 10004) && global.LOGIN_PROTOCOL) {
                                    hasRejected = true;
                                    SRNNativeUtil.reLogin(() => {
                                        SRNFetch.apply(this, _args).then((data) => {
                                            resolve(data);
                                        }).catch((e) => {
                                            reject(e);
                                        })
                                    })
                                } else {
                                    throw e;
                                }
                            }
                        }
                    }
                }).catch((e) => {
                    if(e instanceof SyntaxError) {
                        showToast(`网络错误：解析出错`)
                    } else {
                        showToast(`网络错误：${e.message}`)
                    }
                    if(!hasResolved && !hasRejected) {
                        hasRejected = true;
                        reject(e);
                    }
                });
            })

        } else {
            options.headers = Object.assign(getDefaultHeader(), options.headers)
            if(options.json) {
                options.headers['Content-Type'] = 'application/json';
                options.body = JSON.stringify(options.json, undefined, 0)
            } else if(options.data) {
                if(typeof(options.data) == 'object') {
                    var formdata = new FormData();
                    for(var i in options.data) {
                        formdata.append(i, options.data[i]);
                    }
                    options.body = formdata;
                } else {
                    options.body = options.data;
                }
            } else {
                options.body = options.data;
            }
            _args[1] = options;
            var fetchStatus = 200;
            fetch(_args[0], options).then((res) => {
                fetchStatus = res.status;
                return res.json();
            }).then((data) => {
                if(fetchStatus != 200) {
                    var e = new Error(data ? data.code : '');
                    e.code = data ? data.code : 0;
                    throw e;
                } else {
                    if(typeof(data.code) == 'undefined') {
                        resolve(data);
                    } else {
                        if(parseInt(data.code) === 10000 || data.success) {
                            resolve(data.data);
                        } else {
                            var e = new Error(data.msg);
                            e.code = parseInt(data.code);
                            e.traceId = data.traceId || '';
                            if((e.code === 10001 || e.code === 10004) && global.LOGIN_PROTOCOL) {
                                SRNNativeUtil.reLogin(() => {
                                    SRNFetch.apply(this, _args).then((data) => {
                                        resolve(data);
                                    }).catch((e) => {
                                        reject(e);
                                    })
                                })
                            } else {
                                throw e;
                            }
                        }
                    }
                }

            }).catch((e) => {
                if(e instanceof SyntaxError) {
                    showToast(`网络错误：解析出错`)
                } else {
                     showToast(e.message, e.traceId || "");
                }
                reject(e);
            });
        }
    })
};
/**
 * 封装过的fetch，填充统一的header，拦截统一的返回做处理。
 */
export default SRNFetch;

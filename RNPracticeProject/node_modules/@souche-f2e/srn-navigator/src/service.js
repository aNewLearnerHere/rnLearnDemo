import React from 'react';
import {
    EventEmitter
} from 'fbemitter';


/**
 * 处理 push 方法传入的参数，验证参数合法性，进行参数转化
 * @param {Array} args  转化成数组的参数
 */
export function handleDataForPush(args = []) {
    let component = args[0];
    let props = args[1];
    let key = args[2];

    if (typeof props === 'undefined') {
        props = {};
    } else if (typeof props === 'string') {
        key = props;
        props = {};
    }

    if (!Array.isArray(component)) {
        component = [component];
    }
    if (!Array.isArray(props)) {
        props = [props];
    }
    if (!Array.isArray(key)) {
        key = [key];
    }

    return [component, props, key, ...Array.prototype.slice.call(args, 3)];
}

/**
 * 根据传入的参数构建出导航栈需要的数据
 * @param {Array} args  转化成数组的参数
 */
export function buildNavState(args = [], lastRoute, routePath) {
    const component = args[0];
    const props = args[1];
    const key = args[2];
    let callback = args[3];

    return component.map((C, i) => {
        let _key = C.name + i + Date.now();
        let emitter = new EventEmitter();
        let _emitter = new EventEmitter();
        emitter.on = emitter.addListener;
        _emitter.on = _emitter.addListener;
        if(typeof(key[i]) == 'function' ) {
            callback = key[i];
        } else if (key[i] || key[i] === 0 || key[i] === '0') {
            _key = key[i];
        }
        let _props = props[i];
        _props = Object.assign({}, props[i], {
            _route_referrer: lastRoute?lastRoute.path:'',
            _route_path: routePath,
            _route_params: _props
        })
        let instance = <C {..._props}/>;

        return {
            key: _key,
            navigation:  C.navigation || {},
            emitter: emitter, // 暴露给外界使用
            _emitter: _emitter, // 内部使用
            Component: C,
            path: routePath,
            callback: callback || null,
            ComponentInstance: instance
        };
    });
}


/**
 * <plusmancn@gmail.com> created at 2017
 *
 * Copyright (c) 2017 Souche.com, all rights
 * reserved.
 *
 * TabBar 导航容器
 *
 * @flow
 */
import React from 'react';
import {
    StyleSheet,
    View,
    NativeModules
} from 'react-native';
import PropTypes from 'prop-types';

import Layout from './Layout.js';
import Tab from './Tab.js';
import TabBarItem from './TabBarItem.js';
import MainScreen from './MainScreen.js';
import colorcolor from './../colorcolor';
import SRNNative from "@souche-f2e/srn-native";


let moduleName = ""; //当前 bundle 的名字
let moduleProps = {}; // 当前 bundle 打开时候的参数
if (
    NativeModules.SCCRNLifeCycleBridge &&
    NativeModules.SCCRNLifeCycleBridge.getPageParams
) {
    NativeModules.SCCRNLifeCycleBridge.getPageParams({}, (err, event) => {
        if (event) {
            moduleName = event.module;
            moduleProps = event.props || {};
            if (eventStack && eventStack.length) {
                let data = eventStack.shift();
                if (data.action == "appear") {
                    NativeModules.SCCRNLifeCycleBridge.pageAppear &&
                        NativeModules.SCCRNLifeCycleBridge.pageAppear(
                            { router: data.router, module: moduleName },
                            (err, event) => {}
                        );
                } else {
                    NativeModules.SCCRNLifeCycleBridge.pageDisappear &&
                        NativeModules.SCCRNLifeCycleBridge.pageDisappear(
                            { router: data.router, module: moduleName },
                            (err, event) => {}
                        );
                }
            }
        }
    });
}
const eventStack = [];
/**
 * 触发 viewAppear 生命周期
 * @param route
 */
const emitTabViewAppear = route => {
    route && route.emitter && route.emitter.emit("view_appear");
    if (!moduleName) {
        return eventStack.push({ action: "appear", router: route.path });
    }
    if (
        NativeModules.SCCRNLifeCycleBridge &&
        NativeModules.SCCRNLifeCycleBridge.pageAppear
    ) {
        NativeModules.SCCRNLifeCycleBridge.pageAppear(
            { router: route.path, module: moduleName },
            (err, event) => {}
        );
    }
    SRNNative.log("v", `path=${route.path}&module=${moduleName}`, "[SRN-Navigator] pageEvent=view_appear");
};
/**
 * 触发 viewDisAppear 生命周期
 * @param route
 */
const emitTabViewDisAppear = route => {
    route && route.emitter && route.emitter.emit("view_disappear");
    if (!moduleName) {
        return eventStack.push({ action: "disappear", router: route.path });
    }
    if (
        NativeModules.SCCRNLifeCycleBridge &&
        NativeModules.SCCRNLifeCycleBridge.pageDisappear
    ) {
        NativeModules.SCCRNLifeCycleBridge.pageDisappear(
            { router: route.path, module: moduleName },
            (err, event) => {}
        );
    }
    SRNNative.log("v", `path=${route.path}&module=${moduleName}`, "[SRN-Navigator] pageEvent=view_disappear");
};

export default class TabBar extends React.Component {
    static propTypes = {
        activeIndex: PropTypes.number
    }

    static defaultProps = {
        activeIndex: 0
    }

    static Item = TabBarItem;
    // 内部变量
    state: Object;
    preActiveIndex: null;

    constructor (props: Object) {
        super(props);

        this.state = {
            activeIndex: this.props.activeIndex
        };

        this.renderedSceneKeys = [];

    }
    componentWillMount(){
        if(NativeModules.SCCRNStyleBridge && NativeModules.SCCRNStyleBridge.SetVCBottomColor) {
            var bottomColor;
            if(this.props&&this.props.style && this.props.style.backgroundColor) {
                bottomColor = this.props.style.backgroundColor;
            } else {
                bottomColor = '#F7F7F7';
            }
            NativeModules.SCCRNStyleBridge.SetVCBottomColor({ backColor: colorcolor( bottomColor, "hex" ) });
        }
    }
    componentWillUnmount(){
        let { children } = this.props;
        let tabBarRoute = { path: children[this.preActiveIndex] && `/${children[this.preActiveIndex].props.component.navigation.title.text}_${this.preActiveIndex}` };
        let tabBarRootRoute = { path: `${children[this.preActiveIndex].props.component.name}`}
        emitTabViewDisAppear({ ...tabBarRootRoute, module: moduleName });
        emitTabViewDisAppear({ ...tabBarRoute, module: moduleName });
    }
    render () {
        let { children } = this.props;
        //disappear
        if (this.state.activeIndex !== this.preActiveIndex) {
            try {
                let path = children[this.preActiveIndex] && `/${children[this.preActiveIndex].props.component.navigation.title.text}_${this.preActiveIndex}`;
                path && emitTabViewDisAppear({ path: path, module: moduleName });
            } catch (error) {
                console.warn("[srn-navigator]页面生命周期透传：请检查需要跳转TabBar的对应View存在标题文字(title.text)");
            }
        }
        // 渲染主视图
        let scenes = [];
        React.Children.forEach(children, (item, index) => {
            let sceneKey = `mainScreenKey-${index}`;

            // 检测是否需要渲染视图，懒加载代码
            if(!(this.state.activeIndex === index) && !~this.renderedSceneKeys.indexOf(sceneKey)) {
                return;
            }

            // 加入缓存列表
            if(!~this.renderedSceneKeys.indexOf(sceneKey)) {
                this.renderedSceneKeys.push(sceneKey);
            }

            let scene = (
              <MainScreen
                selected={this.state.activeIndex === index}
                key={sceneKey}
              >
                  {item}
              </MainScreen>
            );

            scenes.push(scene);

            //appear
            if (this.state.activeIndex === index) {
                try {
                     let tabBarRoute = { path: `/${item.props.component.navigation.title.text}_${index}` };
                     this.preActiveIndex = index;
                     emitTabViewAppear({
                         ...tabBarRoute,
                         module: moduleName
                     });
                } catch (error) {
                     console.warn("[srn-navigator]页面生命周期透传：请检查需要跳转TabBar的对应View存在标题文字(title.text)");
                }
            }

        });
        return (
          <View
            style={[
                styles.container
            ]}
          >
              {scenes}
              <View style={[styles.bottomBar, this.props.style ? this.props.style : {}]}>
                  {React.Children.map(children, this._renderTab)}
              </View>
          </View>
        );
    }


    _renderTab = (children: Object, index: number) => {
        let { onPress } = children.props;
        return (
          <Tab
            {...children.props}
            key={`tabKey-${index}`}
            selected={this.state.activeIndex === index}
            onPress={ (event) => {
                // 记录上一个index作为离开时的index记录
                this.preActiveIndex = this.state.activeIndex;
                this.setState({
                    activeIndex: index
                });

                onPress ? onPress(event) : null;
            }}
          />
        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    bottomBar: {
        height: Layout.tabBarHeight,
        backgroundColor: '#F7F7F7',
        borderTopWidth: StyleSheet.hairlineWidth,
        borderTopColor: '#DCDCDC',
        flexDirection: 'row',
        justifyContent: 'space-around',
        position: 'absolute',
        bottom: 0,
        left: 0,
        right: 0,
        shadowColor: '#000000',
        shadowOffset: { height: -1 },
        shadowOpacity: 0.08,
        shadowRadius: 4,
        elevation: 20,
    }
});

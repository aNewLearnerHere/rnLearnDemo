import React from 'react';
import colorcolor from './colorcolor';
import {
    StyleSheet,
    View,
    Image,
    Text,
    Platform,
    TouchableOpacity,
    Animated,
    NativeModules
} from 'react-native';

import Color from './Color';
import FontSize from './FontSize';

import LeftArrow from './LeftArrow';
import {
    assignItems
} from './navUtil';

const APPBAR_HEIGHT = 44;
const STATUSBAR_HEIGHT = Platform.OS === 'ios' ? 20 : 0;

/**
 * 将子容器包裹在一个居中的容器里面
 */
function CenterView (props) {
    return (
      <View style={styles.center}>
          {props.children}
      </View>
    );
}

/**
 * 根据配置渲染出一个可点击的渲染单元
 * 用于渲染左中右三部分各个单元
 */
function TouchableItemView ({
  item = {},  // 单元配置项，即可为数组，也可以是对象
  wrapperStyle = {},  // 外层包裹容器的样式
  itemTextStyle = {}, // 赋给 Text 组件的样式
  itemImgStyle = {},  // 赋给 Image 组件的样式
  sceneProps = {}, // 当前导航场景的所有属性及配置
  type = '', // 类型，如果是标题的话则基于标题特有的样式
  onNavigateBack, // 导航栈回退方法
  children // 子组件
}) {
    return (
      <TouchableOpacity style={[styles.itemWrapper, wrapperStyle]} activeOpacity={1}
                        onPress={() => item.onPress && item.onPress(sceneProps.scene.route.emitter, sceneProps)}
                        onPressIn={() => item.onPressIn && item.onPressIn(sceneProps.scene.route.emitter, sceneProps)}
                        onPressOut={() => item.onPressOut && item.onPressOut(sceneProps.scene.route.emitter, sceneProps)}
                        onLongPress={() => item.onLongPress && item.onLongPress(sceneProps.scene.route.emitter, sceneProps)}
      >
          {item.component ? (
            <item.component index={sceneProps.scene.index} onNavigateBack={onNavigateBack} sceneProps={sceneProps}
                            emitter={sceneProps.scene.route.emitter}/>
          ) :
            item.img ? (
              <CenterView>
                  <Image resizeMode="contain"
                         style={[styles.itemImage, itemImgStyle, item.imgStyle]}
                         source={{ uri: item.img }}/>
              </CenterView>
            ) :
              (item.text || item.text === '' || item.text === 0) ? (
                <Text style={[
                    styles.itemText,
                    Platform.OS === 'android' && styles.defaultFontFamily,
                    type === 'title' ? styles.titleItemText : { color: Color.PrimarySecond },
                    itemTextStyle,
                    item.textStyle]}>
                    {item.text}
                </Text>
              ) :
                children}
      </TouchableOpacity>
    );
}

/**
 * 渲染导航标题
 */
function NavigationHeaderTitle ({
  viewStyle = {},
  titleTextStyle = {},
  titleImgStyle = {},
  sceneProps = {},
  title = []
}) {
    return (
      <View pointerEvents="box-none" style={[viewStyle, styles.items]}>
          {title.map((v, i) => {
              return (
                <TouchableItemView key={i} type="title"
                                   item={v}
                                   sceneProps={sceneProps}
                                   itemTextStyle={titleTextStyle}
                                   itemImgStyle={titleImgStyle}/>
              );
          })}
      </View>
    );
}

/**
 * 渲染导航左边部分内容
 */
function NavigationHeaderLeft ({
  viewStyle = {},
  leftTextStyle = {},
  leftImgStyle = {},
  leftArrowStyle = {},
  sceneProps = {},
  left = [],
  onNavigateBack
}) {
    const reallyItems = left.length > 0 ? left : [{}];

    return (
      <View pointerEvents="box-none" style={[viewStyle, styles.items]}>
          {reallyItems.map((v, i) => {
              return (
                <TouchableItemView key={i} type="left"
                                   item={v}
                                   onNavigateBack={onNavigateBack}
                                   sceneProps={sceneProps}
                                   itemTextStyle={leftTextStyle}
                                   itemImgStyle={leftImgStyle}
                                   wrapperStyle={i === 0 && styles.itemFirstPadding}>
                    {i === 0 && (sceneProps.scene.index !== 0 || v.showArrow === true) ?
                      <LeftArrow leftArrowStyle={leftArrowStyle}
                                 onPress={() => v.onPress ? v.onPress(sceneProps.scene.route.emitter, sceneProps) : onNavigateBack()}/> : null
                    }
                </TouchableItemView>
              );
          })}
      </View>
    );
}

/**
 * 渲染导航右边部分内容
 */
function NavigationHeaderRight ({
  viewStyle = {},
  rightTextStyle = {},
  rightImgStyle = {},
  sceneProps = {},
  right = []
}) {
    return (
      <View pointerEvents="box-none" style={[viewStyle, styles.items]}>
          {right.map((v, i) => {
              return (
                <TouchableItemView key={i} type="right"
                                   item={v}
                                   sceneProps={sceneProps}
                                   itemTextStyle={rightTextStyle}
                                   itemImgStyle={rightImgStyle}
                                   wrapperStyle={i === right.length - 1 && styles.itemEndPadding}/>
              );
          })}
      </View>
    );
}

/**
 * 渲染导航条
 */
class NavigationHeader extends React.Component {

    state = {
        statefulProps: null
    };

    componentWillMount () {
        this.setState({
            statefulProps: this.props,
            top: new Animated.Value(this.props.headerDisplayHidden ? 0 : APPBAR_HEIGHT + STATUSBAR_HEIGHT),
            opacity: new Animated.Value(1)
        });

        // 监听事件，当前页面可以通过 setNavigation 重新配置导航条
        this.props.emitter.on('nav-helper-scene-set-navigation', (data) => {
            if(typeof data === 'object') {
                if(data.left) {
                    data.left = assignItems(this.state.statefulProps.left, data.left);
                }
                if(data.title) {
                    data.title = assignItems(this.state.statefulProps.title, data.title);
                }
                if(data.right) {
                    data.right = assignItems(this.state.statefulProps.right, data.right);
                }
                this.setState({ statefulProps: Object.assign({}, this.state.statefulProps, data) });
                if(NativeModules.SCCRNStyleBridge && NativeModules.SCCRNStyleBridge.SetVCStatusBarColor) {
                    var statusBarColor;
                    if(data && data.headerStyle && data.headerStyle.backgroundColor) {
                        statusBarColor = data.headerStyle.backgroundColor;
                    } else {
                        statusBarColor = Color.navBackgroundColor;
                    }
                    NativeModules.SCCRNStyleBridge.SetVCStatusBarColor({ backColor: colorcolor(statusBarColor, "hex") });
                }
            }
        });

        this.props.emitter.on('nav-helper-hide-header', (showStatus) => {
            Animated.spring(                          // 可选的基本动画类型: spring, decay, timing
              this.state.top,                 // 将`bounceValue`值动画化
              {
                  toValue: showStatus ? STATUSBAR_HEIGHT : 0,                         // 将其值以动画的形式改到一个较小值
                  decay: {
                      velocity: 20
                  },                          // Bouncier spring
              }
            ).start();
            Animated.spring(                          // 可选的基本动画类型: spring, decay, timing
              this.state.opacity,                 // 将`bounceValue`值动画化
              {
                  toValue: 0,                         // 将其值以动画的形式改到一个较小值
                  decay: {
                      velocity: 20
                  },                          // Bouncier spring
              }
            ).start();
        })
        this.props.emitter.on('nav-helper-show-header', () => {
            Animated.spring(                          // 可选的基本动画类型: spring, decay, timing
              this.state.top,                 // 将`bounceValue`值动画化
              {
                  toValue: APPBAR_HEIGHT + STATUSBAR_HEIGHT,                         // 将其值以动画的形式改到一个较小值
                  decay: {
                      velocity: 20
                  },                          // Bouncier spring
              }
            ).start();
            Animated.spring(                          // 可选的基本动画类型: spring, decay, timing
              this.state.opacity,                 // 将`bounceValue`值动画化
              {
                  toValue: 1,                         // 将其值以动画的形式改到一个较小值
                  decay: {
                      velocity: 20
                  },                          // Bouncier spring
              }
            ).start();
        })
        if(NativeModules.SCCRNStyleBridge && NativeModules.SCCRNStyleBridge.SetVCStatusBarColor) {
            var statusBarColor;
            if(this.props && this.props.headerStyle && this.props.headerStyle.backgroundColor) {
                statusBarColor = this.props.headerStyle.backgroundColor;
            } else {
                statusBarColor = Color.navBackgroundColor;
            }
            NativeModules.SCCRNStyleBridge.SetVCStatusBarColor({ backColor: colorcolor(statusBarColor, "hex") });
        }

    }

    render () {
        return (
          <Animated.View style={[styles.appbar, this.state.statefulProps.headerStyle, {
              height: this.state.top,
              opacity: this.state.opacity
          }]}>
              <NavigationHeaderTitle viewStyle={styles.title} {...this.state.statefulProps}/>
              <NavigationHeaderLeft viewStyle={styles.left} {...this.state.statefulProps}/>
              <NavigationHeaderRight viewStyle={styles.right} {...this.state.statefulProps}/>
          </Animated.View>
        );
    }
}

NavigationHeader.propTypes = {
    headerStyle: View.propTypes.style,
    rightTextStyle: Text.propTypes.style,
    rightImgStyle: Image.propTypes.style,
    leftTextStyle: Text.propTypes.style,
    leftImgStyle: Image.propTypes.style,
    leftArrowStyle: Image.propTypes.style,
    titleTextStyle: Text.propTypes.style,
    titleImgStyle: Image.propTypes.style,
};


const styles = StyleSheet.create({
    appbar: {
        alignItems: 'center',
        backgroundColor: Color.navBackgroundColor,
        borderBottomColor: Color.navBorderColor,
        borderBottomWidth: StyleSheet.hairlineWidth,
        height: APPBAR_HEIGHT + STATUSBAR_HEIGHT,
        flexDirection: 'row',
        justifyContent: 'flex-start',
        position: 'relative',
        zIndex: 10,
        overflow: 'visible'
    },
    title: {
        marginTop: STATUSBAR_HEIGHT,
        bottom: 0,
        left: 0,
        position: 'absolute',
        right: 0,
        top: 0,
    },
    left: {
        marginTop: STATUSBAR_HEIGHT,
        bottom: 0,
        left: 0,
        position: 'absolute',
        top: 0,
    },
    right: {
        marginTop: STATUSBAR_HEIGHT,
        bottom: 0,
        position: 'absolute',
        right: 0,
        top: 0,
    },
    items: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center'
    },
    itemWrapper: {
        flexDirection: 'row',
        paddingRight: 8,
        paddingLeft: 8,
        position: 'relative'
    },
    itemFirstPadding: {
        paddingLeft: 16
    },
    itemEndPadding: {
        paddingRight: 16
    },
    center: {
        justifyContent: 'center',
        alignItems: 'center',
    },
    titleItemText: {
        fontSize: FontSize.D3,
        color: Color.navTitleColor,
        position: 'relative',
        fontWeight: 'bold'
    },
    itemImage: {
        width: 20,
        height: 20
    },
    itemText: {
        fontSize: FontSize.H1,
        flexGrow: 1,
        alignSelf: 'center',
        color: Color.navTintColor
    },
    defaultFontFamily: {
        fontFamily: 'sans'
    },
});

export {
    NavigationHeaderTitle,
    NavigationHeaderLeft,
    NavigationHeaderRight,
    NavigationHeader
};

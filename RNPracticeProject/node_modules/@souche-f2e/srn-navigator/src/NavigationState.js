import NavigationStateUtils from './NavigationExperimental/NavigationStateUtils';
import { NativeModules } from 'react-native';
import TabBar from './TabBar/TabBar';
import SRNNative from '@souche-f2e/srn-native';
import stacktraceParser from "stacktrace-parser";

let moduleName = ''; //当前 bundle 的名字
let moduleProps = {}; // 当前 bundle 打开时候的参数
if(NativeModules.SCCRNLifeCycleBridge && NativeModules.SCCRNLifeCycleBridge.getPageParams) {
    NativeModules.SCCRNLifeCycleBridge.getPageParams(
      {},
      (err, event) => {
          if(event) {
              moduleName = event.module;
              moduleProps = event.props || '';
              if(eventStack && eventStack.length) {
                  let data = eventStack.shift();
                  if(data.action == 'appear') {
                      NativeModules.SCCRNLifeCycleBridge.pageAppear && NativeModules.SCCRNLifeCycleBridge.pageAppear(
                        { router: data.router, module: moduleName },
                        (err, event) => {
                        }
                      );
                  } else {
                      NativeModules.SCCRNLifeCycleBridge.pageDisappear && NativeModules.SCCRNLifeCycleBridge.pageDisappear(
                        { router: data.router, module: moduleName },
                        (err, event) => {
                        }
                      );
                  }
              }
          }
      }
    );
}
const eventStack = [];

/**
 * 触发 viewAppear 生命周期
 * @param route
 */
const emitViewAppear = (route, stack) => {
    route && route.emitter && route.emitter.emit('view_appear');
    if(!moduleName) {
        return eventStack.push({ action: 'appear', router: route.path })
    }
    if(NativeModules.SCCRNLifeCycleBridge && NativeModules.SCCRNLifeCycleBridge.pageAppear) {
        NativeModules.SCCRNLifeCycleBridge.pageAppear(
          { router: route.path, module: moduleName },
          (err, event) => {
          }
        );
    }
    SRNNative.log('v',`path=${route.path}&module=${moduleName}`,`[SRN-Navigator] pageEvent=view_appear&stack=${stack}`);
};
/**
 * 触发 viewDisAppear 生命周期
 * @param route
 */
const emitViewDisAppear = (route, stack) => {
    route && route.emitter && route.emitter.emit('view_disappear');
    if(!moduleName) {
        return eventStack.push({ action: 'disappear', router: route.path })
    }
    if(NativeModules.SCCRNLifeCycleBridge && NativeModules.SCCRNLifeCycleBridge.pageDisappear) {
        NativeModules.SCCRNLifeCycleBridge.pageDisappear(
          { router: route.path, module: moduleName },
          (err, event) => {
          }
        );
    }
    SRNNative.log('v',`path=${route.path}&module=${moduleName}`,`[SRN-Navigator] pageEvent=view_disappear&stack=${stack}`);
};

class NavigationState {

    constructor () {
        this.state = null;
        this.initState();
    }

    initState () {
        if(this.state) {
            this.state.index = 0;
            this.state.routes = [];
        } else {
            this.state = {
                index: 0,
                routes: []
            };
        }
    }

    getState () {
        return this.state;
    }

    getRoute (index) {
        return this.state.routes[index];
    }

    getIndex () {
        return this.state.index;
    }

    indexOf (key) {
        return NavigationStateUtils.indexOf(this.state, key);
    }

    push (route) {
        var lastRoute = this.state.routes.length > 0 ? (this.state.routes[this.state.routes.length - 1]) : null;
        if(lastRoute) {
            emitViewDisAppear(lastRoute, this.stack);
        }
        // 利用routes的长度不能判断是否进入了TabBar（待完善）
        // if (this.state.routes.length) {
            emitViewAppear(route, this.stack);
        // }
        this.state = NavigationStateUtils.push(this.state, route);
        return this.state;
    }

    pop () {
        var lastRoute = this.state.routes.length > 0 ? (this.state.routes[this.state.routes.length - 1]) : null;
        var lastTwoRoute = this.state.routes.length > 1 ? (this.state.routes[this.state.routes.length - 2]) : null;
        if(lastRoute) {
            emitViewDisAppear(lastRoute, this.stack);
        }
        if(lastTwoRoute) {
            emitViewAppear(lastTwoRoute, this.stack);
        }
        this.state = NavigationStateUtils.pop(this.state);
        return lastRoute;
    }

    back () {
        var nowRoute = this.state.routes[this.state.index];
        var lastRoute = this.state.index > 0 ? this.state.routes[this.state.index - 1] : null;
        if(nowRoute) {
            emitViewDisAppear(nowRoute);
        }
        if(lastRoute) {
            emitViewAppear(lastRoute)
        }
        this.state = NavigationStateUtils.back(this.state);
        return this.state;
    }

    reset (route) {
        var lastRoute = this.state.routes[this.state.routes.length - 1];
        this.state = NavigationStateUtils.reset(this.state, [lastRoute]);
        return this.state;
    }

    forward () {
        var nowRoute = this.state.routes[this.state.index];
        var nextRoute = this.state.routes[this.state.index + 1];
        if(nowRoute) {
            emitViewDisAppear(nowRoute)
        }
        if(nextRoute) {
            emitViewAppear(nextRoute);
        }
        this.state = NavigationStateUtils.forward(this.state);
        return this.state;
    }

    jumpToIndex (index) {
        this.state = NavigationStateUtils.jumpToIndex(this.state, index);
        return this.state;
    }
}

export default NavigationState;
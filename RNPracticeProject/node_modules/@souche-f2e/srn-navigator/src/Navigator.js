import {
    NativeModules
} from 'react-native';
import {
    EventEmitter
} from 'fbemitter';

import NavigationState from './NavigationState';

import {
    handleDataForPush,
    buildNavState
} from './service';

class Navigator {

    static routeConfig = {};
    backAndroidBind = true;

    constructor (NavigationViewBuilder, options = {}) {
        /**
         * 初始化事件实例，此实例用于视图与导航器的通信
         */
        this.emitter = new EventEmitter();
        this.emitter.on = this.emitter.addListener;

        /**
         * 实例化导航栈，用于存储栈数据，并提供操作栈的方法
         */
        this.navState = new NavigationState();

        /**
         * 构建导航视图
         * 传入事件引用使得导航器与视图彼此通信
         * 传入导航栈实例使得在导航视图内能访问到导航栈的数据
         */
        this.view = this.View = NavigationViewBuilder(this.emitter, this.navState, options);

        /**
         * 清空所有的监听器，防止某些时候新容器仍然保存之前的监听器
         */
        this.emitter.removeAllListeners();

        /**
         * 监听导航栈的返回事件
         */
        this.emitter.on('navigateBack', () => this.pop());
    }

    /**
     * push 基本用法
     * push(Component)
     *
     * 为组件传属性
     * push(Component, {page: 1})
     *
     * 为组件打 tag（便于以后跳转回当前页面）
     * push(Component, 'cheniu-weizhang-history')
     *
     * 同时为组件传属性打 tag
     * push(Component, {page: 1}, 'cheniu-weizhang-history')
     *
     * 以数组形式传入组件，数组最后一位为可见视口组件
     * push([Component1, Component2])
     * push([Component1, Component2], [{page1: 1}, {page2: 2}])
     * push([Component1, Component2], ['cheniu-weizhang-history', 'cheniu-weizhang-record'])
     * push([Component1, Component2], [{page1: 1}, {page2: 2}], ['cheniu-weizhang-history', 'cheniu-weizhang-record'])
     */
    push (Comp, obj, key) {
        var routePath = '';
        if(typeof Comp === 'string') {
            let route = Comp;
            routePath = route;
            Comp = Navigator.routeConfig[route];
            if(Comp === undefined) {
                return console.error('在当前路由中没有检测到可用视图组件，请确认所传路由是否正确，您传入的路由为：' + route, '系统已配置的路由列表如下' + JSON.stringify(Navigator.routeConfig));
            }
        } else {
            routePath = Comp.prototype.constructor.name;
        }

        const args = [...arguments];
        const nowRoutes = this.navState.state.routes;
        const lastRoute = nowRoutes.length ? nowRoutes[nowRoutes.length - 1] : null;
        /**
         * 处理 push 进来的数据，经过 handleDataForPush 处理过的数据，返回值中的 component, obj, key 都被转化为数组
         */
        const handledArgs = handleDataForPush(args);

        /**
         * 构建出导航栈需要的数据
         */
        const navState = buildNavState(handledArgs, lastRoute, routePath);

        /**
         * 将数据推入导航栈
         */
        navState.forEach(v => this.navState.push(v));

        /**
         * 触发事件，激活视图更新
         */
        this.emitter.emit('navigation', {
            action: 'push'
        });
    }

    /**
     * pop 基本用法
     * 弹出当前视图至上一个视图
     * pop() 或者 pop(1)
     *
     * 弹出两层视图
     * pop(2)
     * 以此类推 pop(3), pop(4) ......
     *
     * 回调数据
     * pop({})
     *
     * 弹出打过 tag 的页面之后的所有视图
     * pop('cheniu-weizhang-record', {})
     *
     * 弹回N层并返回数据
     * pop(2, {})
     */
    pop (i, callbackData) {
        if(typeof(i) === 'object') {
            callbackData = i;
            i = 1;
        } else {

        }

        if(i <= 0) {
            return;
        }
        if(typeof i === 'undefined') { //不填默认退出一层
            i = 1;
        } else if(typeof i === 'string') { // key
            const index = this.navState.indexOf(i);
            if(index !== -1) {
                i = this.navState.getIndex() - index + 1;
            } else {
                callbackData = i;
                console.warn('没有找到 key 为 ' + i + ' 的路由，请确认所传的 key 值是否正确，当前路由列表：' + JSON.stringify(this.navState.getState()));
            }
        } else if(typeof i === 'number') {

        } else {
            return console.error('调用 nav.pop 方法传入的参数类型不能为' + typeof i);
        }

        /**
         * 已经到顶层了，App内执行 pop 方法直接关掉 RN 容器
         */
        if(this.navState.getIndex() === 0) {
            callbackData = callbackData || {};
            const SCCRNControlBridge = NativeModules.SCCRNControlBridge;
            if(SCCRNControlBridge && typeof SCCRNControlBridge.SCCRNCloseView === 'function') {
                SCCRNControlBridge.SCCRNCloseView(callbackData, (error, events) => {});
                SCCRNControlBridge.SCCRNTriggleCallBack(callbackData, (error, events) => {});
            }
        }

        /**
         * 根据 i 的值弹出相应层级的导航栈
         */
        while(i--) {
            var popedRoute = this.navState.pop();
            if(popedRoute && popedRoute.callback) {
                popedRoute.callback(callbackData)
            }
        }

        /**
         * 触发事件，激活视图更新
         */
        this.emitter.emit('navigation', {
            action: 'pop'
        });
    }

    /**
     * 快退（不会修改视图栈，只会激活指定栈上的视图）
     * 快退一栈
     * back() 或者 back(1)
     * 以此类推
     * back(2), back(3), back(4)......
     */
    back (i) {
        if(i <= 0) {
            return;
        }
        if(typeof i === 'undefined') {
            i = 1;
        }
        if(typeof i !== 'number') {
            console.error('调用 nav.back 方法传入的参数类型不能为' + typeof i);
        }

        while(i--) {
            this.navState.back();
        }

        this.emitter.emit('navigation', {
            action: 'back'
        });
    }

    /**
     * 快进（不会修改视图栈，只会激活指定栈上的视图）
     * 快进一栈
     * forward() 或者 forward(1)
     * 以此类推
     * forward(2), forward(3), forward(4)......
     */
    forward (i) {
        if(i <= 0) {
            return;
        }
        if(typeof i === 'undefined') {
            i = 1;
        }
        if(typeof i !== 'number') {
            console.error('调用 nav.forward 方法传入的参数类型不能为' + typeof i);
        }

        while(i--) {
            this.navState.forward();
        }

        this.emitter.emit('navigation', {
            action: 'forward'
        });
    }

    /**
     * 跳转（不会修改视图栈，只会激活指定栈上的视图）
     * 跳转到指定 tag 的视图
     * jumpTo('cheniu-weizhang-record')
     */
    jumpTo (key) {
        const index = this.navState.indexOf(key);

        if(index === -1) {
            return console.warn('没有找到 key 为 ' + key + ' 的路由，请确认所传的 key 值是否正确，当前路由列表：' + JSON.stringify(this.navState.getState()));
        }

        this.navState.jumpToIndex(index);

        this.emitter.emit('navigation', {
            action: 'jumpTo'
        });
    }

    /**
     * 清空所有栈，包括当前视图
     */
    clear () {
        this.navState.initState();
    }

    /**
     * 将当前栈之前所有的栈清空
     */
    reset () {
        this.navState.reset();
    }

    /**
     * 加载route配置
     * @param config
     */
    load (config) {
        for(let key in config) {
            if(Navigator.routeConfig[key]) {
                console.error('您的路由配置与当前内存中已有的路由配置冲突，检测到重名的配置属性' + key);
                return;
            }
        }
        Object.assign(Navigator.routeConfig, config);

    }
}

export default Navigator;
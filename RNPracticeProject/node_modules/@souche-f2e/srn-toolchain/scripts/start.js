/**
 * 本地开发命令
 *     1. 内部包依赖重复检查 
 *     2. 执行 react-native start
 *     3. 监测文件变化，动态的改变路由配置文件 和 native 路由映射文件
 */
'use strict';

const execSync = require('child_process').execSync;
const path = require('path');
const spawn = require('child_process').spawn;

const chalk = require('chalk');
const watchman = require('watchman.js');

const updateRouter = require('../lib/update_router').updateRouter;
const updateNativeRouter = require('../lib/update_router').updateNativeRouter;
const getSrcFolders = require('../lib/update_router').getSrcFolders;
const generateModuleInfo = require('../lib/generate_module_info.js');
const checkPackage = require('../lib/checkPackage.js');
const srnUI = require('../lib/srn_ui');

const extraArgs = process.argv.slice(2);

/**
 * 内部依赖包重复检查
 */
checkPackage.checkRepeat();

/**
 * 生成一下 module_info.json
 */
generateModuleInfo.generateModuleInfoForStart();

/**
 * srn-ui：应用自定义主题
 */
srnUI.run();

/**
 * 运行 bundle 服务器前先更新一下路由
 *
 * PS: windows 下手动更新路由
 */
if (process.platform !== 'win32') {
    updateRouter();
}

if (process.platform !== 'win32') {
    updateNativeRouter();
}

function crossSpawn (cmd, args, options) {
    if (process.platform === 'win32') {
        return spawn('cmd', [ '/s', '/c', cmd ].concat(args), options);
    } else {
        return spawn(cmd, args, options);
    }
}

/**
 * jsbundle 打包服务器
 */
const bundleServer = crossSpawn('react-native', [ 'start' ].concat(extraArgs), {
    stdio: 'inherit',
});

bundleServer.on('close', function (code) {
    if (code !== 0) {
        process.stdout.write(`Bundle server process exited with code ${code}`);
    }
});

/**
 * 文件监控，动态生成路由
 */
const watchedFolder = getSrcFolders().map(f => path.resolve(process.cwd(), `./${f}/`));

// windows 下的 git-bash 路径与 cmd.exe 路径不相同，不做兼容处理，windows 自己手动去写路由
if (process.platform !== 'win32') {
    watchedFolder.forEach(folder => {
        watchman.watch(folder, "true", {
            add: updateRouter,
            addDir: updateRouter,
            unlink: updateRouter,
            unlinkDir: updateRouter
        });
    });
}



if (process.platform !== 'win32') {
    watchman.watch(path.resolve(process.cwd(), "./src/native_route_config.json"), "true", {
        add: updateNativeRouter,
        change: updateNativeRouter
    });
}

/**
 * 生成 bundle 服务器二维码
 */
const qrObject = require('../lib/start/get_qr_content.js');

// 可以通过 shell 参数获取 bundleName，npm script 中使用的形式 node xx.js -- bundleName=xxx
const bundleNameArg = process.argv.filter(v => v.indexOf('bundleName=') !== -1);
if (bundleNameArg.length === 1) {
    qrObject.bundleName = bundleNameArg[0].split('=')[1];
}

setTimeout(function () {
    try {
        const qrContent = JSON.stringify(qrObject);
        if (process.platform === 'win32') {
            console.log(`Info: 请在浏览器中手动打开二维码网址：https://cli.im/api/qrcode/code?text=${qrContent}`);
        } else {
            execSync(`open 'https://cli.im/api/qrcode/code?text=${qrContent}'`);
        }
    } catch (e) {
        console.log(chalk.red('Error: 生成二维码失败'));
    }
}, 3000);

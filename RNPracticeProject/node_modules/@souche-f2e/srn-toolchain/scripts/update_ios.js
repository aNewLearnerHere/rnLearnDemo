'use strict';

const execSync = require('child_process').execSync;
const fs = require('fs');
const path = require('path');

const chalk = require('chalk');
const shell = require('shelljs');

const globalData = require('../lib/global_data');

const IOS_REPO = 'git@git.souche-inc.com:srn-core/SCCRNNativeExample.git';

// 如果下载过 template，那么删除掉之前下载过的
shell.rm('-rf', globalData.RN_TEMPLATE_FOLDER);

try {
    // eslint-disable-next-line
    execSync(`git clone ${IOS_REPO} "${globalData.RN_TEMPLATE_FOLDER}" --depth=1`, { stdio: 'ignore' });
} catch (e) {
    console.log(chalk.red('Error: Download module-template Fail\n'));
}

shell.rm('-rf', path.resolve(globalData.PROJECT_ROOT, './ios/'));
shell.rm('-rf', path.resolve(globalData.RN_TEMPLATE_FOLDER, './.git/'));

shell.mv(path.resolve(globalData.RN_TEMPLATE_FOLDER), path.resolve(globalData.PROJECT_ROOT, './ios'));

// 检查 ingore
const ignorePath = path.resolve(globalData.PROJECT_ROOT, './.gitignore');
let ignoreContent = fs.readFileSync(ignorePath, { encoding: 'utf8' });
if (ignoreContent.split('\n').filter(i => i === 'ios' || i === 'ios/').length === 0) {
    ignoreContent += '\nios\n';
}
fs.writeFileSync(ignorePath, ignoreContent);

// 更新 pod
try {
    execSync('cd ./ios && pod repo update && pod update');
} catch (e) {
    console.log(chalk.red('Error: Pod update fail\n'));
}

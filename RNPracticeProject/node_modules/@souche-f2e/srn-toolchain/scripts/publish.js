'use strict';

const async = require('async');
const chalk = require('chalk');
const inquirer = require('inquirer');

const questions = require('../config/publish_question');
const build = require('../lib/build.js');
const tag = require('../lib/tag.js');
const pod = require('../lib/pod.js');
const maven = require('../lib/maven.js');
const sentry = require('../lib/sentry.js');
const publish = require('../lib/publish/publish.js');
const versionUtil = require('../lib/version.js');
const generateModuleInfo = require('../lib/generate_module_info.js');
const checkPackage = require("../lib/checkPackage.js");
const srnService = require('../lib/srn_service');
const srnUI = require('../lib/srn_ui');


// TODO 增加 debug 打印流程，方便以后调试

let appPlatforms = [ 'ios', 'android' ];
if (process.env.PUBLISH_PLATFORM === 'ios' || process.env.PUBLISH_PLATFORM === 'android') {
    appPlatforms = [ process.env.PUBLISH_PLATFORM ];
}

process.on('unhandledRejection', (reason, p) => {
    console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);
});

// Jenkins 手动取消构建之后进程会收到 TERM 信号，在这个时候解锁项目
process.on('SIGTERM', function () {
    srnService.unlock({}, function () {
        console.log(chalk.red('Aborted: 发布被中断\n'));
        process.exit(1);
    });
});

function publishProcess (options) {
    /**
     * 发布流程
     *  1. 锁定发布，流程结束后解锁
     *  2. 检查内部依赖是否有重复
     *  3. 检查版本是否已经存在
     *  4. 生成 moudule_info.JSON
     *  5. srn-ui：应用自定义主题
     *  6. 编译 jsbundle，以及 iOS 的 pod 需要的文件
     *  7. 修改 package.json 版本，commit，打 tag
     *  8. 上传版版信息到 sentry
     *  9. 上传 jsbundle 到静态资源服务器
     *  10. 发布 pod
     *  11. 发布 maven
     */
    async.waterfall([
        function (callback) {
            srnService.lock(options, callback);
        },
        function (callback) {
            checkPackage.checkRepeat(options, callback);
        },
        function (callback) {
            versionUtil.checkVersionValidate(options, callback);
        },
        function (callback) {
            generateModuleInfo.run(options, callback);
        },
        function (callback) {
            srnUI.run(options, callback);
        },
        function (callback) {
            build.run(options, callback);
        },
        function (callback) {
            tag.run(options, callback);
        },
        function (callback) {
            sentry.run(options, callback);
        },
        function (callback) {
            publish.run(options, callback);
        },
        function (callback) {
            pod.run(options, callback);
        },
        function (callback) {
            maven.run(options, callback);
        },
        function (callback) {
            sentry.fixSentryInfo(options, callback);
        }
    ], function (err) {
        srnService.unlock(options, function () {
            if (err) {
                srnService.failureRelease(options, function () {
                    console.log(chalk.red('Error: 发布失败\n'), err.stack);
                    process.exit(1);
                });
                return;
            }

            srnService.successRelease(options, function () {
                console.log(chalk.green('Success: 发布成功✅'));
            });
        });
    });
}

/**
 * 询问发布选项
 */
if (process.env.SRN_LOCAL_PUBLISH) {
    inquirer.prompt(questions).then(function (answers) {
        const options = {
            version: answers.version,
            releaseSemver: answers.releaseSemver,
            releaseMessage: answers.releaseMessage,
            platform: appPlatforms,
            releaseType: answers.releaseType
        };

        publishProcess(options);
    });
} else {
    const options = {
        gitRepository: process.env.GIT_REPO,
        version: process.env.VERSION,
        releaseSemver: process.env.VERSION_TYPE,
        releaseMessage: process.env.RELEASE_MESSAGE,
        platform: appPlatforms,
        releaseType: process.env.RELEASE_TYPE
    };

    publishProcess(options);
}

'use strict';

/**
 * {
 *     "bundleName": "workspace",
 *     "bundleProps": {"key":"value", "key2":"value2", ...},
 *     "bundleAddress": "http://xxx.xx.com"
 * }
 */
const fs = require('fs');
const path = require('path');

const chalk = require('chalk');

const interfaces = require('os').networkInterfaces();

let localAddress = '';

// 如果通过 os.interfaces 获取不到 ip，手动设置 WIRELESS_IP 环境变量
if (process.platform === 'win32') {
    localAddress = process.env.WIRELESS_IP;
} else {
    let wifiInterfaceIPv4 = '';
    try {
        wifiInterfaceIPv4 = interfaces.en0.filter(item => item.family === 'IPv4');
    } catch (e) {

    }

    localAddress = process.env.WIRELESS_IP || wifiInterfaceIPv4[0].address;
}

const bundleAddress = `http://${localAddress}:8081`;
const bundleName = require(path.resolve(process.cwd(), './package.json')).name;
let bundleProps = '{}';

// ios: /index.ios.bundle?platform=ios&dev=true&minify=false
// android: /index.android.bundle?platform=android&dev=true&hot=false&minify=false

/**
 * 读取 .bundle_props 文件，设置给 bundleProps
 */
try {
    bundleProps = fs.readreadFileSync(path.resolve(process.cwd(), './.bundle_props.json'));
} catch (e) {
    fs.writeFileSync(path.resolve(process.cwd(), './.bundle_props.json'), '{}');
}

/**
 * 解析出来 props 对象
 */
try {
    bundleProps = JSON.parse(bundleProps);
} catch (e) {
    console.log(chalk.yellow('Wanning: .bundle_props.json 的内容不是标准的 JSON 格式'), e.stack);
    bundleProps = {};
}

module.exports = {
    bundleName: bundleName,
    bundleProps: bundleProps,
    bundleAddress: bundleAddress
};

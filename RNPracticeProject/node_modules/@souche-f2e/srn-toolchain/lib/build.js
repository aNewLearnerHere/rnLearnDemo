/* eslint-disable max-len */
'use strict';

const execSync = require('child_process').execSync;
const fs = require('fs');
const path = require('path');

const chalk = require('chalk');

const updateRouter = require('./update_router').updateRouter;
const globalData = require('./global_data');
const versionUtil = require('./version.js');

const pkg = require(globalData.PROJECT_PACKAGE_JSON);

const build = {
    run: function (options, done) {
        const platforms = typeof options === 'object' ? options.platform : options;

        this._cleanBuildFolder();

        // 打包前更新一下路由配置文件，防止最新的路由配置文件没有提交
        updateRouter();

        try {
            // 升级 package.json 版本号, sentry 上报依赖当前version, 此处与tag.js中重复了
            versionUtil.bumpVersionSync(options.version);

            this._buildAllBundles(platforms);
            this._saveBundleForIos();
        } catch (err) {
            if (err) {
                console.log(chalk.red('Error: build jsbundle fail'), err);
                return done(err);
            }
        }

        done();
    },

    /**
     * 清理 build 文件夹
     */
    _cleanBuildFolder: function () {
        try {
            const buildPath = path.resolve(globalData.PROJECT_ROOT, 'build');
            execSync(`rm -f ${buildPath}/*`);
        } catch (e) {
            console.log(chalk.red('Error: Clean *build* folder fail'));
        }
    },

    /**
     * 打包 ios 和 android 的 bundle
     */
    _buildAllBundles (platforms) {
        for (const platform of platforms) {
            this._buildBundle(platform);
        }
    },

    /**
     * 打包 jsbundle
     * @param {String} platform         平台：ios / android
     */
    _buildBundle: function (platform) {
        const entry = path.resolve(globalData.PROJECT_ROOT, `./index.${platform}.js`);
        const bundleFolder = path.resolve(globalData.PROJECT_ROOT, './build');
        const bundleOutput = path.resolve(globalData.PROJECT_ROOT, `./build/index.${platform}.jsbundle`);
        const sourcemapOutput = bundleOutput + '.map';

        // TODO 好像这里不能用绝对路径，应该是 cd 到目录下，然后 output = ./***
        // let outputSourceMap = path.resolve(globalData.PROJECT_ROOT, `./build/index.${platform}.jsbundle.map`);

        try {
            fs.statSync(bundleFolder);
        } catch (e) {
            fs.mkdirSync(bundleFolder);
        }

        // execSync(`react-native bundle --entry-file ${entry} --bundle-output ${output} --platform ${platform} --dev false --sourcemap-output ${outputSourceMap}`, { stdio: 'inherit' });
        execSync(`react-native bundle --entry-file ${entry} --bundle-output ${bundleOutput} --sourcemap-output ${sourcemapOutput} --platform ${platform} --dev false`, { stdio: 'inherit' });

        /**
         * 如果打完整包，那么需要删除掉 mini jsbundle 文件
         */
        if (process.env.SRN_FULL_BUNDLE) {
            const miniBundlePath = path.resolve(globalData.PROJECT_ROOT, 'build', `index.${platform}.smallest.jsbundle`);
            try {
                execSync(`rm -rf ${miniBundlePath}`, { stdio: 'ignore' });
            } catch (e) {

            }
        }
    },

    _saveBundleForIos () {
        const bundleFolder = path.resolve(globalData.PROJECT_ROOT, './build');

        // 用于 pod 获取 bundle 的路径
        const distFolder = path.resolve(globalData.PROJECT_ROOT, './dist');

        // 创建文件夹
        try {
            fs.statSync(distFolder);
            execSync(`rm -rf ${distFolder}`);
        } catch (e) {

        }

        try {
            fs.mkdirSync(distFolder);
        } catch (e) {

        }

        /**
         * ios 的集成规则
         *
         *  如果有 mini bundle，那么 [moduleName].mini.jsbundle
         *  如果是完整的 bundle，那么 [moduleName].jsbundle
         *
         */
        const moduleInfo = path.resolve(globalData.PROJECT_ROOT, 'module_info.json');
        const distModuleInfo = path.resolve(distFolder, `${pkg.name}.rnjson`);

        const bundle = path.resolve(bundleFolder, 'index.ios.jsbundle');
        const miniBundle = path.resolve(bundleFolder, 'index.ios.smallest.jsbundle');
        const distBundle = path.resolve(distFolder, `${pkg.name}.jsbundle`);
        const distMiniBundle = path.resolve(distFolder, `${pkg.name}.mini.jsbundle`);

        let sourceBundle = bundle;
        let targetBundle = distBundle;

        try {
            fs.statSync(miniBundle);

            sourceBundle = miniBundle;
            targetBundle = distMiniBundle;
        } catch (e) {
        }

        execSync(`cp ${sourceBundle} ${targetBundle}`);
        execSync(`cp ${moduleInfo} ${distModuleInfo}`);

        try {
            execSync('git add ./dist && git commit -m "Automatic save bundle"');
        } catch (e) {
            // 忽略掉 commit 时候，工作区 clean 报错的情况
        }
    }
};

/**
 * 打包 jsbundle
 * @param {String|Object} options      平台: ios, android, all
 */
module.exports = build;

'use strict';

const execSync = require('child_process').execSync;
const fs = require('fs');
const chalk = require('chalk');
const path = require('path');

const config = require('../config');
const globalData = require('./global_data.js');

const gitUtil = require('../lib/git_util.js');

/*
function removeSourceMap (iosSourceMap, androidSourceMap) {
    try {
        execSync(`rm ${iosSourceMap}`);
        execSync(`rm ${androidSourceMap}`);
    } catch (e) {

    }
}
*/

module.exports = {
    run: function (options, done) {
        const moduleInfo = require(globalData.MODULE_INFO_PATH);
        const packageInfo = require(globalData.PROJECT_PACKAGE_JSON);
        const version = options.version;
        const projectName = moduleInfo.name;
        const sentryHost = config.sentryHost;
        const sentryToken = config.sentryToken;

        // const assetsHost = config.assetsHost;
        // const baseUri = `${assetsHost}/projects/react-native/modules/${projectName}/${version}`;

        var sentryOrg = 'sentry';
        // rn 项目在 sentry 的 slug 里面统一用  "rn-" 的前缀；在 sentry 生成项目的时候，直接用 package.json 中的名字就可以
        var sentryPro = 'rn-' + projectName.toLowerCase();

        // 使用 package.json 中定义的 sentry.projectSlug 字段
        // 没有这个字段则使用旧版的规则：'rn-' + 项目名
        if (packageInfo.sentry && packageInfo.sentry.projectSlug) {
            sentryPro = packageInfo.sentry.projectSlug;
        }

        // 由于bundle source上传到sentry上后，是以bundle名字、release、dist组合唯一区别的，
        // 而如果如果多个project的release一样时，上传的文件会混合到所有project的artifacts下，
        // 所以这里在release上加上bundle的包名区别.
        var sentryVersion = `${projectName}_${version}`;

        const platforms = typeof options === 'object' ? options.platform : options;

        try {
            platforms.forEach(platform => {
                var bundleFile, sourcemapFile

                if ( process.env.SRN_FULL_BUNDLE ) {
                    bundleFile = this._resolveFile( `index.${platform}.jsbundle` );
                    sourcemapFile = this._resolveFile( `index.${platform}.jsbundle.map` );
                } else {
                    bundleFile = this._resolveFile( `index.${platform}.smallest.jsbundle` );
                    sourcemapFile = this._resolveFile( `index.${platform}.common-biz.jsbundle.map` );
                }

                // 上传bundle和sourcemap, 需要服务器上安装sentry-cli工具
                execSync(
                    `sentry-cli --url ${sentryHost} --auth-token ${sentryToken} \
                    releases -o ${sentryOrg} -p ${sentryPro} files ${sentryVersion} \
                    upload-sourcemaps --dist ${sentryVersion} --rewrite \
                    --strip-prefix ${globalData.PROJECT_ROOT}/ \
                    ${bundleFile} ${sourcemapFile}`,

                    { stdio: 'inherit' }
                );
            });
        } catch ( e ) {
            console.log(chalk.red('Error: sentry upload-sourcemaps fail'), e);
            return done();
        }

        done();
    },

    _resolveFile( fileName ) {
        return path.resolve( globalData.PROJECT_ROOT, `build/${fileName}` );
    },

    generateDsn () {

    },

    fixSentryInfo (options, done) {
        try {
            let updatedFiles = [];
            // 补全 package.json 中的 sentry.projectSlug 内容
            updatedFiles = updatedFiles.concat(this.fixProjectSlug());
            // 替换文件中的 sentry dsn 内容：sentry.souche-inc.com 改为 sentry.souche.com
            updatedFiles = updatedFiles.concat(this.fixDSNHostname());

            // commit 文件, push 文件
            const branch = gitUtil.getBranch();
            // eslint-disable-next-line
            execSync(`git add ${updatedFiles.join(' ')} && git commit -m "chore: fix sentry info" && git push origin HEAD:${branch}`, { stdio: 'ignore' });

            return done();
        } catch (e) {
            return done();
        }
    },

    fixProjectSlug() {
        const projectName = require(globalData.MODULE_INFO_PATH).name;
        const pkgContent = fs.readFileSync(globalData.PROJECT_PACKAGE_JSON, { encoding: 'utf8' });
        const pkg = JSON.parse(pkgContent);

        if (pkg.sentry && pkg.sentry.projectSlug) {
            return [];
        }

        if (!pkg.sentry) {
            pkg.sentry = {};
        }
        if (!pkg.sentry.projectSlug) {
            pkg.sentry.projectSlug = 'rn-' + projectName.toLowerCase();
        }
        fs.writeFileSync(globalData.PROJECT_PACKAGE_JSON, JSON.stringify(pkg, null, '  ') + '\n');

        return ['package.json'];
    },

    fixDSNHostname() {
        const relatedFiles = ['package.json', 'src/config/default.config.js', 'src/App.js'];
        const updatedFiles = [];

        relatedFiles.forEach(filePath => {
            const fileAbsolutePath = path.resolve(globalData.PROJECT_ROOT, filePath);
            let fileContent;
            try {
                fileContent = fs.readFileSync(fileAbsolutePath, { encoding: 'utf8' });
            } catch(_) {
                return;
            }

            const searchValue = /https:\/\/(\w*)(:\w*)?@sentry.souche-inc.com\/(\w*)/g;
            const replaceValue = 'https://$1$2@sentry.souche.com/$3';

            if (!searchValue.test(fileContent)) {
                return;
            }

            fileContent = fileContent.replace(searchValue, replaceValue);

            fs.writeFileSync(fileAbsolutePath, fileContent);
            updatedFiles.push(filePath);
        });

        return updatedFiles;
    }
};

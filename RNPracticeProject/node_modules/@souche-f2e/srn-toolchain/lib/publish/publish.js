'use strict';

const execSync = require('child_process').execSync;
const fs = require('fs');
const path = require('path');

const async = require('async');
const axios = require('axios');
const chalk = require('chalk');
const debug = require('debug')('srn-toolchain:publish:publish');

const gitUtil = require('../git_util.js');
const config = require('../../config/index.js');
const globalData = require('../global_data.js');

const pkg = require(globalData.PROJECT_PACKAGE_JSON);

/* 发布 */
module.exports = {
    run: function (options, callback) {
        const srnHubhost = config.srnHubhost;
        const assetsHost = config.assetsHost;
        const name = pkg.name;
        const platforms = options.platform;
        const releaseType = options.releaseType;
        const branch = gitUtil.getBranch();
        const version = options.version;
        const REMOTE_SERVER = 'souche@115.29.202.141';
        const ONLINE_PATH = `/home/souche/online/souche-f2e/projects/react-native/modules/${name}/${version}/`;

        try {
            // 将 module_info.json 拷贝到该 RN 项目的 dist/ 目录下；
            execSync(`cp ${globalData.PROJECT_ROOT}/module_info.json ${globalData.PROJECT_ROOT}/dist/`);
            // 通过 zip 将 dist/ 目录下的所有文件（ jsbundle、.rnjson 和 module_info.js ）进行压缩打包，并在 build/ 目录下生成该压缩包（压缩包名为 package.json 中的 name）；
            execSync(`zip -j ${globalData.PROJECT_ROOT}/build/${name}.zip ${globalData.PROJECT_ROOT}/dist/*`);
            // 移除 dist/ 目录下的 module_info.json 文件；
            execSync(`rm -f ${globalData.PROJECT_ROOT}/dist/module_info.json`);
            // 在静态资源服务器上为此次发布创建文件夹
            execSync(`ssh ${REMOTE_SERVER} 'mkdir -p ${ONLINE_PATH}'`);
            // 将 build/ 目录下的所有文件（ jsbundle 和 zip压缩包 ）上传到静态资源服务器。
            execSync(`rsync -rvI --progress ${globalData.PROJECT_ROOT}/build/* ${REMOTE_SERVER}:${ONLINE_PATH}`);
        } catch (e) {
            console.log(chalk.red('Error: publish failed'));
            return callback(e);
        }

        const bundleFolder = path.resolve(globalData.PROJECT_ROOT, './build');
        const bundleZip = path.resolve(bundleFolder, `${name}.zip`);
        const fullBundle = path.resolve(bundleFolder, 'index.ios.jsbundle');
        const miniBundle = path.resolve(bundleFolder, 'index.ios.smallest.jsbundle');

        let repository = '';
        let miniRepository = '';
        let repositoryZip = '';

        async.eachSeries(platforms, function (platform, next) {
            /**
             * 生成 bundle 压缩包的 url
             * @type {[type]}
             */
            try {
                fs.statSync(bundleZip);
                // eslint-disable-next-line
                repositoryZip = `${assetsHost}/projects/react-native/modules/${name}/${version}/${name}.zip`;
            } catch (e) {}

            /**
             * 生成 bundle 文件和 bundle 的 url
             * @type {[type]}
             */
            try {
                fs.statSync(fullBundle);
                // eslint-disable-next-line
                repository = `${assetsHost}/projects/react-native/modules/${name}/${version}/index.${platform}.jsbundle`;
            } catch (e) {

            }

            try {
                fs.statSync(miniBundle);
                // eslint-disable-next-line
                miniRepository = `${assetsHost}/projects/react-native/modules/${name}/${version}/index.${platform}.smallest.jsbundle`;
            } catch (e) {

            }

            if (process.env.SRN_FULL_BUNDLE) {
                miniRepository = '';
            } else {
                repository = '';
            }

            if (!miniRepository && !repository) {
                return next(new Error('bundle 文件不存在'));
            }

            /**
             * 上传 bundle 信息
             * @type {String}
             */
            let moduleInfo = '';

            try {
                moduleInfo = fs.readFileSync(globalData.debug_PATH, { encoding: 'utf8' });
            } catch (e) {
                debug(`${globalData.MODULE_INFO_PATH} file not found`);
            }

            axios.post(`${srnHubhost}/v1/bundle/${pkg.name}/${platform}`, {
                branch: branch,
                repository: repository,
                releaseType: releaseType,
                version: version,
                bundleInfo: moduleInfo,
                miniRepository: miniRepository,
                repositoryZip: repositoryZip
            }).then(function (resp) {
                console.log('\n上传新的 jsbundle 到 srn-hub 的请求信息: \n');
                console.log({
                    status: resp.status,
                    statusText: resp.statusText,
                    config: {
                        headers: resp.config.headers,
                        method: resp.config.method,
                        url: resp.config.url,
                        data: resp.config.data
                    },
                    data: resp.data
                });
                if (resp.data.code !== 10000) {
                    throw new Error(resp.data.msg);
                }

                console.log(chalk.green(`Success: 上传 ${name}@${version} for ${platform} 版本信息成功`));
                next();
            }).catch(function (err) {
                console.log('========== srn-hub ==========');
                console.log({
                    status: err.response.status,
                    statusText: err.response.statusText,
                    config: {
                        headers: err.response.config.headers,
                        method: err.response.config.method,
                        url: err.response.config.url,
                        data: err.response.config.data
                    },
                    data: err.response.data
                });
                console.log('========== srn-hub ==========');
                console.log(chalk.red(`Error: 上传 ${name}@${version} for ${platform} 版本信息失败，请联系 qq:838070635 手动添加`));
                next(err);
            });
        }, function (err) {
            if (err) {
                try {
                    // 表示发布失败，删除掉这个 tag，防止下次发布版本号冲突
                    gitUtil.removeTag(options.version);
                } catch (e) {

                }

                return callback(err);
            }

            console.log(chalk.green('Success: 上传版本信息完成✅'));
            callback();
        });
    }
};

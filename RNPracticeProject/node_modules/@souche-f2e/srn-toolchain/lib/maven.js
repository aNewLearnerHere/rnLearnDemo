'use strict';

const execSync = require('child_process').execSync;
const fs = require('fs');
const path = require('path');

const chalk = require('chalk');

const globalData = require('./global_data.js');
const pkg = require(globalData.PROJECT_PACKAGE_JSON);

module.exports = {
    _cleanMavenTemplateFolder: function () {
        try {
            execSync(`rm -rf ${globalData.MAVEN_TEMPLATE_FOLDER}`);
        } catch (e) {
            // 忽略目录不存在的错误
        }
    },

    _downloadTemplate: function () {
        // eslint-disable-next-line
        execSync(`git clone git@git.souche-inc.com:srn-core/RNTBundle.git ${globalData.MAVEN_TEMPLATE_FOLDER}`, { stdio: 'ignore' });
    },

    _moveTargetFiles () {
        const gradleAssetsFolder = path.resolve(globalData.MAVEN_TEMPLATE_FOLDER,
            `lib/src/main/assets/rnbundle/${pkg.name}`);

        try {
            execSync(`rm -rf ${gradleAssetsFolder}`);
        } catch (e) {

        }

        try {
            execSync(`mkdir -p ${gradleAssetsFolder}`);
        } catch (e) {

        }

        const bundleFolder = path.resolve(globalData.PROJECT_ROOT, 'build');
        const moduleInfoFile = globalData.MODULE_INFO_PATH;


        /**
         * android 的包文件
         *
         *  如果有 smallest bundle，那么只需要上传这个文件到 maven 仓库
         *  如果是完整的 bundle，那么上传完整文件到 maven 仓库
         *
         */
        const fullBundle = path.resolve(bundleFolder, 'index.android.jsbundle');
        const miniBundle = path.resolve(bundleFolder, 'index.android.smallest.jsbundle');

        let sourceBundle = fullBundle;

        try {
            fs.statSync(miniBundle);

            sourceBundle = miniBundle;
        } catch (e) {
        }

        execSync(`cp ${sourceBundle} ${gradleAssetsFolder}`);
        execSync(`cp ${moduleInfoFile} ${gradleAssetsFolder}`);
    },

    run: function (options, done) {
        try {
            const version = options.version;

            this._cleanMavenTemplateFolder();
            this._downloadTemplate();
            this._moveTargetFiles();

            // 修改 build.gradle 内容
            const gradleConfigPath = path.resolve(globalData.MAVEN_TEMPLATE_FOLDER, 'lib/build.gradle');
            let gradleContent = fs.readFileSync(gradleConfigPath, { encoding: 'utf8' });

            gradleContent = gradleContent.replace(/模块名/g, pkg.name);
            gradleContent = gradleContent.replace(/versionName "[.\w]+"/, `versionName "${version}"`);

            fs.writeFileSync(gradleConfigPath, gradleContent);

            // 修改 manifest 的内容
            const manifestPath = path.resolve(globalData.MAVEN_TEMPLATE_FOLDER, 'lib/src/main/AndroidManifest.xml');
            let manifestContent = fs.readFileSync(manifestPath, { encoding: 'utf8' });

            manifestContent = manifestContent.replace(/模块名/g, pkg.name);

            fs.writeFileSync(manifestPath, manifestContent);

            // 上传 maven 包
            execSync(`cd ${globalData.MAVEN_TEMPLATE_FOLDER} && ./gradlew uploadArchives`);

            // eslint-disable-next-line
            console.log(chalk.green(`Success: build.gradle 内容："compile com.souche.rn:${pkg.name}:${version}-SNAPSHOT"`));
        } catch (e) {
            console.log('========= maven error ===========');
            console.log(e.stdout.toString('utf8'));
            console.log(e.stderr.toString('utf8'));
            console.log('========= maven error ===========');

            return done(e);
        }

        done();
    }
};

const path = require('path');
const fs = require('fs');
const debug = require('debug')('srn-toolchain:srn-ui');

const globalData = require('./global_data.js');

const customThemePath = path.resolve(globalData.PROJECT_ROOT, './srn-ui.theme.js');
const hostThemePath = path.resolve(globalData.PROJECT_ROOT, './node_modules/@souche-ui/srn-ui/src/theme/host.js');
const extendThemePath = path.resolve(globalData.PROJECT_ROOT, './node_modules/@souche-ui/srn-ui/src/theme/extend.js');

module.exports = {
    run(options, done) {
        try {
            this.applyTheme();
            if (done) {
                done();
            }
        } catch (error) {
            if (done) {
                done(error);
            } else {
                throw new Error(error);
            }
        }
    },

    applyTheme() {
        if (fs.existsSync(hostThemePath)) {
            fs.writeFileSync(hostThemePath, hostThemeContent);
            debug('应用 host 主题' + hostThemePath);
        } else {
            debug('找不到 ' + hostThemePath + ' 文件，无法应用 host 主题');
        }
        if (fs.existsSync(extendThemePath)) {
            if (fs.existsSync(customThemePath)) {
                const customThemeContnet = fs.readFileSync(customThemePath, { encoding: 'utf8' });
            
                fs.writeFileSync(extendThemePath, customThemeContnet);
                debug('应用自定义主题' + extendThemePath);
            } else {
                debug('项目根目录下缺少 srn-ui.theme.js 文件，无法应用自定义主题');
            }
        } else {
            debug('找不到 ' + extendThemePath + ' 文件，无法应用自定义主题');
        }
    }
};

const hostThemeContent = `import { NativeModules } from 'react-native';
import {
    primaryToPrimaryPressed,
    primaryToPrimaryDisabled,
    primaryToPrimarySelected,
} from '../util/colorUtil';
import version from './version';

const defaultPrimaryColor = '#ff571a';
const appPrimaryColor = NativeModules.SCCRNAppData &&
    NativeModules.SCCRNAppData.primaryColor &&
    NativeModules.SCCRNAppData.primaryColor.toLowerCase() ||
    defaultPrimaryColor;
let theme = NativeModules.STheme && NativeModules.STheme.theme; // APP 统一主题

// 主题版本策略，如果本地主题版本大于 APP 统一主题版本，则不应用 APP 统一主题
if (theme && version.major > theme.version) {
    theme = null;
}

if (!theme) {
    // 使用旧版 APP 主色
    if (appPrimaryColor !== defaultPrimaryColor) {
        theme = calculateTheme(appPrimaryColor);
    } else {
        theme = {};
    }
}

delete theme.version;

function calculateTheme(primaryColor) {
    return {
        color_primary: primaryColor,
        color_primary_text: primaryColor,
        color_primary_press: primaryToPrimaryPressed(primaryColor),
        color_primary_disable: primaryToPrimaryDisabled(primaryColor),
        color_primary_selected: primaryToPrimarySelected(primaryColor),
        color_text_selected: primaryColor,
    };
}

export default {
    vars: {
        common: theme,
    },
};
`;
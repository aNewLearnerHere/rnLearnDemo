const fs = require("fs");
const { execSync } = require("child_process");
const chalk = require("chalk");

const checkPackage = {
    checkRepeat: function(options, done) {
        try {
            let execResult;
            try {
                execResult = execSync("npm ls --depth 1", { encoding: "utf8" });
            } catch (ex) {
                execResult = ex.stdout;
            }
            const packageString = execResult.replace(/──|└|─┬|│|├/g, "").trim();
            const packageArr = packageString
                .split("\n")
                .map(name => name.trim().replace(/[@.0-9]+$/, ""));
            const uniqueArr = [];
            const repeatArr = [];
            packageArr.map(name => {
                if (uniqueArr.includes(name)) {
                    repeatArr.push(name);
                } else {
                    name.includes("souche-f2e") && !name.includes("deduped") && uniqueArr.push(name);       //满足 是srn 内部包 且 忽略 deduped 的相同版本依赖 条件，则加入唯一依赖数组
                }
            });
            if (repeatArr.length) {
                if (done) {
                    return done(new Error(`Error: ${repeatArr.join(", ")} 被重复依赖，请先检查依赖问题。如仍存在问题，可与相关开发人员联系`));
                } else {
                    throw new Error(chalk.red(`Error: ${repeatArr.join(", ")} 被重复依赖，请先检查依赖问题。如仍存在问题，可与相关开发人员联系`));
                }
            } else {
                if (done) {
                    return done();
                }
            }
        } catch (error) {
            if (done) {
                return done(error);
            } else {
                throw new Error(error);
            }
        }
    }
};

module.exports = checkPackage;

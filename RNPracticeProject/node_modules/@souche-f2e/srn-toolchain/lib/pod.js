'use strict';

const execSync = require('child_process').execSync;
const fs = require('fs');
const path = require('path');

const chalk = require('chalk');

const globalData = require('./global_data.js');

const pkg = require(globalData.PROJECT_PACKAGE_JSON);

module.exports = {
    _generatePodSpecFileContent: function (s) {
        return `
            Pod::Spec.new do |s|
                s.name             = "${s.name}"
                s.version          = "${s.version}"
                s.summary          = "${s.summary}"

                s.description      = <<-DESC
                    ${s.description}
                    DESC

                s.homepage         = "${s.homepage}"
                s.license          = "${s.license}"
                s.author           = { ${s.author} }
                s.source           = { :git => "${s.source}", :tag => s.version.to_s }

                s.ios.deployment_target = '${s.deploymentTarget}'
                s.resources = ${s.resources}
            end
        `;
    },

    _getConfig: function (options) {
        const podInfo = {};
        let username = '';
        let email = '';

        try {
            username = pkg.author.name;
            email = pkg.author.email;
        } catch (e) {
            // 获取默认的用户名
            username = execSync('git config --global user.name', { encoding: 'utf8' });
            email = execSync('git config --global user.email', { encoding: 'utf8' });
        }

        /**
         * 需要手动添加的字段
         *  description: "xxx"
         *  repository: {type: "git", url: "git@git.souche-inc.com:xxx/xxx.git"}
         *  license: "MIT"
         *  author: {name: "xxx", email: "xxx"}
         */

        podInfo.name = pkg.name;
        podInfo.version = options.version;
        podInfo.summary = pkg.description || 'no summary';
        podInfo.description = pkg.description || 'no description';
        podInfo.homepage = pkg.repository.url.replace('git@git.souche-inc.com:', 'http://git.souche-inc.com/');
        podInfo.license = pkg.license || 'MIT';
        podInfo.author = `"${username}" => "${email}"`;
        podInfo.source = pkg.repository.url;
        podInfo.deploymentTarget = '8.0';

        podInfo.resources = `['dist/*.jsbundle', 'dist/${pkg.name}.rnjson']`;

        return podInfo;
    },

    _cleanPodTemplateFolder () {
        try {
            execSync(`rm -rf ${globalData.POD_TEMPLATE_FOLDER}`);
        } catch (e) {
            // 忽略目录不存在的错误
        }
    },

    _downloadTemplate () {
        // eslint-disable-next-line
        execSync(`git clone git@git.souche-inc.com:souche-react-native/RNPodRepo.git ${globalData.POD_TEMPLATE_FOLDER}`, { stdio: 'ignore' });
    },

    _generateNewPodSpecFile (options) {
        const podInfo = this._getConfig(options);
        const podSpecContent = this._generatePodSpecFileContent(podInfo);
        const podSpecFileFolder = path.resolve(globalData.POD_TEMPLATE_FOLDER, podInfo.name, podInfo.version);

        try {
            const stats = fs.statSync(podSpecFileFolder);

            if (!stats.isDirectory()) {
                throw new Error(`${podSpecFileFolder} is not a directory'`);
            }
        } catch (e) {
            execSync(`mkdir -p ${podSpecFileFolder}`);
        }

        const podSpecFilePath = path.resolve(podSpecFileFolder, `${pkg.name}.podspec`);

        fs.writeFileSync(podSpecFilePath, podSpecContent);
    },

    _publishNewVersion () {
        // eslint-disable-next-line
        execSync(`cd ${globalData.POD_TEMPLATE_FOLDER} && git add . && git commit -m "Auto update" && git push origin HEAD:master`, { stdio: 'ignore' });
    },

    run: function (options, done) {
        try {
            this._cleanPodTemplateFolder();
            this._downloadTemplate();
            this._generateNewPodSpecFile(options);
            this._publishNewVersion();
            console.log(chalk.green(`Success: Podfile 内容："pod ${pkg.name} ${options.version}"`));
        } catch (e) {
            // 提醒 package.json 中应该包含哪些字段
            return done(e);
        }

        done();
    }
};

import React from 'react';
import {
    View,
    Text,
    StyleSheet,
} from 'react-native';
import PropTypes from 'prop-types';
import theme from '../../theme';
import StepItem from './StepItem';

class Step extends React.PureComponent {

    static Item = StepItem;

    constructor(props) {
        super(props);
        this.renderItem = this.renderItem.bind(this);
    }

    renderItem(item, index, customLabelWidth) {
        const { current, status: currentStatus, number, labelStyle } = this.props;
        let status = item.props.status;
        if (!status) {
            if (index < current) {
                status = 'success';
            } else if (index === current) {
                status = currentStatus;
            } else if (index > current) {
                status = 'wait';
            }
        }
        const stateItem = React.cloneElement(item, {
            key: `n${index}`,
            index,
            number,
            labelStyle,
            status,
        });

        if (index === 0) {
            return stateItem;
        } else {
            return [
                <View
                    key={`l${index}`}
                    style={[
                        styles.line,
                        status !== 'wait' && styles.activeLine,
                        customLabelWidth !== undefined && { marginHorizontal: getLineMarginHorizontal(customLabelWidth) }
                    ]}
                />,
                stateItem,
            ];
        }
    }

    render() {
        const labelStyle = StyleSheet.flatten(this.props.labelStyle);
        const customLabelWidth = labelStyle ? labelStyle.width : undefined;
        return (
            <View
                style={[
                    styles.container,
                    this.props.style,
                    customLabelWidth !== undefined && { paddingHorizontal: getContainerPaddingHorizontal(customLabelWidth) }
                ]}
            >
                {React.Children.map(this.props.children, (item, index) => this.renderItem(item, index, customLabelWidth))}
            </View>
        );
    }
}

function getLineMarginHorizontal(labelWidth) {
    return -(labelWidth / 2 - StepItem.CIRCLE_WIDTH / 2);
}

function getContainerPaddingHorizontal(labelWidth) {
    return 44 - (labelWidth / 2 - StepItem.CIRCLE_WIDTH / 2);
}

Step.propTypes = {
    current: PropTypes.number,
    status: PropTypes.string,
    number: PropTypes.bool,
    style: View.propTypes.style,
    labelStyle: Text.propTypes.style,
};

Step.defaultProps = {
    current: 0,
    status: 'process',
    number: false,
};

const styles = StyleSheet.create({
    container: {
        paddingHorizontal: getContainerPaddingHorizontal(StepItem.LABEL_WIDTH),
        flexDirection: 'row',
    },
    line: {
        flex: 1,
        height: 2,
        backgroundColor: theme('color_press'),
        marginTop: StepItem.CIRCLE_WIDTH / 2 - 1,
        marginHorizontal: getLineMarginHorizontal(StepItem.LABEL_WIDTH),
    },
    activeLine: {
        backgroundColor: theme('color_primary'),
    },
});

export default Step;
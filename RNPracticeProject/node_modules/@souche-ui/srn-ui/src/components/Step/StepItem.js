import React from 'react';
import {
    View,
    Text,
    StyleSheet,
} from 'react-native';
import PropTypes from 'prop-types';
import FontSize from '../../const/FontSize';
import theme from '../../theme';
import Icon from '../Icon';

class StepItem extends React.PureComponent {

    static CIRCLE_WIDTH = 18;
    static LABEL_WIDTH = 50;

    render() {
        const {
            index,
            number,
            labelStyle,
            status,
            label,
            icon,
            borderColor,
            color,
        } = this.props;

        let circleIcon = null;
        if (number) {
            circleIcon = <Text style={[styles.index, status === 'process' && styles.activeIndex]}>{String(index + 1)}</Text>;
        }
        switch (status) {
            case 'wait': break;
            case 'success': circleIcon = <Icon type="checkCircle" color={theme('color_primary')} size={StepItem.CIRCLE_WIDTH + 1} />; break;
            case 'process': break;
            case 'error': circleIcon = <Icon type="closeCircle" color={theme('color_primary')} size={StepItem.CIRCLE_WIDTH + 1} />; break;
        }
        if (icon) {
            circleIcon = icon;
        }

        let circleBorderColor = theme('color_press'), circleBackgroundColor = 'transparent';
        if (status === 'success' || status === 'error' || status === 'process') {
            circleBorderColor = theme('color_primary');
        }
        if (borderColor) {
            circleBorderColor = borderColor;
        }
        if (color) {
            circleBackgroundColor = color;
        }

        return (
            <View style={styles.node}>
                <View
                    style={[
                        styles.circle,
                        {
                            borderColor: circleBorderColor,
                            backgroundColor: circleBackgroundColor
                        }
                    ]}
                >
                    {circleIcon}
                </View>
                <Text style={[styles.text, labelStyle]}>{label}</Text>
            </View>
        );
    }
}

StepItem.propTypes = {
    index: PropTypes.number, // 内部使用
    number: PropTypes.bool, // 内部使用
    labelStyle: Text.propTypes.style, // 内部使用
    status: PropTypes.oneOf(['success', 'process', 'error', 'wait']),
    label: PropTypes.string.isRequired,
    icon: PropTypes.element,
    borderColor: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
    ]),
    color: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
    ]),
};

const styles = StyleSheet.create({
    node: {
        alignItems: 'center',
    },
    circle: {
        width: StepItem.CIRCLE_WIDTH,
        height: StepItem.CIRCLE_WIDTH,
        borderWidth: 2,
        borderRadius: StepItem.CIRCLE_WIDTH / 2,
        alignItems: 'center',
        justifyContent: 'center',
    },
    index: {
        color: theme('color_line_b'),
        fontSize: FontSize.T2,
    },
    activeIndex: {
        color: theme('color_primary_text'),
    },
    text: {
        width: StepItem.LABEL_WIDTH,
        backgroundColor: 'transparent',
        color: theme('color_text_title'),
        fontSize: FontSize.P3,
        lineHeight: FontSize.P3 + 4,
        marginTop: 6,
        textAlign: 'center'
    },
});

export default StepItem;
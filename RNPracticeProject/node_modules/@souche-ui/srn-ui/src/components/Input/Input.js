import React from 'react';
import {
    TextInput,
    View,
    TouchableHighlight,
    Platform,
    PixelRatio,
    StyleSheet,
} from 'react-native';
import PropTypes from 'prop-types';

import FontSize from '../../const/FontSize';
import theme from '../../theme';
import Textarea from './Textarea';
import Icon from '../Icon';

class Input extends React.Component {
    constructor(props) {
        super(props);

        const value = this.fixValue(props);

        this.state = {
            // 控制密码是否脱敏显示
            secureVisible: false,
            // 控制是否显示清除按钮
            clear: false,
        };
        this.text = value;

        this.onChange = this.onChange.bind(this);
        this.handleFocus = this.handleFocus.bind(this);
        this.handleBlur = this.handleBlur.bind(this);
        this.clear = this.clear.bind(this);
        this.toggleSecureText = this.toggleSecureText.bind(this);
        this.setRef = this.setRef.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        this.text = this.fixValue(nextProps);
        if (
            nextProps.disabled === true &&
            nextProps.disabled !== this.props.disabled &&
            Platform.OS === 'android' &&
            this.isFocused()
        ) {
            // Android 上 disable 变为 true 后不会自动失去焦点，这里手动让其失焦
            this.blur();
        }
    }

    fixValue(props) {
        const normalizedValue = this.normalizeValue(props.value);
        if (typeof normalizedValue === 'string') {
            return normalizedValue;
        } else {
            return this.normalizeValue(props.defaultValue);
        }
    }

    normalizeValue(value) {
        if (typeof value === 'number') {
            return isNaN(value) ? '' : String(value);
        } else {
            return value;
        }
    }

    onChange(event) {
        const text = event.nativeEvent.text;
        const { clear, onChange } = this.props;

        // 文本变化后根据是否符合条件来显示/隐藏按钮
        clear && this.setState(prevState => ({
            clear: text.length > 0,
        }));

        this.text = text;
        onChange && onChange(text);
    }

    handleFocus(e) {
        const { clear, onFocus } = this.props;
        if (clear) {
            this.setState({ clear: this.text && this.text.length > 0 });
        }
        onFocus && onFocus(e);
    }

    handleBlur(e) {
        const { clear, onBlur } = this.props;
        if (clear) {
            this.setState({ clear: false });
        }
        onBlur && onBlur(e);
    }

    /**
     * 清空文本框
     */
    clear() {
        if (!this.state.clear) {
            // 当清空按钮不显示时，点击不作任何处理
            return;
        }
        const { clear, onChange } = this.props;

        // 没有用 re-render 的方式清空文本框，因为那样会增加很多代码
        // 所以这里直接修改原生属性
        this.input.setNativeProps({ text: '' });
        // 隐藏清除按钮
        clear && this.setState({ clear: false });

        // 假装这是由文本框触发的改变（实际上是清除按钮造成的改变）
        onChange && onChange('');
    }

    /**
     * 判断输入框是否拥有焦点
     */
    isFocused() {
        return !!this.input && this.input.isFocused();
    }

    /**
     * 聚焦方法
     */
    focus() {
        this.input && this.input.focus();
    }

    /**
     * 失焦方法
     */
    blur() {
        this.input && this.input.blur();
    }

    /**
     * 切换密码框脱敏状态
     */
    toggleSecureText() {
        this.setState(prevState => ({ secureVisible: !prevState.secureVisible }));
    }

    setRef(ref) {
        this.input = ref;
    }

    /**
     * 单行文本框渲染函数
     */
    renderTextInput() {
        const {
            type,
            value,
            defaultValue,
            placeholder,
            clear,
            disabled,
            error,
            required,
            style: styleProp,
            ...restProps,
        } = this.props;
        // 如果 type 为 password，则文本框为密码框
        const secureTextEntry = type === 'password';
        let keyboardType = 'default';

        // 单行输入对应的类型弹出对应的键盘
        if (type === 'number') {
            keyboardType = 'numeric';
        } else if (type === 'phone') {
            keyboardType = 'phone-pad';
        }

        return (
            <View style={styles.container}>
                <TextInput
                    style={[
                        styles.input,
                        Platform.OS === 'ios' && PixelRatio.get() === 2 && styles.fixInput, // iOS pixelRatio 为 2 时，修复输入框文本不能垂直居中问题
                        styleProp,
                        error && { color: theme('color_warning') },
                        disabled && { color: theme('color_text_caption') },
                    ]}
                    value={this.normalizeValue(value)}
                    defaultValue={this.normalizeValue(defaultValue)}
                    placeholder={placeholder || (disabled ? '' : '请输入')}
                    underlineColorAndroid="transparent"
                    keyboardType={keyboardType}
                    {...restProps}
                    onFocus={this.handleFocus}
                    onBlur={this.handleBlur}
                    ref={this.setRef}
                    editable={!disabled}
                    placeholderTextColor={disabled ? theme('color_text_caption') : required ? theme('color_primary_text') : theme('color_text_hint')}
                    secureTextEntry={secureTextEntry && !this.state.secureVisible}
                    onChange={this.onChange}
                />
                {/* 清除按钮 */}
                {clear && <TouchableHighlight
                    activeOpacity={0.5}
                    underlayColor="transparent"
                    style={this.state.clear ? styles.showClearButton : styles.hideClearButton}
                    onPress={this.clear}
                    hitSlop={{top: 4, right: 4, bottom: 4, left: 4}}
                >
                    <Icon type={Icon.closeCircle} color={theme('color_text_caption')} />
                </TouchableHighlight>}
                {/* 密码明文/密文转换按钮 */}
                {secureTextEntry && <TouchableHighlight
                    activeOpacity={0.5}
                    underlayColor="transparent"
                    onPress={this.toggleSecureText}
                    hitSlop={{top: 4, right: 4, bottom: 4, left: 4}}
                    style={this.state.clear && styles.span}
                >
                    <Icon type={this.state.secureVisible ? Icon.visual : Icon.unvisual} color={theme('color_text_body')} />
                </TouchableHighlight>}
            </View>
        );
    }

    render() {
        const {
            type,
            rows,
            autoHeight,
        } = this.props;

        // rows 为 1 且 autoHeight 为 false 的情况下，仍然为单行输入
        const multiline = type === 'textarea' && (rows > 1 || autoHeight);

        if (multiline) {
            return (
                <Textarea ref={this.setRef} {...this.props} />
            );
        } else {
            return this.renderTextInput();
        }
    }
}

Input.propTypes = {
    type: PropTypes.oneOf(['text', 'textarea', 'password', 'number', 'phone']),
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    placeholder: PropTypes.string,
    editable: PropTypes.bool,
    disabled: PropTypes.bool,
    required: PropTypes.bool,
    error: PropTypes.bool,
    clear: PropTypes.bool,
    rows: PropTypes.number,
    count: PropTypes.number,
    autoHeight: PropTypes.bool,
    onChange: PropTypes.func,
    onPress: PropTypes.func
};

Input.defaultProps = {
    type: 'text',
    defaultValue: '',
    disabled: false,
    required: false,
    error: false,
    clear: false,
    rows: 1,
    count: 0,
    autoHeight: false
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
    },
    input: {
        padding: 0,
        flex: 1,
        fontSize: FontSize.P1,
        color: theme('color_text_title'),
    },
    fixInput: {
        paddingTop: 1.67,
    },
    span: {
        marginLeft: 20,
    },
    showClearButton: {
        opacity: 1,
    },
    hideClearButton: {
        opacity: 0,
    },
});

export default Input;
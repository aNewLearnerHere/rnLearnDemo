import React from 'react';
import { View, Text, Dimensions, StyleSheet } from 'react-native';
import FontSize from '../../const/FontSize';
import theme from '../../theme';

const windowHeight = Dimensions.get('window').height;
const PADDING_V = 12;
const LIHE_HEIGHT = 20;

export default class Toast extends React.Component{
    static navigation = {
        hiddenHeader: true
    };
    constructor(props){
        super(props);
        this.state = {
            visible: false,
            value: '',
            position: '',
            toastStyle: {},
            positionStyle: {bottom: -100},  // 初始使 toast 显示在屏幕外面，在 onLayout 中获取高度后再计算 toast 的位置，然后调整位置
        };
    }
    /*
    * 显示 toast 的方法
    * 在外部通过 ref.toast.show() 使用
    * */
    show(value, position, duration, toastStyle){
        let finalDuration = 1500;  // 默认持续时间1500毫秒
        let valueType = typeof value;
        // value 是字符串，根据长度修改默认持续时间;如果传入的 duration 是数字，则使用传入的 duration 作为持续时间
        if (valueType === 'string'){
            let textLength = value.length;
            if ((typeof (duration)) === 'number'){
                finalDuration = duration;
            } else {
                finalDuration = textLength > 8 ? 3000 : 1500;
            }
        } else {
            if ((typeof (duration)) === 'number'){
                finalDuration = duration;
            }
        }
        if (valueType !== 'string' && valueType !== 'function') {
            console.warn('srn-ui 组件库：Toast 的 value 参数只能为字符串或者函数类型');
        }
        this.setState({
            visible: true,
            value: value,
            position: position,
            toastStyle: toastStyle,
            positionStyle: {bottom: -100},  // 初始使 toast 显示在屏幕外面，在 onLayout 中获取高度后再计算 toast 的位置，然后调整位置
        });
        clearTimeout(this.hiddenTimeoutId);
        this.hiddenTimeoutId = setTimeout(()=>{this.setState({visible: false});}, finalDuration);
    }
    /*
    * 处理自定义样式
    * */
    _getCustomStyle(){
        let bgColor = (this.state.toastStyle && this.state.toastStyle.backgroundColor) || theme('toast_color_body');
        let textStyle = {};
        textStyle.color = (this.state.toastStyle && this.state.toastStyle.color) || theme('color_white');
        textStyle.fontSize = (this.state.toastStyle && this.state.toastStyle.fontSize) || FontSize.P2;
        if (this.state.toastStyle && this.state.toastStyle.lineHeight){
            textStyle.lineHeight = this.state.toastStyle.lineHeight;
        }
        return {bgColor, textStyle};
    }
    /*
    * 处理 toast 位置
    * @params: toastHeight: toast 的高度
    * @return: toast 的位置
    * */
    _getPosition(toastHeight){
        let positionType = this.state.position && (typeof (this.state.position));
        let position = {bottom: (windowHeight - toastHeight) / 2}; // 默认居中
        if (positionType === 'string') {
            switch (this.state.position){
                case 'top':
                    position = {
                        top: 10
                    };
                    break;
                case 'middle':
                    position = {
                        bottom: (windowHeight - toastHeight) / 2
                    };
                    break;
                case 'bottom':
                    position = {
                        bottom: 10
                    };
                    break;
            }
        } else if (positionType === 'object') {
            position = {...this.state.position, alignSelf: 'flex-start'};
        } else {
            position = {bottom: (windowHeight - toastHeight) / 2};    // 其他意外情况一律居中
        }
        return position;
    }
    _onLayout = e => {
        this.setState({positionStyle: this._getPosition(e.nativeEvent.layout.height)});
    };
    render(){
        if (this.state.visible) {
            let valueType = (typeof (this.state.value));
            if (valueType === 'string'){
                let text = this.state.value;
                let customStyle = this._getCustomStyle();
                // let position = this._getPosition();
                return (
                    <View style={[
                            styles.toastContainer,
                            {backgroundColor: customStyle.bgColor},
                            this.state.positionStyle
                          ]}
                          onLayout={this._onLayout}
                    >
                        <Text style={[styles.text, customStyle.textStyle]}
                        >{text}</Text>
                    </View>
                );
            } else if (valueType === 'function') {
                return (
                    <View style={[
                            styles.toast,
                            this.state.positionStyle
                          ]}
                          onLayout={this._onLayout}
                    >
                        {this.state.value()}
                    </View>
                );
            } else {
                return null;
            }
        } else {
            return null;
        }
    }
    componentWillUnmount(){
        clearTimeout(this.hiddenTimeoutId);
    }
}

const styles = StyleSheet.create({
    toastContainer: {
        maxWidth: 175,
        justifyContent: 'center',
        alignItems: 'center',
        paddingHorizontal: 16,
        borderRadius: 6,
        alignSelf: 'center', // toast 宽度自动撑开，且居中
        position: 'absolute',
        paddingVertical: PADDING_V
    },
    text: {
        padding: 0,
        textAlign: 'center',
        lineHeight: LIHE_HEIGHT,
    },
    toast: {
        position: 'absolute',
        alignSelf: 'center'
    },
});
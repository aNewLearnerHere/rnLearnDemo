import React from 'react';
import { View, Text, Dimensions, Animated, TouchableOpacity, TouchableWithoutFeedback, Modal, StyleSheet } from 'react-native';
import PropTypes from 'prop-types';
import FontSize from '../../const/FontSize';
import PickerBodyWrapper from './PickerBodyWrapper';
import theme from '../../theme';

const windowWidth = Dimensions.get('window').width;
const windowHeight = Dimensions.get('window').height;

export default class Picker extends React.PureComponent{

    constructor(props){
        super(props);
        // this.pickerHeight = (this.props.style && this.props.style.height) || 259;
        this.pickerHeight = 259;   // 先固定样式，后期增加可配置样式
        this.maskHeight = windowHeight - this.pickerHeight;

        this.columns = [];
        this.defaultValue = [];
        this.selectedIndex = [];
        this.isSingleItems = false;
        this.lastSelectedColumnIndex = -1;

        this.animating = false;
        this.interrupted = false;

        this.state = {
            offsetBottom: new Animated.Value(-this.pickerHeight),
            visible: this.props.visible,
            selectedValue: [],
        };

        this._fixItems(props);
        this._fixDefaultValue(props);

        this._pickerShow = this._pickerShow.bind(this);
        this._pickerHidden = this._pickerHidden.bind(this);
        this._cancelPress = this._cancelPress.bind(this);
        this._confirmPress = this._confirmPress.bind(this);
        this._outerPress = this._outerPress.bind(this);
        this._onValueChange = this._onValueChange.bind(this);
        this._generateEventParams = this._generateEventParams.bind(this);
        this._getSelectedIndex = this._getSelectedIndex.bind(this);
    }

    componentWillReceiveProps(nextProps){
        if (nextProps.items !== this.props.items) {
            this._fixItems(nextProps);
        }
        if (nextProps.defauleValue !== this.props.defauleValue) {
            this._fixDefaultValue(nextProps);
        }
        if (nextProps.visible !== this.props.visible) {
            if (this.animating) {
                // 如果动画过程中参数改变，则设置打断状态为 true
                this.interrupted = true;
            }
            nextProps.visible ? this._pickerShow() : this._pickerHidden();
        }
    }

    _fixItems(props) {
        if (!Array.isArray(props.items) || props.items.length === 0) {
            return;
        }
        if (!Array.isArray(props.items[0]) && typeof props.items[0] !== 'function') {
            this.columns = [props.items];
            this.isSingleItems = true;
        } else {
            this.columns = props.items;
            this.isSingleItems = false;
        }
    }

    _fixDefaultValue(props) {
        if (!Array.isArray(props.defauleValue)) {
            this.defaultValue = [props.defauleValue];
        } else {
            this.defaultValue = props.defauleValue;
        }
        this.state.selectedValue = this.defaultValue;
    }

    _pickerShow(){
        /*
        * 显示 picker: 先显示模态框,再执行动画
        */
        this.setState({visible: true}, ()=>{
            this.animating = true;
            Animated.timing(                            // 随时间变化而执行的动画类型
                this.state.offsetBottom,                      // 动画中的变量值
                {
                    toValue: 0,                             // 距离底部偏移量最终变为 0
                    duration: 300
                }
            ).start(() => {
                this.animating = false;
                this.interrupted = false;
            });                                  // 开始执行动画
        });
    }
    _pickerHidden(){
        /*
        * 隐藏 picker: 先执行动画, 再隐藏模态框
        * */
        this.animating = true;
        Animated.timing(                            // 随时间变化而执行的动画类型
            this.state.offsetBottom,                      // 动画中的变量值
            {
                toValue: -this.pickerHeight,                             // 距离底部偏移量最终变为 -this.pickerHeight
                duration: 300
            }
        ).start(()=>{
            if (!this.interrupted) {
                // 只有在动画没有被打断的情况下才执行 setState
                this.setState({visible: false});
            }
            this.animating = false;
        });
    }
    _generateEventParams(){
        let selectedIndex = this.selectedIndex;
        let selectedItem = this.selectedIndex.map((index, columnIndex) => this.columns[columnIndex][index] || {});
        let selectedValue = selectedItem.map(item => item.value);
        if (this.isSingleItems) {
            return [selectedValue[0], selectedItem[0], selectedIndex[0], 0];
        } else {
            return [selectedValue, selectedItem, selectedIndex, this.lastSelectedColumnIndex];
        }
    }
    _cancelPress(){
        this.props.cancelPress && this.props.cancelPress(...this._generateEventParams());
    }
    _confirmPress(){
        this.props.confirmPress && this.props.confirmPress(...this._generateEventParams());
    }
    _outerPress(){
        this.props.outerPress && this.props.outerPress(...this._generateEventParams());
    }
    _onValueChange(itemValue, itemIndex, columnIndex){
        this.selectedIndex[columnIndex] = itemIndex;
        this.lastSelectedColumnIndex = columnIndex;
        this.setState(prevState => {
            const selectedValue = [...prevState.selectedValue];
            selectedValue[columnIndex] = itemValue;
            return {
                selectedValue,
            };
        });
        this.props.onValueChange && this.props.onValueChange(...this._generateEventParams());
    }
    render(){
        return (
            <Modal visible={this.state.visible} transparent={true} onRequestClose={this._cancelPress}>
                <TouchableWithoutFeedback onPress={this._outerPress}><View style={[styles.mask]}/></TouchableWithoutFeedback>
                <Animated.View style={[styles.pickerContainer, {bottom: this.state.offsetBottom, height: this.pickerHeight}]}>
                    <View style={styles.pickerHeader}>
                        <TouchableOpacity onPress={this._cancelPress}>
                            <View style={styles.headerLeft}><Text style={styles.leftText}>取消</Text></View>
                        </TouchableOpacity>
                        <View style={styles.headerTitle}><Text style={styles.titleText}>{this.props.title || ''}</Text></View>
                        <TouchableOpacity onPress={this._confirmPress}>
                            <View style={styles.headerRight}><Text style={styles.rightText}>确认</Text></View>
                        </TouchableOpacity>
                    </View>
                    <View style={styles.pickerBodyContainer}>
                        {this.columns.map((col, index) => {
                            return (
                                <PickerBodyWrapper
                                    key={index}
                                    index={index}
                                    items={col}
                                    getSelectedIndex={this._getSelectedIndex}
                                    defauleValue={this.state.selectedValue[index]}
                                    onValueChange={this._onValueChange}
                                />
                            );
                        })}
                    </View>
                </Animated.View>
            </Modal>
        );
    }

    _getSelectedIndex(selectedIndex, columnIndex) {
        this.selectedIndex[columnIndex] = selectedIndex;
    }
}

Picker.propTypes = {
    visible: PropTypes.bool,
    items: PropTypes.array,
    defaultValue: PropTypes.string,
    unavailableIndex: PropTypes.array
};

Picker.defaultProps = {
    visible: false,
    items: [],
    unavailableIndex: []
};

const styles = StyleSheet.create({
    mask: {
        width: windowWidth,
        flex: 1,
    },
    pickerContainer: {
        borderWidth: StyleSheet.hairlineWidth,
        borderColor: theme('color_line_b'),
        position: 'absolute',
        width: windowWidth,
        backgroundColor: theme('color_white'),
    },
    pickerHeader: {
        height: 44,
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: theme('color_background_block'),
        borderBottomWidth: StyleSheet.hairlineWidth,
        borderBottomColor: theme('color_line_b'),
    },
    headerTitle: {
        flex: 1,
        height: 44,
        justifyContent: 'center',
        alignItems: 'center',
    },
    headerLeft: {
        height: 44,
        alignSelf: 'flex-start',
        justifyContent: 'center',
        paddingLeft: 16,
        paddingRight: 24,
    },
    headerRight: {
        height: 44,
        alignSelf: 'flex-end',
        justifyContent: 'center',
        paddingLeft: 24,
        paddingRight: 16,
    },
    titleText: {
        fontSize: FontSize.P3,
        color: theme('color_text_body'),
    },
    leftText: {
        color: theme('color_primary_text'),
        fontSize: FontSize.P1
    },
    rightText: {
        color: theme('color_primary_text'),
        fontSize: FontSize.P1
    },
    pickerBodyContainer: {
        flex: 1,
        flexDirection: 'row',
    },
});
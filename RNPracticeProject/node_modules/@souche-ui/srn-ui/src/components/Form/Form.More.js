import React from 'react';
import {
    StyleSheet,
    View,
    Text,
    TouchableOpacity,
} from 'react-native';
import PropTypes from 'prop-types';

import FontSize from '../../const/FontSize';
import theme from '../../theme';
import styleUtil from '../../util/styleUtil';
import Icon from '../Icon';

class FormMore extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            // 是否展开状态
            expand: typeof this.props.expand === 'boolean' ? this.props.expand : this.props.defaultExpand,
        };

        this.onExpandChange = this.onExpandChange.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (typeof nextProps.expand === 'boolean') {
            if (nextProps.expand !== this.props.expand) {
                this.setState({
                    expand: nextProps.expand,
                });
            }
        } else {
            if (nextProps.defaultExpand !== this.props.defaultExpand) {
                this.setState({
                    expand: nextProps.defaultExpand,
                });
            }
        }
    }

    onExpandChange() {
        const onExpandChange = this.props.onExpandChange;

        if (typeof this.props.expand !== 'boolean') {
            // 如果 expand 不是可控的，则由内部管理展开状态
            this.setState(
                prevState => ({
                    expand: !prevState.expand,
                }),
                () => {
                    onExpandChange && onExpandChange(this.state.expand);
                },
            );
        } else {
            // 如果 expand 是可控的，则让组件调用者管理展开状态，内部不做处理
            onExpandChange && onExpandChange(!this.state.expand);
        }
    }

    render() {
        const { expand } = this.state;
        const { children } = this.props;

        return (
            <View>
                <View style={!expand && styles.collapsed}>
                    {React.Children.map(children, (child, i) => {
                        return [
                            child,
                            <View style={styles.divide}/>
                        ];
                    })}
                </View>
                <TouchableOpacity style={styles.trigger} onPress={this.onExpandChange}>
                    <Text style={styles.triggerText}>{expand ? '收起' : '展开更多'}</Text>
                    <Icon type={expand ? Icon.angleUp : Icon.angleDown} />
                </TouchableOpacity>
            </View>
        );
    }
}

FormMore.propTypes = {
    expand: PropTypes.bool,
    defaultExpand: PropTypes.bool,
    onExpandChange: PropTypes.func,
};

FormMore.defaultProps = {
    defaultExpand: false,
};

const styles = styleUtil.create({
    common: {
        divide: {
            backgroundColor: theme('color_line_b'),
            height: StyleSheet.hairlineWidth,
            marginLeft: 16,
        },
        trigger: {
            height: 48,
            flexDirection: 'row',
            justifyContent: 'center',
            alignItems: 'center',
        },
        triggerText: {
            color: theme('color_text_body'),
            fontSize: FontSize.P2,
            marginRight: 8,
        },
        // 隐藏组件的一种方式，可保留组件状态
        collapsed: {
            position: 'absolute',
            left: 9999,
        },
    },
});

export default FormMore;
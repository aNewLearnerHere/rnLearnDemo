import React from 'react';
import {
    Text,
    View,
} from 'react-native';
import PropTypes from 'prop-types';

import FormView from './FormView';
import FormGroup from './Form.Group';
import FormItem from './Form.Item';
import FormMore from './Form.More';

class Form extends React.Component {

    getChildContext() {
        return {
            titleStyle: this.props.itemTitleStyle,
            titleTextStyle: this.props.itemTitleTextStyle,
        };
    }

    render() {
        let isAllGroup = true, isAllItem = true, isAllNotGroup = true, isAllNotItem = true, isCrowd = false;
        const props = this.props;

        const rangedChildren = React.Children.map(props.children, (child, i) => {
            const extraProps = {};

            if (!child) {
                return child;
            }

            // 判断 children 属性是否都是 FormGroup 组件或者都是 FormItem 或 FormMore 组件
            if (child.type !== FormGroup) {
                isAllGroup = false;
            } else {
                isAllNotGroup = false;
            }
            if (child.type !== FormItem && child.type !== FormMore) {
                isAllItem = false;
            } else {
                isAllNotItem = false;
            }

            if (child.type === FormGroup) {
                // 如果 child 是 FormGroup 则处理它的上下间距
                if (child.props.title && i === 0) {
                    // 告诉 child 它是第一项，如果有标题的话前面记得留空间
                    extraProps.crowd = true;
                }
                if (child.props.title && isCrowd) {
                    // 告诉 child 它的前一项有底部说明文字，会显得有点挤，如果有标题的话前面记得留空间
                    extraProps.crowd = true;
                }
                isCrowd = !!child.props.desc;
                if ('crowd' in extraProps) {
                    return React.cloneElement(child, extraProps);
                } else {
                    return child;
                }
            } else {
                return child;
            }
        });

        if (isAllGroup || isAllNotItem && !isAllNotGroup) {
            // 如果都是 FormGroup 组件，则交给 FormGroup 去渲染细节
            // 或者
            // 如果都不是 FormItem 或 FormMore 组件且存在 FormGroup 组件，则交给 FormGroup 去渲染细节
            return <View>{rangedChildren}</View>;
        } else if (isAllItem || isAllNotGroup && !isAllNotItem) {
            // 如果都是 FormItem 或 FormMore 组件，则让 FormView 去渲染细节
            // 或者
            // 如果都不是 FormGroup 组件且存在 FormItem 或 FormMore 组件，则让 FormView 去渲染细节
            return (
                <FormView {...props} crowd={!!props.title} />
            );
        } else if (isAllNotGroup && isAllNotItem) {
            // 如果既没有 FormGroup 也没有 FormItem 或 FormMore, 那就自己玩去吧
            return <View>{props.children}</View>;
        } else {
            // 即有 FormGroup 也有 FormItem 或 FormMore，则给出警告
            console.warn('Form.Group 不能和 Form.Item 同时作为 Form 的直接子元素');
            return null;
        }
    }
}

Form.Group = FormGroup;
Form.More = FormMore;
Form.Item = FormItem;

Form.propTypes = {
    title: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element
    ]),
    desc: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element
    ]),
    itemViewStyle: View.propTypes.style,
    itemTitleTextStyle: Text.propTypes.style,
};

Form.childContextTypes = {
    titleStyle: PropTypes.any,
    titleTextStyle: Text.propTypes.style,
};

export default Form;
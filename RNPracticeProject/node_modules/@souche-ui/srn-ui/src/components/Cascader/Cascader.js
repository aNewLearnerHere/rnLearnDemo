import React from 'react';

import {
    StyleSheet,
    Text,
    View,
    TouchableOpacity,
} from 'react-native';
import PropTypes from 'prop-types';

import FontSize from '../../const/FontSize';
import theme from '../../theme';

import CascaderModel from './CascaderModel';

//使用快捷导航需要固定list的高度
const SECTION_HEIGHT = 28;
const ROW_HEIGHT = 44;

class Cascader extends React.Component {

    constructor(props) {
        super(props);

        this.onScrollBegin1 = this.onScrollBegin1.bind(this);
        this.onScrollBegin2 = this.onScrollBegin2.bind(this);
        this.onScrollBegin3 = this.onScrollBegin3.bind(this);
        this.onBack2 = this.onBack2.bind(this);
        this.onBack3 = this.onBack3.bind(this);
        this.renderHeader1 = this.renderHeader1.bind(this);
        this.renderSection1 = this.renderSection1.bind(this);
        this.renderRow1 = this.renderRow1.bind(this);
        this.renderHeader2 = this.renderHeader2.bind(this);
        this.renderSection2 = this.renderSection2.bind(this);
        this.renderRow2 = this.renderRow2.bind(this);
        this.renderHeader3 = this.renderHeader3.bind(this);
        this.renderSection3 = this.renderSection3.bind(this);
        this.renderRow3 = this.renderRow3.bind(this);
    }

    state = {
        data1: [],
        data2: [],
        data3: [],
        title2: '',
        title3: '',
    }

    componentWillMount() {
        this.getDataPromise1(this.props);
    }

    componentWillReceiveProps(nextProps) {
        this.getDataPromise1(nextProps);
    }

    onSelected() {
        return this.props.onSelected(...arguments);
    }


    //级联第一层
    rowRefs1 = {} //实例引用
    dataCache1 = {} //缓存数据
    selectedRowID1 = null //当前选中的id
    show1 = null //显示下一层的函数
    hide1 = null //隐藏下一层的函数
    selectedRowData1 = null //被选中的行数据
    clearDataSource1 = null //初始化DataSource内的数据

    onScrollBegin1(hide) {
        hide(this.clearDataSource2);
    }
    setClearFunc1(clear) {
        this.clearDataSource1 = clear;
    }
    setHideFunc1(hide) {
        this.hide1 = hide;
    }
    getDataPromise1(props) {
        return Promise.resolve(props.data[0]())
            .then(res => this.setState({data1: res}));
    }
    onPressAll1() {
        this.onSelected(1, { _all: true, name: '全部' });
    }
    onPressSelectRow1(rowData, sectionID, rowID, show, hide) {
        this.selectedRowData1 = rowData;

        if (this.show1 === null) {
            this.show1 = show;
        }
        if (this.hide1 === null) {
            this.hide1 = hide;
        }

        if (typeof this.hide2 === 'function') {
            this.hide2(this.clearDataSource3);
        }
        this.setState({
            title2: rowData.name,
        });

        let stop = this.onSelected(1, this.selectedRowData1);
        if (this.selectedRowID1 && this.selectedRowID1 !== rowID) {
            if (this.rowRefs1[this.selectedRowID1]) {
                this.rowRefs1[this.selectedRowID1].setNativeProps({style: {color: theme('color_text_title')}});
            }
            if (this.rowRefs2[this.selectedRowID2]) {
                this.rowRefs2[this.selectedRowID2].setNativeProps({style: {color: theme('color_text_title')}});
            }
            if (this.rowRefs3[this.selectedRowID3]) {
                this.rowRefs3[this.selectedRowID3].setNativeProps({style: {color: theme('color_text_title')}});
            }
        }

        this.selectedRowID1 = rowID;
        if (this.selectedRowID1 && this.rowRefs1[this.selectedRowID1] && !stop){
            this.rowRefs1[this.selectedRowID1].setNativeProps({style: Object.assign({color: theme('color_primary_text')}, StyleSheet.flatten(this.props.rowTextActiveStyle))});
        }

        if (this.props.data.length > 1 && !stop) {
            show(() => this.getDataPromise2(rowData.name));
        }
    }
    setRowRefs1(ref, id) {
        this.rowRefs1[id] = ref;
    }
    renderHeader1() {
        if (this.props.showAll[0]) {
            return (
                <TouchableOpacity activeOpacity={1} onPress={() => this.onPressAll1()}>
                    <View style={styles.row}>
                        <Text style={styles.rowText}>全部</Text>
                    </View>
                </TouchableOpacity>
            );
        } else {
            return null;
        }
    }
    renderSection1(sectionData, sectionID, show, hide) {
        return (
            <View style={styles.section} onLayout={this.sectionLayout1}>
                <Text style={styles.sectionText} numberOfLines={1}>{sectionData}</Text>
            </View>
        );
    }
    renderRow1(rowData, sectionID, rowID, show, hide) {
        return (
            <TouchableOpacity activeOpacity={1} onPress={() => this.onPressSelectRow1(rowData, sectionID, rowID, show, hide)}>
                <View style={styles.row}>
                    <Text style={styles.rowText} numberOfLines={1} ref={ref => this.setRowRefs1(ref, rowID)}>{rowData.name}</Text>
                </View>
                {rowData.last_row !== true && <View style={styles.seperator} />}
            </TouchableOpacity>
        );
    }


    //级联第二层
    rowRefs2 = {} //实例引用
    dataCache2 = {} //缓存数据
    selectedRowID2 = null //当前选中的id
    show2 = null //显示下一层的函数
    hide2 = null //隐藏下一层的函数
    selectedRowData2 = null //被选中的行数据
    clearDataSource2 = null //初始化DataSource内的数据
    onScrollBegin2(hide) {
        hide(this.clearDataSource3);
    }
    onBack2() {
        this.hide1(this.clearDataSource2);
    }
    setClearFunc2(clear) {
        this.clearDataSource2 = clear;
    }
    setHideFunc2(hide) {
        this.hide2 = hide;
    }
    getDataPromise2() {
        return Promise.resolve(this.props.data[1]())
            .then(res => {
                this.setState({data2: res});
            });
    }
    onPressAll2() {
        this.onSelected(2, this.selectedRowData1, { _all: true, name: '全部' });
    }
    onPressSelectRow2(rowData, sectionID, rowID, show, hide) {
        this.selectedRowData2 = rowData;

        if (this.show2 === null) {
            this.show2 = show;
        }
        if (this.hide2 === null) {
            this.hide2 = hide;
        }
        this.setState({
            title3: rowData.name,
        });

        let stop = this.onSelected(2, this.selectedRowData1, this.selectedRowData2);

        if (this.selectedRowID2 && this.selectedRowID2 !== rowID) {
            if (this.rowRefs2[this.selectedRowID2]){
                this.rowRefs2[this.selectedRowID2].setNativeProps({style: {color: theme('color_text_title')}});
            }
            if (this.rowRefs3[this.selectedRowID3]) {
                this.rowRefs3[this.selectedRowID3].setNativeProps({style: {color: theme('color_text_title')}});
            }
        }

        this.selectedRowID2 = rowID;

        if (this.selectedRowID2 && this.rowRefs2[this.selectedRowID2] && !stop) {
            this.rowRefs2[this.selectedRowID2].setNativeProps({style: Object.assign({color: theme('color_primary_text')}, StyleSheet.flatten(this.props.rowTextActiveStyle))});
        }

        if (this.props.data.length > 2 && !stop) {
            show(() => this.getDataPromise3(rowData.name));
        }
    }
    setRowRefs2(ref, id) {
        this.rowRefs2[id] = ref;
    }
    renderHeader2() {
        if (this.props.showAll[1]) {
            return (
                <TouchableOpacity activeOpacity={1} onPress={() => this.onPressAll2()}>
                    <View style={styles.row}>
                        <Text style={styles.rowText}>全部</Text>
                    </View>
                </TouchableOpacity>
            );
        } else {
            return null;
        }
    }
    renderSection2(sectionData, sectionID, show, hide) {
        return (
            <View style={styles.section}>
                <Text style={styles.sectionText} numberOfLines={1}>{sectionData}</Text>
            </View>
        );
    }
    renderRow2(rowData, sectionID, rowID, show, hide) {
        return (
            <TouchableOpacity activeOpacity={2} onPress={() => this.onPressSelectRow2(rowData, sectionID, rowID, show, hide)}>
                <View style={styles.row}>
                    <Text style={styles.rowText} numberOfLines={1} ref={ref => this.setRowRefs2(ref, rowID)}>{rowData.name}</Text>
                </View>
                {rowData.last_row !== true && <View style={styles.seperator} />}
            </TouchableOpacity>
        );
    }


    //级联第三层
    rowRefs3 = {} //实例引用
    dataCache3 = {} //缓存数据
    selectedRowID3 = null //当前选中的id
    show3 = null //显示下一层的函数
    hide3 = null //隐藏下一层的函数
    selectedRowData3 = null //被选中的行数据
    clearDataSource3 = null //初始化DataSource内的数据
    onScrollBegin3(hide) {
    }
    onBack3() {
        this.hide2(this.clearDataSource3);
    }
    setClearFunc3(clear) {
        this.clearDataSource3 = clear;
    }
    getDataPromise3() {
        return Promise.resolve(this.props.data[2]())
            .then(res => {
                this.setState({data3: res});
            });
    }
    onPressAll3() {
        this.onSelected(3, this.selectedRowData1, this.selectedRowData2, { _all: true, name: '全部' });
    }
    onPressSelectRow3(rowData, sectionID, rowID, show, hide) {
        this.selectedRowData3 = rowData;

        let stop = this.onSelected(3, this.selectedRowData1, this.selectedRowData2, this.selectedRowData3);

        if (this.selectedRowID3 && this.rowRefs3[this.selectedRowID3]) {
            this.rowRefs3[this.selectedRowID3].setNativeProps({style: {color: theme('color_text_title')}});
        }

        this.selectedRowID3 = rowID;

        if (this.selectedRowID3 && this.rowRefs3[this.selectedRowID3] && !stop){
            this.rowRefs3[this.selectedRowID3].setNativeProps({style: Object.assign({color: theme('color_primary_text')}, StyleSheet.flatten(this.props.rowTextActiveStyle))});
        }

        if (this.props.data.length > 3 && !stop) {
            show();
        }
    }
    setRowRefs3(ref, id) {
        this.rowRefs3[id] = ref;
    }
    renderHeader3() {
        if (this.props.showAll[2]) {
            return (
                <TouchableOpacity activeOpacity={1} onPress={() => this.onPressAll3()}>
                    <View style={styles.row}>
                        <Text style={styles.rowText}>全部</Text>
                    </View>
                </TouchableOpacity>
            );
        } else {
            return null;
        }
    }
    renderSection3(sectionData, sectionID, show, hide) {
        return (
            <View style={styles.section}>
                <Text style={styles.sectionText} numberOfLines={1}>{sectionData}</Text>
            </View>
        );
    }
    renderRow3(rowData, sectionID, rowID, show, hide) {
        return (
            <TouchableOpacity activeOpacity={3} style={styles.rowWrapper} onPress={() => this.onPressSelectRow3(rowData, sectionID, rowID, show, hide)}>
                <View style={styles.row}>
                    <Text style={styles.rowText} numberOfLines={1} ref={ref => this.setRowRefs3(ref, rowID)}>{rowData.name}</Text>
                </View>
                {rowData.last_row !== true && <View style={styles.seperator} />}
            </TouchableOpacity>
        );
    }

    render() {
        return (
            <CascaderModel
                data={this.state.data1}
                renderHeader={this.renderHeader1}
                renderSection={this.renderSection1}
                renderRow={this.renderRow1}
                onScrollBegin={this.onScrollBegin1}
                spitOutClearFunc={this.setClearFunc1}
                spitOutHideFunc={this.setHideFunc1}
                level={1}
                quickNavigation={false}
                navTextStyle={this.props.navTextStyle}
                sectionHeight={SECTION_HEIGHT}
                rowHeight={ROW_HEIGHT}
            >
                <CascaderModel
                    data={this.state.data2}
                    title={this.state.title2}
                    renderHeader={this.renderHeader2}
                    renderSection={this.renderSection2}
                    renderRow={this.renderRow2}
                    onScrollBegin={this.onScrollBegin2}
                    onBack={this.onBack2}
                    spitOutClearFunc={this.setClearFunc2}
                    spitOutHideFunc={this.setHideFunc2}
                    level={2}
                >
                    <CascaderModel
                        data={this.state.data3}
                        title={this.state.title3}
                        renderHeader={this.renderHeader3}
                        renderSection={this.renderSection3}
                        renderRow={this.renderRow3}
                        onScrollBegin={this.onScrollBegin3}
                        onBack={this.onBack3}
                        spitOutClearFunc={this.setClearFunc3}
                        level={3}
                    />
                </CascaderModel>
            </CascaderModel>
        );
    }
}

Cascader.propTypes = {
    onSelected: PropTypes.func,
    showAll: PropTypes.arrayOf(PropTypes.bool),
    data: PropTypes.array.isRequired,
    rowTextActiveStyle: Text.propTypes.style,
    navTextStyle: Text.propTypes.style
};

Cascader.defaultProps = {
    onSelected: function() {},
    showAll: [false, false, false],
};

const styles = StyleSheet.create({
    section: {
        backgroundColor: theme('color_background_page'),
        flexDirection: 'row',
        justifyContent: 'flex-start',
        alignItems: 'center',
        paddingLeft: 16,
        height: SECTION_HEIGHT
    },
    sectionText: {
        color: theme('color_text_body'),
        fontSize: FontSize.P3,
    },
    rowWrapper: {
    },
    row: {
        backgroundColor: theme('color_white'),
        justifyContent: 'flex-start',
        alignItems: 'center',
        paddingLeft: 16,
        flexDirection: 'row',
        height: ROW_HEIGHT,
    },
    rowText: {
        color: theme('color_text_title'),
        fontSize: FontSize.P1,
    },
    seperator: {
        marginLeft: 16,
        height: StyleSheet.hairlineWidth,
        backgroundColor: theme('color_line_b'),
    },
});

export default Cascader;

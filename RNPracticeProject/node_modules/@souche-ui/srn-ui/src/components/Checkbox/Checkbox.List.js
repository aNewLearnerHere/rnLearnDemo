import React from 'react';
import {
    View,
    Text,
    TouchableHighlight,
    StyleSheet,
    Platform
} from 'react-native';
import PropTypes from 'prop-types';

import FontSize from '../../const/FontSize';
import theme from '../../theme';
import Checkable from './Checkable';
import Icon from '../Icon';

function CheckboxList(props) {
    const {title, options, disabled: disabledProp} = props;
    let {separator} = props;
    if (separator === null) {
        separator = React.cloneElement(divider, {
            style: [styles.divide, styles.transparentDivide]
        });
    }

    return (
        // 同 Checkbox.Group
        <Checkable {...props}>
            {({value, onChange}) => {
                return (
                    <View style={title && styles.listView}>
                        {title ? <Text style={styles.listTitle}>{title}</Text> : null}
                        {options.map((option, i) => {
                            const disabled = option.disabled || disabledProp;
                            return renderItem(value, onChange, options, option, i, disabled, separator);
                        })}
                    </View>
                );
            }}
        </Checkable>
    );
}

function renderItem(value, onChange, options, option, index, disabled, separator) {
    const desc = option.desc || option.subtitle; // 这里兼容旧版 subtitle 的用法
    const isSelected = value.includes(option.value);

    return (
        <View key={index} style={styles.itemStyle}>
            {index !== 0 ? separator : null}
            <TouchableHighlight
                style={styles.wrapper}
                underlayColor={theme('color_press')}
                disabled={disabled}
                onPress={selected => onChange(!isSelected, option, options)}
            >
                <View>
                    {/* 主要部分，包含 checkbox 和选项主要文案（label） */}
                    {/* 在设置了选项说明文案（desc）时，要给此部分加上额外的上边距 */}
                    <View style={[styles.row, desc && styles.labelRow]}>
                        {/* Check Icon */}
                        {
                            // 根据选项的值与组件的值比较，决定显示什么图标
                            isSelected ?
                                <Icon
                                    key={Platform.OS === 'ios' ? Icon.checkCircle : '0'} // 处理 iOS 图片切换 bug
                                    type={Icon.checkCircle}
                                    color={disabled ? theme('color_text_hint') : theme('color_primary')}
                                    size="xl"
                                    style={styles.checkbox}
                                /> :
                                <Icon
                                    key={Platform.OS === 'ios' ? (disabled ? Icon.circleDisabled : Icon.circle) : '0'} // 处理 iOS 图片切换 bug
                                    type={disabled ? Icon.circleDisabled : Icon.circle}
                                    size="xl"
                                    style={styles.checkbox}
                                />
                        }
                        {/* 选项主要文案（label） */}
                        {/* 没有设置选项说明文案（desc）的时候，给主要文案加上垂直方向的外边距 */}
                        <View style={[styles.textWrapper, !desc && styles.noDescTextWrapper]}>
                            {
                                typeof option.label === 'string' ?
                                    <Text style={[styles.labelText, disabled && styles.textDisabled]}>{option.label}</Text> :
                                    React.cloneElement(option.label, { disabled, selected: isSelected })
                            }
                        </View>
                    </View>
                    {/* 次要部分，包含选项说明文案 */}
                    {desc ? <View style={[styles.row, styles.descRow]}>
                        {/* 选项说明文案（desc） */}
                        <View style={[styles.textWrapper, styles.descWrapper, styles.placeholder]}>
                            {
                                typeof option.label === 'string' ?
                                    <Text style={[styles.descText, disabled && styles.textDisabled]}>{desc}</Text> :
                                    React.cloneElement(desc, { disabled, selected: isSelected })
                            }
                        </View>
                    </View> : null}
                </View>
            </TouchableHighlight>
        </View>
    );
}

const styles = StyleSheet.create({
    itemStyle: {
        minHeight: 48,
        backgroundColor: theme('color_white'),
    },
    wrapper: {
        paddingHorizontal: 16,
    },
    row: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    labelRow: {
        marginTop: 11,
    },
    descRow: {
        marginTop: 6,
        marginBottom: 15,
    },
    divide: {
        backgroundColor: theme('color_line_b'),
        height: StyleSheet.hairlineWidth,
        marginLeft: 16,
    },
    transparentDivide: {
        opacity: 0,
    },
    textWrapper: {
        flex: 1,
        flexShrink: 1,
    },
    noDescTextWrapper: {
        marginVertical: 15,
    },
    labelText: {
        color: theme('color_text_title'),
        fontSize: FontSize.P1,
        lineHeight: 18,
    },
    descText: {
        color: theme('color_text_body'),
        fontSize: FontSize.P2,
        lineHeight: 16,
    },
    textDisabled: {
        color: theme('color_text_body'),
    },
    checkbox: {
        marginRight: 12,
    },
    placeholder: {
        marginLeft: 36,
    },
    // 以下两条样式是为了兼容原来的用法，只有在设置了 title 的时候才生效
    listView: {
        marginVertical: 12,
    },
    listTitle: {
        marginBottom: 8,
        marginLeft: 16,
        fontSize: FontSize.P2,
        color: theme('color_text_caption'),
    },
});

const divider = <View style={styles.divide}/>;

CheckboxList.propTypes = {
    /**
     * title 将在未来版本去掉
     */
    title: PropTypes.string,
    value: PropTypes.array,
    defaultValue: PropTypes.array,
    disabled: PropTypes.bool,
    options: PropTypes.array,
    separator: PropTypes.element,
    onChange: PropTypes.func,
};

CheckboxList.defaultProps = {
    defaultValue: [],
    disabled: false,
    options: [],
    separator: divider,
};

export default CheckboxList;
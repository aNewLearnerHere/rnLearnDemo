import React from 'react';
import {
    View,
    TouchableWithoutFeedback,
    Text,
    Platform,
} from 'react-native';
import PropTypes from 'prop-types';

import styleUtil from '../../util/styleUtil';
import theme from '../../theme';
import Icon from '../Icon';
import CheckboxGroup from './Checkbox.Group';
import CheckboxList from './Checkbox.List';
import CheckboxTag from './Checkbox.Tag';

class Checkbox extends React.Component {
    static Group = CheckboxGroup;
    static List = CheckboxList;
    static Tag = CheckboxTag;

    constructor(props) {
        super(props);

        this.state = {
            checked: typeof props.checked === 'boolean' ? props.checked : props.defaultChecked,
        };

        this.onChange = this.onChange.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (typeof nextProps.checked === 'boolean') {
            if (nextProps.checked !== this.props.checked) {
                this.setState({
                    checked: nextProps.checked,
                });
            }
        } else {
            if (nextProps.defaultChecked !== this.props.defaultChecked) {
                this.setState({
                    checked: nextProps.defaultChecked,
                });
            }
        }
    }

    onChange() {
        const onChange = this.props.onChange;

        if (typeof this.props.checked !== 'boolean') {
            // 如果 checked 不是可控的，则由内部管理选中状态
            this.setState(
                prevState => ({
                    checked: !prevState.checked,
                }),
                () => {
                    onChange && onChange(this.state.checked);
                },
            );
        } else {
            // 如果 checked 是可控的，则让组件调用者管理选中状态，内部不做处理
            onChange && onChange(!this.state.checked);
        }
    }

    render() {
        const checked = this.state.checked;
        const { disabled, children } = this.props;
        const extraProps = {};
        let iconType = checked ? Icon.checkCircle : Icon.circle;
        if (disabled && iconType === Icon.circle) {
            // 在未选中图标后面加上 Disalbed 就变成了对应的禁用图标
            iconType += 'Disabled';
        }
        if (Platform.OS === 'ios') {
            // 处理 iOS 图片切换 bug
            extraProps.key = iconType;
        }

        return (
            <TouchableWithoutFeedback onPress={this.onChange} disabled={disabled}>
                <View style={styles.container}>
                    <Icon {...extraProps} type={iconType} size="xl" color={checked ? (disabled ? theme('color_text_hint') : theme('color_primary')) : null} />
                    {children ? <Text style={[styles.label, { color: disabled ? theme('color_text_caption') : theme('color_text_title') }]}>{children}</Text> : null}
                </View>
            </TouchableWithoutFeedback>
        );
    }
}

Checkbox.propTypes = {
    checked: PropTypes.bool,
    defaultChecked: PropTypes.bool,
    disabled: PropTypes.bool,
    onChange: PropTypes.func,
};

Checkbox.defaultProps = {
    defaultChecked: false,
    disabled: false,
};

const styles = styleUtil.create({
    common: {
        container: {
            flexDirection: 'row',
            alignItems: 'center',
        },
        label: {
            flexShrink: 1,
            marginLeft: 4,
        },
    }
});

export default Checkbox;
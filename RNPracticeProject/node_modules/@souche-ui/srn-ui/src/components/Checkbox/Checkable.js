import React from 'react';
import PropTypes from 'prop-types';

class Checkable extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            value: this.getFixedValue(props),
        };
        // 保存选中的 option
        this.selected = [];

        this.handleSelect = this.handleSelect.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.value !== undefined) {
            if (nextProps.value !== this.props.value) {
                this.setState({
                    value: nextProps.value,
                });
            }
        } else {
            if (nextProps.defaultValue !== this.props.defaultValue) {
                this.setState({
                    value: nextProps.defaultValue,
                });
            }
        }
    }

    getFixedValue(props) {
        if (props.value !== undefined) {
            return props.value || [];
        } else {
            return props.defaultValue;
        }
    }

    getNextValue(prevState, selected, option) {
        if (selected) {
            // 返回添加了此元素且不重复的数组
            return Array.from(new Set(prevState.value).add(option.value));
        } else {
            // 返回不包含此元素的 value
            return prevState.value.filter(n => n !== option.value);
        }
    }

    handleSelect(selected, option, options) {
        const onChange = this.props.onChange;

        if (this.props.value === undefined) {
            // 如果 value 不是可控的，则由内部管理选中状态
            this.setState(
                prevState => {
                    const nextValue = this.getNextValue(prevState, selected, option);
                    this.selected = options.filter(o => nextValue.includes(o.value));
                    return {
                        value: nextValue,
                    };
                },
                () => {
                    onChange && onChange(this.state.value, this.selected, option.value, Object.assign({}, option), selected);
                },
            );
        } else {
            // 如果 value 是可控的，则让组件调用者管理选中状态，内部不做处理
            const nextValue = this.getNextValue(this.state, selected, option);
            this.selected = options.filter(o => nextValue.includes(o.value));
            onChange && onChange(nextValue, this.selected, option.value, Object.assign({}, option), selected);
        }
    }

    render() {
        // 这里 children 是一个函数
        // 这样写的目的是方便实现类能复用 Checkable 的 check 算法，各自实现 UI
        return this.props.children({
            value: this.state.value,
            onChange: this.handleSelect,
        });
    }
}

Checkable.propTypes = {
    value: PropTypes.array,
    defaultValue: PropTypes.array,
    onChange: PropTypes.func,
};

Checkable.defaultProps = {
    defaultSelected: false,
};

export default Checkable;
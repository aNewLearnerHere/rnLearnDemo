import React from 'react';
import {
    Text,
    View,
    StyleSheet,
    TouchableOpacity,
    Animated,
    Dimensions,
    Platform,
} from 'react-native';
import PropTypes from 'prop-types';
import _ from 'lodash';

import FontSize from '../../const/FontSize';
import theme from '../../theme';
import Icon from '../Icon';
import Counter from './Counter';

const SCREEN_HEIGHT = Dimensions.get('window').height;

class Filter extends React.PureComponent {
    constructor(props) {
        super(props);

        this.value = this.getCloneValue(props.defaultValue);
        this.state = {
            // 当前激活的筛选项 key
            activeKey: '',
            // 存放每个筛选项选择结果的对象
            value: this.getCloneValue(props.defaultValue),
        };


        this.handleBackdropPress = this.handleBackdropPress.bind(this);
        this.handleDropdownLayout = this.handleDropdownLayout.bind(this);
        this.renderItem = this.renderItem.bind(this);

        this.triggeInit(this.props);
    }

    // 和 state 中的 value 始终保持同步，用于 onChange 事件被触发时将数据传给外部调用者
    value = {};
    childRefs = {};
    dropdownHeight = SCREEN_HEIGHT;
    childHeight = {};
    childAnimatedValue = {};
    backdropAnimatedValue = null;

    componentWillReceiveProps(nextProps) {
        if (nextProps.itemConfig !== this.props.itemConfig) {
            this.triggeInit(nextProps);
        }
        if (nextProps.defaultValue !== this.props.defaultValue) {
            this.value = this.getCloneValue(nextProps.defaultValue);
            this.setState({
                value:this.getCloneValue(nextProps.defaultValue),
            });
        }
    }

    componentWillMount() {
        this.backdropAnimatedValue = new Animated.Value(0);
        this.props.itemConfig.forEach(item => {
            this.childAnimatedValue[item.key] = new Animated.Value(0);
        });
    }

    /**
     * 深克隆 value 属性
     */
    getCloneValue(value) {
        return value ? _.cloneDeep(value) : {};
    }

    /**
     * 设置下拉部分 backdrop 的 animated value
     * @param {number} value 动画值
     * @param {boolean} animated 是否启用动画过程
     */
    setBackdropAnimatedValue(value, animated = true) {
        if (animated) {
            Animated.timing(
                this.backdropAnimatedValue,
                {
                    toValue: value,
                    duration: 50,
                }
            ).start();
        } else {
            this.backdropAnimatedValue.setValue(value);
        }
    }

    /**
     * 设置下拉部分组件的 animated value
     * @param {string} key 筛选项 key
     * @param {number} value 动画值
     * @param {boolean} animated 是否启用动画过程
     */
    setChildAnimatedValue(key, value, animated = true) {
        if (animated) {
            Animated.timing(
                this.childAnimatedValue[key],
                {
                    toValue: value,
                    duration: 300,
                }
            ).start();
        } else {
            this.childAnimatedValue[key].setValue(value);
        }
    }

    /**
     * 判断指定的筛选项是否是显示状态
     * @param {string} key 筛选项 key
     */
    isItemShow(key) {
        return this.state.activeKey === key;
    }

    /**
     * 显示指定的筛选项下拉部分，处理了点击筛选项为激活的情况
     * @param {*} item 筛选项配置对象或者配置项的 key
     */
    showItem(item) {
        if (typeof item === 'string') {
            // 如果根据 key 调用此函数，需要根据 key 获取到配置项对象
            this.props.itemConfig.some(_item => {
                if (_item.key === item) {
                    item = _item;
                    return true;
                }
            });
            if (typeof item === 'string') {
                console.warn(`showItem('${item}')，找不到指定 key 的配置项`);
                return;
            }
        }
        this.setState(prevState => {
            // shouldShow 表示 showItem 后是否需要显示下拉部分
            // 在没有配置 selector 或者点击了已经激活的筛选项的情况下
            const shouldShow = item.renderComponent && prevState.activeKey !== item.key;
            if (prevState.activeKey) {
                // 显示前如果有显示的下拉浮层，需要先让其隐藏
                if (shouldShow) {
                    this.setChildAnimatedValue(prevState.activeKey, 0);
                } else {
                    this.setChildAnimatedValue(prevState.activeKey, 0, false);
                }
            }
            return {
                activeKey: shouldShow ? item.key : '',
            };
        }, () => {
            if (this.state.activeKey) {
                // 显示下拉部分
                this.setBackdropAnimatedValue(1);
                this.setChildAnimatedValue(item.key, this.childHeight[item.key]);
                this.backdropRef.setNativeProps({pointerEvents: 'auto'});
            } else {
                // 隐藏 backdrop
                this.setBackdropAnimatedValue(0, false);
                this.backdropRef.setNativeProps({pointerEvents: 'none'});
            }
        });
    }

    /**
     * 隐藏筛选项下拉部分
     */
    hideItem() {
        this.setState(prevState => {
            if (prevState.activeKey) {
                this.setChildAnimatedValue(prevState.activeKey, 0, false);
            }
            return { activeKey: '' };
        }, () => {
            this.setBackdropAnimatedValue(0, false);
            this.backdropRef.setNativeProps({pointerEvents: 'none'});
        });
    }

    /**
     * 触发初始化事件（onInit）
     */
    triggeInit(props) {
        props.itemConfig.forEach(item => {
            item.onInit && item.onInit(null, this.state.value[item.key], (value) => {
                this.handleSelectorSelect(item, value);
            });
        });
    }

    /**
     * 下拉部分 backdrop 点击事件处理函数
     * 隐藏下拉部分
     */
    handleBackdropPress() {
        this.hideItem();
    }

    /**
     * 下拉部分 layout 事件处理函数
     * 调整下拉部分的初始位置
     */
    handleDropdownLayout({ nativeEvent: { layout: { height } } }) {
        this.dropdownHeight = height;
        Object.keys(this.childRefs).forEach(key => {
            this.childRefs[key].setNativeProps({
                style: { bottom: this.dropdownHeight }
            });
        });
    }

    /**
     * selector 的 layout 事件处理函数
     * 计算 selector 所占高度
     */
    handleSelectorLayout = (height, key) => {
        if (!this.childRefs[key]) {
            return;
        }
        this.childHeight[key] = height;
        const isFullHeight = this.props.itemConfig.some(item => item.key === key && item.fullHeight);
        if (isFullHeight) {
            this.childRefs[key].setNativeProps({style: {
                height: this.dropdownHeight,
            }});
        }
    };

    /**
     * selector 的 select 事件处理函数
     * 更新 value 并触发整个 filter 组件的 onChange 事件
     * @param {*} item 筛选项配置
     * @param {*} value 选择结果
     */
    handleSelectorSelect(item, value) {
        const { onChange } = this.props;
        if (value === null) {
            delete this.value[item.key];
        } else {
            this.value[item.key] = value;
        }
        this.setState(prevState => ({
            value: Object.assign({}, prevState.value, {[item.key]: value})
        }));
        // 深克隆，防止外部修改 value 对象对组件内部造成影响
        onChange && onChange(_.cloneDeep(this.value), item.key);
    }

    /**
     * 渲染 bar 上的筛选按钮
     * @param {*} item 筛选项配置
     * @param {*} i 筛选项索引
     */
    renderItem(item, i) {
        const { showSelectedArrow, hideSpan } = this.props;
        const isActive = this.state.activeKey === item.key;
        const itemValue = this.state.value[item.key];
        const isSelected = !!itemValue;
        const title = !item.extra && isSelected && item.extractTitle && item.extractTitle(itemValue) || item.title;
        const count = item.extractCount && item.extractCount(itemValue) || 0;
        const itemEl = (
            <TouchableOpacity
                key={item.key}
                activeOpacity={1}
                style={styles.itemWrapper}
                onPress={(e) => {
                    this.showItem(item);
                    item.onPress && item.onPress(e, itemValue, (value) => {
                        this.handleSelectorSelect(item, value);
                    });
                }}
            >
                <View style={styles.item}>
                    {/* title */}
                    <Text
                        style={[styles.text, isActive && styles.activeText]}
                        numberOfLines={1}
                        ellipsizeMode="middle"
                    >{title}</Text>
                    {/* 条件计数器 */}
                    {count !== 0 ? <Counter
                        style={styles.counter}
                        tintColor={isActive && theme('color_primary')}
                    >{count}</Counter> : null}
                    {/* 正常模式下的 icon */}
                    {!item.extra && (showSelectedArrow || !isSelected) ? <Icon
                        style={styles.arrowIcon}
                        type={isActive ? Icon.caretUp : Icon.caretDown}
                        size={8}
                        color={isActive ? theme('color_primary') : theme('color_text_title')}
                    /> : null}
                    {/* extra 模式下的 icon */}
                    {item.extra && (count === 0) ? <Icon
                        style={styles.filterIcon}
                        type={Icon.filter}
                        size={16}
                        color={isActive ? theme('color_primary') : theme('color_text_title')}
                    /> : null}
                </View>
            </TouchableOpacity>
        );
        if (i === 0 || hideSpan) {
            return itemEl;
        } else {
            return [<View style={styles.span} />, itemEl];
        }
    }

    /**
     * 渲染 selector components
     * @param {*} item 筛选项配置
     */
    renderSelector(item) {
        if (!item.renderComponent) {
            return null;
        }
        const selectorCmp = item.renderComponent(this.state.value[item.key], (value) => {
            this.hideItem();
            this.handleSelectorSelect(item, value);
        });
        if (React.isValidElement(selectorCmp)) {
            return selectorCmp;
        } else {
            return null;
        }
    }

    /**
     * 渲染下拉部分，包含一个 backdrop 和筛选项对应的 selector components
     */
    renderDropdown() {
        const { itemConfig } = this.props;
        return (
            <Animated.View
                ref={c => { this.backdropRef = c; }}
                pointerEvents={'none'}
                onLayout={this.handleDropdownLayout}
                style={[styles.backdrop,
                    {
                        backgroundColor: this.backdropAnimatedValue.interpolate({
                            inputRange: [0, 1],
                            outputRange: ['rgba(0, 0, 0, 0)', theme('color_mask')]
                        })
                    }
                ]}
            >
                {/* backdrop */}
                <TouchableOpacity activeOpacity={1} style={styles.backdropTouchable} onPress={this.handleBackdropPress} />
                {/* selector components */}
                {itemConfig.map(item => {
                    return (
                        <Animated.View
                            key={item.key}
                            ref={ref => { this.childRefs[item.key] = ref; }}
                            onLayout={(e) => this.handleSelectorLayout(e.nativeEvent.layout.height, item.key)}
                            style={[
                                styles.selector,
                                {
                                    transform: [{translateY: this.childAnimatedValue[item.key]}]
                                }
                            ]}
                        >
                            {this.renderSelector(item)}
                        </Animated.View>
                    );
                })}
            </Animated.View>
        );
    }

    render() {
        const { children, itemConfig } = this.props;

        return (
            <View style={styles.container}>
                {/* bar */}
                <View style={styles.itemContainer}>
                    {itemConfig.map(this.renderItem)}
                </View>
                {/* 内容部分，如列表，由使用者自定义 */}
                {children}
                {/* 下拉部分，Android 系统限制，浮层必须放在内容的后面 */}
                {this.renderDropdown()}
            </View>
        );
    }
}

Filter.propTypes = {
    itemConfig: PropTypes.arrayOf(
        PropTypes.shape({
            key: PropTypes.string.isRequired,
            extra: PropTypes.bool,
            title: PropTypes.string.isRequired,
            onInit: PropTypes.func,
            renderComponent: PropTypes.func,
            onPress: PropTypes.func,
            extraTitle: PropTypes.func,
        })
    ).isRequired,
    showSelectedArrow: PropTypes.bool,
    defaultValue: PropTypes.object,
    onChange: PropTypes.func,
    hideSpan: PropTypes.bool,
};
Filter.defaultProps = {
    itemConfig: [],
    showSelectedArrow: false,
    hideSpan: false,
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        position: 'relative',
        overflow: 'hidden',
    },
    // bar 部分
    itemContainer: {
        backgroundColor: theme('color_white'),
        borderBottomWidth: StyleSheet.hairlineWidth,
        borderBottomColor: theme('color_line_b'),
        flexDirection: 'row',
        alignItems: 'center',
        ...Platform.select({
            ios: {
                zIndex: 1,
            },
        }),
    },
    itemWrapper: {
        flex: 1,
        height: 44,
    },
    item: {
        flex: 1,
        paddingHorizontal: 10,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
    },
    span: {
        width: StyleSheet.hairlineWidth,
        height: 14,
        backgroundColor: theme('color_text_hint'),
    },
    text: {
        fontSize: FontSize.P2,
        color: theme('color_text_title'),
    },
    activeText: {
        color: theme('color_primary_text'),
    },
    arrowIcon: {
        marginLeft: 8,
    },
    filterIcon: {
        marginLeft: 4,
    },
    counter: {
        alignSelf: 'flex-end',
        marginBottom: 24,
    },
    // 下拉部分
    backdrop: {
        ...StyleSheet.absoluteFillObject,
        top: 44 + (Platform.OS === 'ios' ? 0 : StyleSheet.hairlineWidth),
    },
    backdropTouchable: {
        position: 'relative',
        flex: 1,
    },
    selector: {
        position: 'absolute',
        left: 0,
        right: 0,
        bottom: SCREEN_HEIGHT,
        overflow: 'hidden',
    },
});

export default Filter;
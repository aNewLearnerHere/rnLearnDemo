import React from 'react';
import { View, StyleSheet } from 'react-native';

import Tip from '../Tip';

import wrap from './util/wrap';

import EmitterTimeout from './util/EmitterTimeout';

const styles = StyleSheet.create({
    container: {
        position: 'absolute'
    }
});

class EmitterWrapper extends React.Component {

    state = {
        tips: [],
    };
    tipRefs = {};
    position = {};
    positionByTarget = {};

    componentWillMount() {
        const { emitter } = this.props;
        emitter.removeAllListeners('init');
        emitter.on('init', tips => {
            this.setState({ tips }, () => {
                this.state.tips.map(el => {
                    if (this.tipRefs[el.key]) {
                        this.position[el.key] && this.tipRefs[el.key].setPosition(this.position[el.key]);
                        this.positionByTarget[el.key] && this.tipRefs[el.key].setPositionByTarget(this.positionByTarget[el.key]);
                    }
                });
            });
        });
        emitter.removeAllListeners('setPosition');
        emitter.on('setPosition', (key, pos) => {
            this.position[key] = pos;
            this.tipRefs[key] && this.tipRefs[key].setPosition(pos);
        });
        emitter.removeAllListeners('setPositionByTarget');
        emitter.on('setPositionByTarget', (key, targetPos) => {
            this.positionByTarget[key] = targetPos;
            this.tipRefs[key] && this.tipRefs[key].setPositionByTarget(targetPos);
        });
        emitter.removeAllListeners('hide');
        emitter.on('hide', (key) => {
            this.tipRefs[key] && this.tipRefs[key].setPosition({x: -1000, y: -1000});
        });
    }

    render() {
        return (
            <View style={styles.container}>
                {this.state.tips.map(el => {
                    return <this.props.component key={el.key} ref={c => { this.tipRefs[el.key] = c; }} {...el} />;
                })}
            </View>
        );
    }
}

export default function tip(target, key, descriptor) {

    const emitter = new EmitterTimeout();

    const _ = wrap(target, function() {
        return <EmitterWrapper component={Tip} emitter={emitter}/>;
    });

    _.prototype.tip = {
        init(tips) {
            return emitter.emit('init', tips);
        },
        setPosition(tipKey, pos) {
            return emitter.emit('setPosition', tipKey, pos);
        },
        setPositionByTarget(tipKey, targetPos) {
            return emitter.emit('setPositionByTarget', tipKey, targetPos);
        },
        hide(tipKey) {
            return emitter.emit('hide', tipKey);
        }
    };

    return _;
}

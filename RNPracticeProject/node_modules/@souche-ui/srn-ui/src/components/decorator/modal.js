import React from 'react';

import Modal from '../Modal';

import wrap from './util/wrap';

import EmitterTimeout from './util/EmitterTimeout';

class EmitterWrapper extends React.Component {

    defaultModal = { title: '' };

    state = {
        visible: false,
        modal: this.defaultModal
    };

    isFree = true;
    emitterDataPool = [];

    handleClose = (e) => {
        if (this.emitterDataPool.length > 0) {
            const data = this.emitterDataPool.shift();
            this.setState({
                visible: true,
            });
            setTimeout(() => this.setState({
                modal: Object.assign({}, this.defaultModal, data)
            }), 0);
        } else {
            this.setState({
                visible: false,
            });
            this.isFree = true;
        }
    };

    componentWillMount() {
        this.props.emitter.removeAllListeners('modal');
        this.props.emitter.on('modal', data => {
            if (this.isFree === true) {
                this.isFree = false;
                this.setState({
                    visible: true,
                });
                this.setState({
                    modal: Object.assign({}, this.defaultModal, data)
                });
            } else if (this.isFree === false) {
                this.emitterDataPool.push(data);
            }
        });
    }

    render() {
        return <this.props.component visible={this.state.visible} onClose={this.handleClose} {...this.state.modal} />;
    }
}

export default function modal(target, key, descriptor) {

    const emitter = new EmitterTimeout();

    const _ = wrap(target, function() {
        return <EmitterWrapper component={Modal} emitter={emitter}/>;
    });

    _.prototype.modal = function(option) {
        return emitter.emit('modal', option);
    };

    return _;
}

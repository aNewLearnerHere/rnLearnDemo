import React from 'react';
import {
    View,
    Text,
    TouchableHighlight,
} from 'react-native';
import PropTypes from 'prop-types';

import theme from '../../theme';
import Icon from '../Icon';
import styleUtil from '../../util/styleUtil';
import commonStyles from './styles/index.style';

const styles = styleUtil.create({
    common: commonStyles,
});


class ListItem extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            index: props.index,     //ListItem在所在List中的索引
            title: props.title,     //标题内容
            subtitle: props.subtitle,       //副标题内容
            icon: props.icon,       //图标
            extra: props.extra,     //右侧内容
            extraColor: props.extraColor,       //右侧内容颜色（该属性仅在extra为stirng时生效）
            arrow: props.arrow,     //箭头方向(右,上,下), 可选 right , up , down
            disabled: props.disabled,       //禁用状态
            style: props.style,     //ListItem样式
            itemStyle: props.itemStyle,     //List组件内部每一项容器的样式
            onPress: props.onPress,     //点击事件回调
            subtitleStyle: props.subtitleStyle, //副标题样式
            titleStyle: props.titleStyle,   //标题样式
        };
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            index: nextProps.index,
            title: nextProps.title,
            subtitle: nextProps.subtitle,
            icon: nextProps.icon,
            extra: nextProps.extra,
            extraColor: nextProps.extraColor,
            arrow: nextProps.arrow,
            disabled: nextProps.disabled,
            style: nextProps.style,
            itemStyle: nextProps.itemStyle,
            onPress: nextProps.onPress,
            subtitleStyle: nextProps.subtitleStyle,
            titleStyle: nextProps.titleStyle,
        });
    }

    render() {
        return (
            <TouchableHighlight activeOpacity={1} underlayColor={theme('color_press')} onPress={this.state.onPress}>
                <View style={this.state.style || [styles.itemView, this.state.itemStyle, this.state.index === 0 && {
                    borderTopWidth: 0,
                    borderTopColor: 'transparent'
                }]}>
                    <View
                        style={[(this.state.subtitle || (this.state.icon && this.state.icon.props && this.state.icon.props.size && this.state.icon.props.size === 'xl')) ? styles.highContainer : styles.container]}>
                        <View style={styles.left}>
                            {this.state.icon &&
                            <ItemIcon style={styles.itemIcon} iconType={typeof this.state.icon} state={this.state}
                                      props={this.props}/>}
                            <View>
                                <Text
                                    style={[styles.title, this.state.titleStyle, this.state.disabled && styles.disabled]}>{this.props.title}</Text>
                                {this.state.subtitle && <Text
                                    style={[styles.subtitle, this.state.subtitleStyle, this.state.disabled && styles.disabled]}>{this.state.subtitle}</Text>}
                            </View>
                        </View>
                        <ExtraElement extraType={typeof this.state.extra} state={this.state} props={this.props}/>
                    </View>
                </View>
            </TouchableHighlight>
        );
    }
}

/**
 * extra右侧内容属性
 *
 * @param {string/React.Element} extraType extra类型
 * @param {Object} state 父组件的state属性
 * @param {Object} props 父组件的props属性
 * @return {React.Element} 返回React.Element组件
 */
const ExtraElement = ({extraType, state, props}) => {
    // 传入字符串
    if (extraType === 'string') {
        return (
            <View style={styles.right}>
                <View style={styles.flexGhost}/>
                <Text
                    numberOfLines={1}
                    style={[
                        styles.extraColor,
                        state.extraColor && {color: state.extraColor},
                        state.disabled && styles.disabled
                    ]}
                >
                    {props.extra}
                </Text>
                {state.arrow === 'right' && <Icon type={'angleRight'} size={16}/>}
                {state.arrow === 'down' && <Icon type={'angleDown'} size={16}/>}
                {state.arrow === 'up' && <Icon type={'angleUp'} size={16}/>}
            </View>
        );
    } else {
        // 传入React.Element
        return (
            <View style={styles.rightElement}>
                <View style={styles.flexGhost}/>
                {state.extra}
                {state.arrow === 'right' && <Icon type={'angleRight'} size={16}/>}
                {state.arrow === 'down' && <Icon type={'angleDown'} size={16}/>}
                {state.arrow === 'up' && <Icon type={'angleUp'} size={16}/>}
            </View>
        );
    }
};

/**
 * icon图标属性
 *
 * @param {string/React.Element} iconType icon类型
 * @param {Object} state 父组件的state属性
 * @param {Object} props 父组件的props属性
 * @param {Object} style 父组件的pstyle属性
 * @return {React.Element} 返回React.Element组件
 */
const ItemIcon = ({iconType, state, props, style}) => {
    // 传入字符串
    if (iconType === 'string') {
        return (
            <Icon style={style} type={state.icon} size={'md'}/>
        );
    } else {
        // 传入React.Element
        return (<View style={style}>{state.icon}</View>);
    }
};

ListItem.propTypes = {
    title: PropTypes.string,
    subtitle: PropTypes.string,
    icon: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
    ]),
    extra: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
    ]),
    extraColor: PropTypes.string,
    arrow: PropTypes.string,
    disabled: PropTypes.bool,
    itemStyle: View.propTypes.style,
    onPress: PropTypes.func,
    subtitleStyle: Text.propTypes.style,
    titleStyle: Text.propTypes.style,

};

export default ListItem;

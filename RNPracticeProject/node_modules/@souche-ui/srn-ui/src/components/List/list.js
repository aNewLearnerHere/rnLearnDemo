
import React from 'react';
import {
    View,
    StyleSheet,
} from 'react-native';
import PropTypes from 'prop-types';

import commonStyles from './styles/index.style';

import ListItem from './list.item';
import ListGroup from './list.group';

const styles = StyleSheet.create(commonStyles);

class List extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            title: props.title,
            children: Array.isArray(props.children) ? props.children : [props.children],     //需要进行数组判定及转换函数处理
            itemStyle: props.itemStyle,
        };
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            title: nextProps.title,
            children: Array.isArray(nextProps.children) ? nextProps.children : [nextProps.children],
            itemStyle: nextProps.itemStyle
        });
    }

    render() {
        let isAllGroup = true, isAllItem = true, isAllNotGroup = true, isAllNotItem = true, isCrowd = false;
        const props = this.props;

        const rangedChildren = React.Children.map(props.children, (child, i) => {
            const extraProps = {};

            if (!child) {
                isAllGroup = false;
                isAllItem = false;
                return child;
            }

            // 判断 children 属性是否都是 ListGroup 组件或者都是 ListItem 组件
            if (child.type !== ListGroup) {
                isAllGroup = false;
            } else {
                isAllNotGroup = false;
            }
            if (child.type !== List.Item && child.type !== ListItem) {
                isAllItem = false;
            } else {
                isAllNotItem = false;
            }

            if (child.type === ListGroup) {
                // 如果 child 是 ListGroup 则处理它的上下间距
                if (child.props.title && i === 0) {
                    // 告诉 child 它是第一项，如果有标题的话前面记得留空间
                    extraProps.crowd = true;
                }
                if (child.props.title && isCrowd) {
                    // 告诉 child 它的前一项有底部说明文字，会显得有点挤，如果有标题的话前面记得留空间
                    extraProps.crowd = true;
                }
                isCrowd = !!child.props.desc;
                if ('crowd' in extraProps) {
                    return React.cloneElement(child, extraProps);
                } else {
                    return child;
                }
            } else {
                return child;
            }
        });

        if (isAllGroup || isAllNotItem && !isAllNotGroup) {
            // 如果都是 ListGroup 组件，则交给 ListGroup 去渲染细节
            // 或者
            // 如果都不是 ListItem 组件且存在 ListGroup 组件，则交给 ListGroup 去渲染细节
            return <View>{rangedChildren}</View>;
        } else if (isAllItem || isAllNotGroup && !isAllNotItem) {
            // 如果都是 ListItem 组件，则让 ListGroup 去渲染细节
            // 或者
            // 如果都不是 ListGroup 组件且存在 ListItem 组件，则让 ListGroup 去渲染细节
            return (
                <ListGroup {...props} crowd={!!props.title} />
            );
        } else if (isAllNotGroup && isAllNotItem) {
            // 如果既没有 ListGroup 也没有 ListItem, 那就自己玩去吧
            return (
                <ListGroup {...props} crowd={!!props.title} />
            );
        } else {
            // 即有 ListGroup 也有 ListItem，则给出警告
            console.warn('List.Group 不能和 List.Item 同时作为 List 的直接子元素');
            return null;
        }
    }
}

List.Group = ListGroup;

List.Item = (props)=> {
    if (props.children) {
        return (
            <View style={[styles.childItemContainer, props.style, props.index === 0 && styles.firstItem]}>
                {props.children}
            </View>
        );
    } else {
        return (<ListItem {...props}/>);
    }
};

List.propTypes = {
    title: PropTypes.string,
    itemStyle: View.propTypes.style,
};

export default List;

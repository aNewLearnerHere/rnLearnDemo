import React from 'react';
import {
    View,
    Text,
    StyleSheet,
} from 'react-native';
import PropTypes from 'prop-types';
import FontSize from '../../const/FontSize';
import theme from '../../theme';
import HDView from '../HDView';

const BADGE_HEIGHT = 18;
const DOT_HEIGHT = 8;

function Badge(props) {
    const { text, dot, overflowCount, showZero, offset, children, style: styleProp, textStyle: textStyleProp } = props;
    let content = Number(text);
    if (isNaN(content)) {
        content = text;
    } else {
        // overflowCount 不为 0 时才做数值溢出限制
        content = overflowCount !== 0 && content > overflowCount ? `${overflowCount}+` : content;
    }
    const hidden = !showZero && (content === '0' || content === 0);
    const offsetStyle = [
        styles.float,
        offset ? offset : (dot ? styles.dotOffset : styles.offset),
    ];

    return (
        <View style={styles.container}>
            {children}
            {!hidden ? <HDView
                style={[
                    styles.badge,
                    dot && styles.dot,
                    children && offsetStyle,
                    styleProp,
                ]}
            >
                {!dot ? <Text numberOfLines={1} style={[styles.text, textStyleProp]}>{content}</Text> : null}
            </HDView> : null}
        </View>
    );
}

Badge.propTypes = {
    text: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    dot: PropTypes.bool,
    overflowCount: PropTypes.number,
    showZero: PropTypes.bool,
    offset: PropTypes.shape({
        top: PropTypes.number,
        right: PropTypes.number,
        bottom: PropTypes.number,
        left: PropTypes.number,
    }),
    style: View.propTypes.style,
    textStyle: Text.propTypes.style,
};

Badge.defaultProps = {
    dot: false,
    overflowCount: 99,
    showZero: false,
};

const styles = StyleSheet.create({
    container: {
        // position: 'relative',
    },
    badge: {
        backgroundColor: theme('color_warning'),
        height: BADGE_HEIGHT,
        minWidth: BADGE_HEIGHT,
        paddingHorizontal: 5,
        borderRadius: BADGE_HEIGHT / 2,
        borderWidth: 1,
        borderColor: theme('color_white'),
        justifyContent: 'center',
    },
    dot: {
        width: DOT_HEIGHT,
        height: DOT_HEIGHT,
        minWidth: DOT_HEIGHT,
        paddingHorizontal: 0,
    },
    float: {
        position: 'absolute',
    },
    offset: {
        right: -10,
        top: -5,
    },
    dotOffset: {
        right: -4,
        top: -4,
    },
    text: {
        color: theme('color_white'),
        fontSize: FontSize.P3,
    },
});

export default Badge;
import React from 'react';
import {
    View,
    Text,
    TouchableOpacity,
    StyleSheet,
} from 'react-native';
import PropTypes from 'prop-types';

import FontSize from '../../const/FontSize';
import theme from '../../theme';
import Icon from '../Icon';
import HDView from '../HDView';

class Tag extends React.PureComponent {

    renderTag() {
        const {
            selected,
            icon,
            closable,
            floatCloseIcon,
            disabled,
            autoWidth,
            children,
            onSelect,
            onClose,
            style: styleProp,
            textStyle,
            selectedStyle,
            selectedTextStyle,
        } = this.props;

        // 如果参数 icon 是字符串类型，则取 icon 的值所代表的 Icon 元素，否则 icon 直接作为 Icon 元素
        const iconEl = typeof icon === 'string' ? <Icon type={icon} size="xs" /> : icon;

        return (
            <HDView
                type={TouchableOpacity}
                style={[
                    styles.tag,
                    styleProp,
                    selected && styles.selectedTag,
                    selected && selectedStyle,
                    disabled && styles.disabledTag,
                    // 如果不是自适应宽度，则不需要水平方向的内边距
                    !autoWidth && styles.noPaddingHorizontal,
                ]}
                activeOpacity={1}
                disabled={disabled}
                onPress={onSelect && (() => { onSelect(!selected); })}
            >
                <View style={styles.contentWrapper}>
                    {/* icon */}
                    {iconEl ? <View style={styles.iconWrapper}>{iconEl}</View> : null}
                    {/* 文字 */}
                    <Text
                        style={[
                            styles.text,
                            textStyle,
                            selected && styles.selectedText,
                            selected && selectedTextStyle,
                            disabled && styles.disabledText,
                        ]}
                    >{children}</Text>
                    {/* 关闭按钮 */}
                    {closable && !floatCloseIcon ?
                        <TouchableOpacity
                            style={styles.closeIconWrapper}
                            // 扩大按钮可点击范围
                            hitSlop={{ top: 4, right: 4, bottom: 4, left: 4 }}
                            onPress={onClose}
                        >
                            <Icon type={Icon.close} size="xxs" color={theme('color_text_body')} />
                        </TouchableOpacity> :
                        null}
                </View>
            </HDView>
        );
    }

    render() {
        const {
            closable,
            floatCloseIcon,
            floatCloseIconOffset,
            onClose,
        } = this.props;
        const { top = -2, right = -2 } = floatCloseIconOffset || {};

        if (closable && floatCloseIcon) {
            return (
                <View style={styles.wrapper}>
                    {this.renderTag()}
                    {/* 浮动关闭按钮 */}
                    <TouchableOpacity
                        style={[styles.floatCloseIconWrapper, { top: -6 - top, right: -6 - right }]}
                        // 扩大按钮可点击范围
                        hitSlop={{ top: 4, right: 4, bottom: 4, left: 4 }}
                        onPress={onClose}
                    >
                        <View style={styles.floatCloseIconFill} />
                        <Icon type={Icon.closeCircle} size={14} color={theme('color_text_caption')} />
                    </TouchableOpacity>
                </View>
            );
        } else {
            return this.renderTag();
        }
    }
}

Tag.propTypes = {
    selected: PropTypes.bool,
    icon: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
    ]),
    closable: PropTypes.bool,
    floatCloseIcon: PropTypes.bool,
    floatCloseIconOffset: PropTypes.shape({
        top: PropTypes.number,
        right: PropTypes.number,
    }),
    disabled: PropTypes.bool,
    onSelect: PropTypes.func,
    onClose: PropTypes.func,
    style: View.propTypes.style,
    textStyle: Text.propTypes.style,
    selectedStyle: View.propTypes.style,
    selectedTextStyle: Text.propTypes.style,
};

Tag.defaultProps = {
    selected: false,
    closable: false,
    floatCloseIcon: false,
    disabled: false,
    autoWidth: true,
};

const styles = StyleSheet.create({
    wrapper: {
        position: 'relative',
    },
    tag: {
        backgroundColor: theme('color_background_block'),
        borderWidth: StyleSheet.hairlineWidth,
        borderColor: theme('color_background_block'),
        borderRadius: 4,
        height: 36,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        paddingHorizontal: 16,
    },
    contentWrapper: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    iconWrapper: {
        marginRight: 8,
    },
    closeIconWrapper: {
        marginLeft: 8,
    },
    floatCloseIconFill: {
        position: 'absolute',
        right: 4,
        top: 4,
        width: 8,
        height: 8,
        backgroundColor: theme('color_white'),
    },
    floatCloseIconWrapper: {
        position: 'absolute',
        borderRadius: 8,
    },
    selectedTag: {
        backgroundColor: theme('color_primary_selected'),
        borderColor: theme('color_primary'),
    },
    disabledTag: {
        backgroundColor: theme('color_background_block'),
        borderColor: theme('color_background_block'),
    },
    text: {
        color: theme('color_text_title'),
        fontSize: FontSize.P3,
    },
    selectedText: {
        color: theme('color_text_selected'),
    },
    disabledText: {
        color: theme('color_text_hint'),
    },
    noPaddingHorizontal: {
        paddingHorizontal: 0,
    },
});

export default Tag;
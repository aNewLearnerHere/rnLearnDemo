import React from 'react';
import { Picker, StyleSheet } from 'react-native';
import FontSize from '../../const/FontSize';
import theme from '../../theme';
import PropTypes from 'prop-types';

const emptyItems = [{label: '', value: ''}];

export default class PickerBody extends React.Component{
    constructor(props){
        super(props);
        const items = props.items;
        this.items = Array.isArray(items) ? (items.length > 0 ? items : emptyItems) : emptyItems;
        let defaultSelectedIndex = props.selectedIndex;
        const selectedItem = this.items[defaultSelectedIndex] || {};
        this.state = {
            selectedValue: selectedItem.value,
            selectedIndex: defaultSelectedIndex
        };
        this._onValueChange = this._onValueChange.bind(this);
    }
    componentWillReceiveProps(nextProps){
        this.items = nextProps.items;
        let defaultSelectedIndex = nextProps.selectedIndex;
        const selectedItem = this.items[defaultSelectedIndex] || {};
        this.setState({
            selectedValue: selectedItem.value,
            selectedIndex: defaultSelectedIndex
        });
    }
    // 判断 ele 在不在 arr 中
    _notInArray(ele, arr){
        return (
            arr.every((item) => {
                if (item !== ele) {
                    return true;
                }
            })
        );
    }
    _onValueChange(value, index){
        let disabledIndexArr = this.props.disabledIndexArr || [];
        let i, enableIndex, items = this.items;
        let length = items.length;
        for (i = 0; i < length; i++){
            enableIndex = index + i;
            if (enableIndex >= length) {
                enableIndex = enableIndex - length;
            }
            if (this._notInArray(enableIndex, disabledIndexArr)){
                break;
            }
        }
        // 如果没有一个能选中，就默认选中第一个
        if (i >= length){
            enableIndex = 0;
        }
        let enableValue = items[enableIndex].value;
        this.setState({
            selectedValue: enableValue,
            selectedIndex: enableIndex
        });
        this.props.onValueChange && this.props.onValueChange(enableValue, enableIndex);
    }
    render(){
        return (
            <Picker
                style={styles.pickerBody}
                itemStyle={styles.itemStyle}
                onValueChange={this._onValueChange}
                selectedValue={this.state.selectedValue}
            >
                {this.items.map((item, index) => {
                    return <Picker.Item key={index} label={item.label} value={item.value}/>;
                })}
            </Picker>
        );
    }
}

PickerBody.propTypes = {
    items: PropTypes.array,
    selectedIndex: PropTypes.number,
    onValueChange: PropTypes.func,
    disabledIndexArr: PropTypes.array
};

PickerBody.defaultProps = {
    items: [],
    selectedIndex: 0,
    disabledIndexArr: []
};

const styles = StyleSheet.create({
    pickerBody: {
        backgroundColor: theme('color_white'),
        height: 215
    },
    itemStyle: {
        color: theme('color_text_title'),
        fontSize: FontSize.D2
    }
});
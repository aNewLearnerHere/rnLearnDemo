import React from 'react';
import {
    View,
    Text,
    Animated,
    StyleSheet,
    Platform,
} from 'react-native';
import PropTypes from 'prop-types';
import FontSize from '../../const/FontSize';
import theme from '../../theme';

class Progress extends React.PureComponent {

    constructor(props) {
        super(props);

        this.percentAnimateValue = new Animated.Value(props.percent);
        this.state = {
            percent: props.percent,
        };
    }

    componentWillMount() {
        if (this.props.showIndicator) {
            this.percentAnimateValue.addListener(event => {
                this.setState({
                    percent: event.value,
                });
            });
        }
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.percent !== this.props.percent) {
            Animated.timing(this.percentAnimateValue, {
                easing: nextProps.easing || undefined,
                duration: nextProps.easingDuration,
                toValue: nextProps.percent,
                isInteraction: false,
            }).start();
        }
    }

    componentWillUnmount() {
        this.percentAnimateValue.removeAllListeners();
    }

    render() {
        const {
            showIndicator,
            renderIndicator,
            ticks,
        } = this.props;
        const {
            percent,
        } = this.state;
        const hasTicks = Array.isArray(ticks) && ticks.length > 0;
        let indicatorText = `${Math.floor(percent * 100)}%`;

        if (typeof renderIndicator === 'function') {
            indicatorText = renderIndicator(percent);
        }

        return (
            <View style={styles.container}>
                <View style={styles.trackWrapper}>
                    {this._renderTrack()}
                    {this._renderTickBar()}
                </View>
                {showIndicator ?
                    <Text
                        style={[
                            styles.indicator,
                            hasTicks && styles.indicatorWithTicks,
                        ]}
                    >{indicatorText}</Text> :
                    null}
            </View>
        );
    }

    _renderTrack() {
        const {
            color,
            ticks,
        } = this.props;
        const {
            percent,
        } = this.state;
        const hasTicks = Array.isArray(ticks) && ticks.length > 0;
        let spentColor = theme('color_primary');

        if (typeof color === 'function') {
            spentColor = color(percent) || spentColor;
        }

        return (
            <View
                style={[
                    styles.track,
                    hasTicks && styles.trackWithTicks
                ]}
            >
                <Animated.View
                    style={[
                        styles.spentBar,
                        hasTicks && styles.spentBarWithTicks,
                        {
                            flex: this.percentAnimateValue,
                            backgroundColor: spentColor,
                        },
                    ]}
                />
                <Animated.View
                    style={{
                        flex: this.percentAnimateValue.interpolate({
                            inputRange: [0, 1],
                            outputRange: [1, 0],
                        }),
                    }}
                />
                {hasTicks ? ticks.map(tick => (
                    <View
                        key={tick.percent}
                        style={[
                            styles.tick,
                            {
                                left: `${Math.floor(tick.percent * 100)}%`,
                            },
                            percent >= tick.percent && styles.highlightTick,
                        ]}
                    />
                )) : null}
            </View>
        );
    }

    _renderTickBar() {
        const { ticks } = this.props;
        const hasTicks = Array.isArray(ticks) && ticks.length > 0;

        return hasTicks ? (
            <View style={styles.tickBar}>
                {ticks.map(tick => (
                    <Text
                        key={tick.percent}
                        style={[
                            styles.tickText,
                            {
                                left: `${Math.floor(tick.percent * 100)}%`,
                            },
                        ]}
                    >{tick.text}</Text>
                ))}
            </View>
        ) : null;
    }
}

Progress.propTypes = {
    percent: PropTypes.number,
    showIndicator: PropTypes.bool,
    renderIndicator: PropTypes.func,
    color: PropTypes.func,
    ticks: PropTypes.arrayOf(
        PropTypes.shape({
            percent: PropTypes.number,
            text: PropTypes.string,
        })
    ),
    easingDuration: PropTypes.number,
};

Progress.defaultProps = {
    percent: 0,
    showIndicator: true,
    easingDuration: 800,
};

const styles = StyleSheet.create({
    container: {
        alignItems: 'center',
        marginVertical: 15,
        flexDirection: 'row',
    },
    trackWrapper: {
        flex: 1,
    },
    track: {
        height: 5,
        backgroundColor: theme('color_press'),
        borderRadius: 2.5,
        flexDirection: 'row',
    },
    trackWithTicks: {
        height: 8,
        borderRadius: 4,
    },
    spentBar: {
        backgroundColor: theme('color_primary'),
        borderRadius: 2.5,
    },
    spentBarWithTicks: {
        borderRadius: 4,
    },
    indicator: {
        textAlign: 'right',
        minWidth: 32,
        fontSize: FontSize.P3,
        color: theme('color_text_caption'),
        marginLeft: 12,
    },
    indicatorWithTicks: {
        alignSelf: 'flex-start',
        ...Platform.select({
            ios: {
                marginTop: -3,
            },
            android: {
                marginTop: -4,
            },
        }),
    },
    tick: {
        position: 'absolute',
        top: 2,
        width: 4,
        height: 4,
        marginLeft: -6,
        borderRadius: 2,
        backgroundColor: theme('color_text_hint'),
    },
    highlightTick: {
        backgroundColor: theme('color_white'),
    },
    tickBar: {
        minHeight: 16,
    },
    tickText: {
        position: 'absolute',
        top: 6,
        width: 32,
        marginLeft: -20,
        textAlign: 'center',
        fontSize: FontSize.T2,
        color: theme('color_text_caption'),
        backgroundColor: 'transparent',
    },
});

export default Progress;
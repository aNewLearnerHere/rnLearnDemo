import React from 'react';
import { Text, Image, View } from 'react-native';
import PropTypes from 'prop-types';
import styleUtil from '../../util/styleUtil';
import FontSize from '../../const/FontSize';
import theme from '../../theme';
import Button from '../Button';

export default class Result extends React.Component{

    _renderImg(){
        const img = this.props.img;
        if (!img) {
            return;
        }
        if (typeof img === 'string'){
            return <Image style={styles.img} source={{uri: img}} resizeMode={'contain'}/>;
        }
        if (React.isValidElement(img)){
            return (
                <View style={styles.imgContainer}>
                    {img}
                </View>
            );
        }
    }

    _renderTitle(){
        const title = this.props.title;
        if (!title) {
            return;
        }
        if (React.isValidElement(title)){
            return (
                <View style={styles.titleContainer}>
                    {title}
                </View>
            );
        }
        return <Text style={styles.title}>{title}</Text>;
    }

    _renderMessage(){
        const message = this.props.message;
        if (!message) {
            return;
        }
        if (React.isValidElement(message)){
            return (
                <View style={styles.messageContainer}>
                    {message}
                </View>
            );
        }
        return <Text style={styles.message}>{message}</Text>;
    }

    _renderButton(){
        const options = this.props.options;
        if (!options) {
            return;
        }
        const length = options.length;
        switch (length){
            case 0:
                return;
            case 1:
                const option = options[0];
                return (
                    <Button
                        style={styles.buttonStyle}
                        textStyle={styles.buttonTextStyle}
                        type={option.buttonType || 'primary'}
                        onPress={() => {
                            option.onPress && option.onPress();
                        }}
                    >
                        {option.buttonText}
                    </Button>
                );
            default:
                return (
                    <View style={styles.twoButtonContainer}>
                        {options.map((item, index) => {
                            const defaultType = index === length - 1 ? 'primary' : 'normal';
                            const marginRight = index === length - 1 ? 0 : 12;
                            return (
                                <View key={index} style={[styles.buttonContainer, {marginRight: marginRight}]}>
                                    <Button
                                        type={defaultType || 'normal'}
                                        textStyle={styles.buttonTextStyle}
                                        onPress={() => {
                                            item.onPress && item.onPress();
                                        }}
                                    >
                                        {item.buttonText}
                                    </Button>
                                </View>
                            );
                        })}
                    </View>
                );
        }
    }

    render(){
        return (
            <View style={styles.container}>
                { this._renderImg() }
                { this._renderTitle() }
                { this._renderMessage() }
                { this._renderButton() }
            </View>
        );
    }
}

Result.propTypes = {
    img: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
    ]),
    title: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
    ]),
    message: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
    ]),
    options: PropTypes.arrayOf(PropTypes.shape({
        buttonText: PropTypes.string,
        buttonType: PropTypes.oneOf(['normal', 'primary', 'ghost']),
        onPress: PropTypes.func,
    })),
};

const styles = styleUtil.create({
    common: {
        container: {
            alignItems: 'center',
        },
        img: {
            width: 144,
            height: 144,
            marginBottom: 8,
        },
        imgContainer: {
            marginBottom: 8,
        },
        title: {
            fontSize: FontSize.P0,
            color: theme('color_text_title'),
            marginBottom: 6,
            paddingLeft: 44,
            paddingRight: 44,
            textAlign: 'center',
            lineHeight: FontSize.D1,
        },
        titleContainer: {
            marginBottom: 12,
        },
        message: {
            fontSize: FontSize.P2,
            color: theme('color_text_caption'),
            marginBottom: 21,
            paddingLeft: 44,
            paddingRight: 44,
            textAlign: 'center',
            lineHeight: FontSize.P0
        },
        messageContainer: {
            marginBottom: 24,
        },
        buttonStyle: {
            width: 166,
            height: 44,
        },
        buttonTextStyle: {
            fontSize: FontSize.P1
        },
        twoButtonContainer: {
            paddingLeft: 16,
            paddingRight: 16,
            flexDirection: 'row',
            alignSelf: 'stretch',
        },
        buttonContainer: {
            flex: 1,
            height: 44,
        },
    }
});
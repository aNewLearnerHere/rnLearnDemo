import React from 'react';
import {
    View,
    StyleSheet,
} from 'react-native';
import PropTypes from 'prop-types';
import FontSize from '../../const/FontSize';
import theme from '../../theme';
import { omit } from '../../util/propUtil';
import Button from '../Button';
import Icon from '../Icon';

class ActionBar extends React.PureComponent {

    render() {
        const {
            items,
            inline,
            align,
            onAction,
        } = this.props;
        const layoutItems = [];

        items.forEach((item, index) => {
            const iconInline = item.iconInline !== false;
            const icon = iconInline || !item.icon || React.isValidElement(item.icon) ?
                item.icon :
                <Icon type={item.icon} size="lg" />;

            if (index === 0 && iconInline) {
                // 如果第一个 item 是 icon 与文字在同一行，则设置间距作为左边距
                layoutItems.push((
                    <View
                        key={`padding_${index}`}
                        style={styles.paddingSpan}
                    />
                ));
            }
            if (index >= 1 && index <= items.length - 1) {
                const prevIconInline = items[index - 1].iconInline !== false;

                if (iconInline === prevIconInline && iconInline !== false) {
                    // 当前项和前一项都是 icon 与文字在同一行，设置间距
                    layoutItems.push((
                        <View
                            key={`span_${index}`}
                            style={styles.bothIconInlineSpan}
                        />
                    ));
                } else if (iconInline !== prevIconInline) {
                    // 当前项和前一项，一个 icon 与文字在同一行，另一个 icon 与文字不在同一行，设置间距
                    layoutItems.push((
                        <View
                            key={`span_${index}`}
                            style={styles.diffIconInlineSpan}
                        />
                    ));
                }
            }
            layoutItems.push((
                <Button
                    key={`action_${index}`}
                    {...omit(item, ['text', 'flex', 'icon'])}
                    inline={inline}
                    icon={icon}
                    style={[
                        !inline && iconInline && {
                            flex: item.flex || 1,
                        },
                        !iconInline && styles.blockIconButton,
                        !iconInline && {
                            width: item.width,
                        },
                    ]}
                    textStyle={[
                        styles.buttonText,
                        !iconInline && styles.miniText,
                    ]}
                    onPress={() => {
                        typeof onAction === 'function' && onAction(item.action);
                    }}
                >
                    {item.text}
                </Button>
            ));
            if (index === items.length - 1 && iconInline) {
                // 如果最后一个 item 是 icon 与文字在同一行，则设置间距作为右边距
                layoutItems.push((
                    <View
                        key={`padding_${index}`}
                        style={styles.paddingSpan}
                    />
                ));
            }
        });

        return (
            <View
                style={[
                    styles.container,
                    inline && (align === 'left' ? styles.alignLeft : styles.alignRight),
                ]}
            >
                {layoutItems}
            </View>
        );
    }
}

ActionBar.propTypes = {
    items: PropTypes.array,
    inline: PropTypes.bool,
    align: PropTypes.oneOf(['left', 'right']),
    onAction: PropTypes.func,
};

ActionBar.defaultProps = {
    items: [],
    inline: false,
    align: 'right',
};

const styles = StyleSheet.create({
    container: {
        height: 54,
        backgroundColor: theme('color_white'),
        shadowColor: '#000000',
        shadowOffset: { height: -1 },
        shadowOpacity: 0.08,
        shadowRadius: 4,
        elevation: 20,
        flexDirection: 'row',
        alignItems: 'center',
    },
    bothIconInlineSpan: {
        width: 8,
    },
    diffIconInlineSpan: {
        width: 16,
    },
    paddingSpan: {
        width: 16,
    },
    blockIconButton: {
        borderWidth: 0,
        borderRadius: 0,
        height: 54,
    },
    buttonText: {
        fontWeight: 'bold',
    },
    miniText: {
        fontSize: FontSize.T2,
    },
    alignLeft: {
        justifyContent: 'flex-start',
    },
    alignRight: {
        justifyContent: 'flex-end',
    },
});

export default ActionBar;
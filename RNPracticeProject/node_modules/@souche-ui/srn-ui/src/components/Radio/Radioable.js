import React from 'react';
import PropTypes from 'prop-types';

class Radioable extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            value: props.value !== undefined ? props.value : props.defaultValue,
        };

        this.handleSelect = this.handleSelect.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.value !== undefined) {
            if (nextProps.value !== this.props.value) {
                this.setState({
                    value: nextProps.value,
                });
            }
        } else {
            if (nextProps.defaultValue !== this.props.defaultValue) {
                this.setState({
                    value: nextProps.defaultValue,
                });
            }
        }
    }

    handleSelect(selected, option) {
        const onChange = this.props.onChange;

        if (this.props.value === undefined) {
            // 如果 value 不是可控的，则由内部管理选中状态
            this.setState(
                prevState => ({
                    value: option.value,
                }),
                () => {
                    onChange && onChange(this.state.value, option);
                },
            );
        } else {
            // 如果 value 是可控的，则让组件调用者管理选中状态，内部不做处理
            onChange && onChange(option.value, option);
        }
    }

    render() {
        // 这里 children 是一个函数
        // 这样写的目的是方便实现类能复用 Radioable 的 radio 算法，各自实现 UI
        return this.props.children({
            value: this.state.value,
            onChange: this.handleSelect,
        });
    }
}

Radioable.propTypes = {
    value: PropTypes.any,
    defaultValue: PropTypes.any,
    onChange: PropTypes.func,
};

Radioable.defaultProps = {
    defaultSelected: false,
};

export default Radioable;
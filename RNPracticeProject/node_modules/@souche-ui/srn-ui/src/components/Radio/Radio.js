import React from 'react';
import {
    View,
    TouchableWithoutFeedback,
    Text,
    StyleSheet,
    Platform,
} from 'react-native';
import PropTypes from 'prop-types';

import theme from '../../theme';
import Icon from '../Icon';
import RadioGroup from './Radio.Group';
import RadioList from './Radio.List';
import RadioTag from './Radio.Tag';

class Radio extends React.Component {
    static Group = RadioGroup;
    static List = RadioList;
    static Tag = RadioTag;

    constructor(props) {
        super(props);

        this.state = {
            selected: typeof props.selected === 'boolean' ? props.selected : props.defaultSelected,
        };

        this.onChange = this.onChange.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (typeof nextProps.selected === 'boolean') {
            if (nextProps.selected !== this.props.selected) {
                this.setState({
                    selected: nextProps.selected,
                });
            }
        } else {
            if (nextProps.defaultSelected !== this.props.defaultSelected) {
                this.setState({
                    selected: nextProps.defaultSelected,
                });
            }
        }
    }

    onChange() {
        const onChange = this.props.onChange;

        if (typeof this.props.selected !== 'boolean') {
            // 如果 selected 不是可控的，则由内部管理选中状态
            this.setState(
                prevState => ({
                    selected: true,
                }),
                () => {
                    onChange && onChange(this.state.selected);
                },
            );
        } else {
            // 如果 selected 是可控的，则让组件调用者管理选中状态，内部不做处理
            onChange && onChange(true);
        }
    }

    render() {
        const { disabled, children } = this.props;
        const iconProps = {
            type: this.state.selected ? Icon.dotCircle : Icon.circle,
            size: 'xl',
        };
        if (this.props.disabled) {
            // 在选中和未选中图标后面加上 Disalbed 就变成了对应的禁用图标
            iconProps.type += 'Disabled';
        }
        if (this.state.selected && !this.props.disabled && theme('color_primary').toLowerCase() !== '#ff571a') {
            iconProps.color = theme('color_primary');
        }
        if (Platform.OS === 'ios') {
            // 处理 iOS 图片切换 bug
            iconProps.key = iconProps.type;
        }

        return (
            <TouchableWithoutFeedback onPress={this.onChange} disabled={disabled}>
                <View style={styles.container}>
                    <Icon {...iconProps} />
                    {
                        children ?
                            <Text style={[styles.label, { color: disabled ? theme('color_text_caption') : theme('color_text_title') }]}>{children}</Text> :
                            null
                    }
                </View>
            </TouchableWithoutFeedback>
        );
    }
}

Radio.propTypes = {
    selected: PropTypes.bool,
    defaultSelected: PropTypes.bool,
    disabled: PropTypes.bool,
    onChange: PropTypes.func,
};

Radio.defaultProps = {
    defaultSelected: false,
    disabled: false,
};

const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    label: {
        flexShrink: 1,
        marginLeft: 4,
    },
});

export default Radio;
import React from 'react';
import {
    View,
    Text,
    TouchableHighlight,
    StyleSheet,
    Platform,
} from 'react-native';
import PropTypes from 'prop-types';

import FontSize from '../../const/FontSize';
import theme from '../../theme';
import Radioable from './Radioable';
import Icon from '../Icon';

function RadioList(props) {
    const {title, options, disabled: disabledProp, radioType} = props;
    let {separator} = props;
    if (separator === null) {
        separator = React.cloneElement(divider, {
            style: [styles.divide, styles.transparentDivide]
        });
    }

    return (
        // 同 Radio.Group
        <Radioable {...props}>
            {({value, onChange}) => {
                return (
                    <View style={title && styles.listView}>
                        {title ? <Text style={styles.listTitle}>{title}</Text> : null}
                        {options.map((option, i) => {
                            const disabled = option.disabled || disabledProp;
                            // 渲染选项
                            return renderItem(value, onChange, option, i, disabled, separator, radioType);
                        })}
                    </View>
                );
            }}
        </Radioable>
    );
}

/**
 * 选项渲染函数
 * @param {*} value 单选组件当前的值
 * @param {Function} onChange 用来触发值改变的方法
 * @param {*} option 选项对象
 * @param {Number} index 选项索引
 * @param {Boolean} disabled 选项是否禁用
 * @param {React.Element} separator 分割线元素
 * @param {String} radioType 单选按钮类型
 */
function renderItem(value, onChange, option, index, disabled, separator, radioType) {
    const desc = option.desc || option.subtitle; // 这里兼容旧版 subtitle 的用法
    const isClassicRadioType = radioType === 'classic';
    const isSelected = value === option.value;

    return (
        <View key={index} style={styles.itemStyle}>
            {/* 分割线 */}
            {index !== 0 ? separator : null}
            {/* 选项主体 */}
            <TouchableHighlight
                style={styles.wrapper}
                underlayColor={theme('color_press')}
                disabled={disabled}
                onPress={selected => onChange(!isSelected, option)}
            >
                <View style={styles.row}>
                    <View style={styles.contentWrapper}>
                        {/* 主要部分，包含前置的单选按钮和选项主要文案（label） */}
                        {/* 在设置了选项说明文案（desc）时，要给此部分加上额外的上边距 */}
                        <View style={[styles.row, desc && styles.labelRow]}>
                            {/* Radio Icon (classic type) */}
                            {
                                isClassicRadioType ?
                                    (
                                        // 根据选项的值与组件的值比较，决定显示什么图标
                                        isSelected ?
                                            <Icon
                                                key={Platform.OS === 'ios' ? Icon.dotCircle : '0'} // 处理 iOS 图片切换 bug
                                                type={Icon.dotCircle}
                                                size="xl"
                                                color={option.disabled || disabled ? theme('color_text_hint') : (theme('color_primary').toLowerCase() !== '#ff571a' ? theme('color_primary') : null)}
                                                style={styles.radio}/> :
                                            <Icon
                                                key={Platform.OS === 'ios' ? Icon.circle : '0'} // 处理 iOS 图片切换 bug
                                                type={Icon.circle}
                                                size="xl"
                                                style={styles.radio}
                                            />
                                    ) :
                                    null
                            }
                            {/* 选项主要文案（label） */}
                            {/* 没有设置选项说明文案（desc）的时候，给主要文案加上垂直方向的外边距 */}
                            <View style={[styles.textWrapper, !desc && styles.noDescTextWrapper]}>
                                {
                                    typeof option.label === 'string' ?
                                        <Text
                                            style={[
                                                styles.labelText,
                                                !isClassicRadioType && isSelected && styles.labelTextSelected,
                                                disabled && styles.textDisabled
                                            ]}
                                        >{option.label}</Text> :
                                        React.cloneElement(option.label, { disabled, selected: isSelected })
                                }
                            </View>
                        </View>
                        {/* 次要部分，包含选项说明文案 */}
                        {desc ? <View style={[styles.row, styles.descRow]}>
                            {/* 选项说明文案（desc） */}
                            {/* 使用传统类型的单选按钮（前置）时，让说明文案（desc）设置左外边距与上面“主要部分”的主要文案（label）对齐 */}
                            <View style={[styles.textWrapper, styles.descWrapper, isClassicRadioType && styles.placeholder]}>
                                {
                                    typeof option.label === 'string' ?
                                        <Text style={[styles.descText, disabled && styles.textDisabled]}>{desc}</Text> :
                                        React.cloneElement(desc, { disabled, selected: isSelected })
                                }
                            </View>
                        </View> : null}
                    </View>
                    {/* Radio Icon (check type) */}
                    {
                        radioType === 'check' ?
                            (
                                // 根据选项的值与组件的值比较，决定显示什么图标
                                isSelected ?
                                    <Icon
                                        type={Icon.check}
                                        color={option.disabled || disabled ? theme('color_text_hint') : theme('color_primary')}
                                        style={styles.checkRadio}/> :
                                    <Icon type={Icon.check} color="transparent" style={styles.checkRadio} />
                            ) :
                            null
                    }
                </View>
            </TouchableHighlight>
        </View>
    );
}

const styles = StyleSheet.create({
    itemStyle: {
        minHeight: 48,
        backgroundColor: theme('color_white'),
    },
    wrapper: {
        paddingHorizontal: 16,
    },
    contentWrapper: {
        flex: 1,
    },
    row: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    labelRow: {
        marginTop: 11,
    },
    descRow: {
        marginTop: 6,
        marginBottom: 15,
    },
    divide: {
        backgroundColor: theme('color_line_b'),
        height: StyleSheet.hairlineWidth,
        marginLeft: 16,
    },
    transparentDivide: {
        opacity: 0,
    },
    textWrapper: {
        flexShrink: 1,
    },
    noDescTextWrapper: {
        marginVertical: 15,
    },
    labelText: {
        color: theme('color_text_title'),
        fontSize: FontSize.P1,
        lineHeight: FontSize.P1 + 2,
    },
    labelTextSelected: {
        color: theme('color_primary_text'),
    },
    descText: {
        color: theme('color_text_caption'),
        fontSize: FontSize.P2,
        lineHeight: FontSize.P2 + 2,
    },
    textDisabled: {
        color: theme('color_text_hint'),
    },
    radio: {
        marginRight: 12,
    },
    checkRadio: {
        marginLeft: 12,
    },
    placeholder: {
        marginLeft: 36,
    },
    // 以下两条样式是为了兼容原来的用法，只有在设置了 title 的时候才生效
    listView: {
        marginVertical: 12,
    },
    listTitle: {
        marginBottom: 8,
        marginLeft: 16,
        fontSize: FontSize.P2,
        color: theme('color_text_caption'),
    },
});

const divider = <View style={styles.divide}/>;

RadioList.propTypes = {
    /**
     * title 将在未来版本去掉
     */
    title: PropTypes.string,
    value: PropTypes.any,
    defaultValue: PropTypes.any,
    disabled: PropTypes.bool,
    options: PropTypes.array,
    radioType: PropTypes.oneOf(['classic', 'check']),
    separator: PropTypes.element,
    onChange: PropTypes.func,
};

RadioList.defaultProps = {
    defaultValue: [],
    disabled: false,
    options: [],
    radioType: 'check',
    separator: divider,
};

export default RadioList;
import React from 'react';
import {
    Text,
    View,
    Modal as RNModal,
    StyleSheet,
    TouchableHighlight,
    TouchableOpacity,
    KeyboardAvoidingView,
    Keyboard,
    Platform,
} from 'react-native';
import PropTypes from 'prop-types';

import styleUtil from '../../util/styleUtil';
import FontSize from '../../const/FontSize';
import theme from '../../theme';

class Modal extends React.Component {

    handleOptionPress(option) {
        if (!this.props.beforeClose(option)) {
            return;
        }
        if (option && typeof option.onPress === 'function') {
            option.onPress();
        }
        this.props.onClose && this.props.onClose();
    }

    renderHeader(title, messageList) {
        const titleEl = title ? (React.isValidElement(title) ? title : <Text style={styles.title}>{title}</Text>) : null;
        return titleEl ?
            // 如果存在 footer 则收缩 header 的下边距
            <View style={[styles.header, messageList.length && styles.shrinkHeader]}>{titleEl}</View> :
            null;
    }

    renderBody(title, messageList) {
        return messageList.length ?
            (
                // 如果存在 header 则收缩 footer 的上边距
                <View style={[styles.body, title && styles.shrinkBody]}>
                    {messageList.map((message, i) => {
                        if (React.isValidElement(message)) {
                            return React.cloneElement(message, { key: i });
                        } else {
                            return <Text key={i} style={styles.message}>{message}</Text>;
                        }
                    })}
                </View>
            ) :
            null;
    }

    renderFooter() {
        const {
            options,
        } = this.props;

        if (Array.isArray(options) && options.length > 0) {
            return (
                <View style={styles.footer}>
                    {options.reduce((acc, option, i) => {
                        const optionEl = (
                            React.isValidElement(option.text) ?
                                // 自定义选项
                                React.cloneElement(option.text, {
                                    key: i,
                                    style: styles.option,
                                    underlayColor: theme('color_press'),
                                    onPress: () => {
                                        this.handleOptionPress(option);
                                    }
                                }) :
                                // 组件内置选项
                                <TouchableHighlight
                                    key={i}
                                    activeOpacity={1}
                                    style={styles.option}
                                    underlayColor={theme('color_press')}
                                    onPress={() => this.handleOptionPress(option)}
                                >
                                    <Text style={[
                                        styles.optionText,
                                        // 如果是最后一个选项，设置文字颜色为主题色
                                        i === options.length - 1 && styles.primaryOptionText
                                    ]}>{option.text}</Text>
                                </TouchableHighlight>
                        );
                        if (i === 0) {
                            return acc.concat(optionEl);
                        } else {
                            // 如果不是第一个选项，则插入分割线
                            return acc.concat(<View key={`span${i}`} style={styles.span}/>, optionEl);
                        }
                    }, [])}
                </View>
            );
        } else {
            // 如果 options 没有设置或者为空，则显示默认 footer
            return (
                <View style={styles.footer}>
                    <TouchableHighlight
                        activeOpacity={1}
                        style={styles.option}
                        underlayColor={theme('color_press')}
                        onPress={() => this.handleOptionPress()}
                    >
                        <Text style={[styles.optionText, styles.primaryOptionText]}>确定</Text>
                    </TouchableHighlight>
                </View>
            );
        }
    }

    render() {
        const {
            visible,
            title,
            message,
            content,
            overflowTop,
        } = this.props;

        // 正规化 message 参数
        const messageList = message ? (Array.isArray(message) ? message : [message]) : [];

        const ContainerView = Platform.OS === 'ios' ? KeyboardAvoidingView : View;

        return (
            <RNModal
                visible={visible}
                transparent={true}
                // 禁止 Android 返回键关闭 Modal
                onRequestClose={() => {}}
            >
                <ContainerView style={styles.avoidingContainer} behavior="padding">
                    <TouchableOpacity activeOpacity={1} style={styles.container} onPress={() => { Keyboard.dismiss(); }}>
                        <View style={styles.wrapper}>
                            {/* 自定义内容 */}
                            {content ? <TouchableOpacity activeOpacity={1} style={styles.customWrapper}>
                                <View style={[styles.fakeOverflow, { top: overflowTop }]} />
                                {content}
                            </TouchableOpacity> : null}
                            <TouchableOpacity activeOpacity={1} style={[styles.defaultWrapper, content ? styles.sliceByContent : null]}>
                                {/* 标题部分 */}
                                {this.renderHeader(title, messageList)}
                                {/* 正文部分 */}
                                {this.renderBody(title, messageList)}
                                {/* 选项部分 */}
                                {this.renderFooter()}
                            </TouchableOpacity>
                        </View>
                    </TouchableOpacity>
                </ContainerView>
            </RNModal>
        );
    }
}

Modal.propTypes = {
    visible: PropTypes.bool,
    title: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
    ]),
    message: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
        PropTypes.arrayOf(PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.element,
        ]))
    ]),
    options: PropTypes.arrayOf(PropTypes.shape({
        text: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.element,
        ]),
        onPress: PropTypes.func,
    })),
    content: PropTypes.element,
    overflowTop: PropTypes.number,
    onClose: PropTypes.func,
    beforeClose: PropTypes.func,
};

Modal.defaultProps = {
    visible: false,
    overflowTop: 0,
    beforeClose: () => true,
};

const styles = styleUtil.create({
    common: {
        avoidingContainer: {
            flex: 1,
        },
        container: {
            backgroundColor: theme('color_mask'),
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center',
        },
        wrapper: {
            width: 270,
        },
        customWrapper: {
            position: 'relative',
        },
        sliceByContent: {
            borderRadius: 0,
            borderBottomLeftRadius: 4,
            borderBottomRightRadius: 4,
        },
        defaultWrapper: {
            backgroundColor: theme('color_white'),
            borderRadius: 4,
            overflow: 'hidden',
        },
        fakeOverflow: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            backgroundColor: theme('color_white'),
            borderTopLeftRadius: 4,
            borderTopRightRadius: 4
        },
        header: {
            paddingHorizontal: 16,
            paddingVertical: 16,
            alignItems: 'center',
        },
        shrinkHeader: {
            paddingBottom: 4,
        },
        body: {
            paddingHorizontal: 16,
            paddingVertical: 16,
            alignItems: 'center',
        },
        shrinkBody: {
            paddingTop: 4,
        },
        title: {
            color: theme('color_text_title'),
            fontSize: FontSize.H1,
            lineHeight: FontSize.H1 + 8,
        },
        message: {
            color: theme('color_text_title'),
            fontSize: FontSize.P2,
            lineHeight: FontSize.P2 + 8,
        },
        footer: {
            borderTopWidth: StyleSheet.hairlineWidth,
            borderTopColor: theme('color_line_b'),
            minHeight: 45,
            flexDirection: 'row',
        },
        option: {
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center',
        },
        optionText: {
            color: theme('color_text_title'),
            fontSize: FontSize.P1,
        },
        primaryOptionText: {
            color: theme('color_primary_text'),
        },
        span: {
            backgroundColor: theme('color_line_b'),
            width: StyleSheet.hairlineWidth,
        },
    },
});

export default Modal;
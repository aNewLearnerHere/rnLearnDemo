import React from 'react';
import {
    View,
} from 'react-native';
import PropTypes from 'prop-types';
import PullUpIndicator from './PullUpIndicator';

function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || 'Component';
}

function PullToRefreshHOC(ScrollableComponent, originComponentType) {
    const likeListView = originComponentType.indexOf('ListView') > -1;
    const likeVirtualizedList = originComponentType.indexOf('VirtualizedList') > -1 ||
                                originComponentType.indexOf('FlatList') > -1 ||
                                originComponentType.indexOf('SectionList') > -1;
    const isFlatList = originComponentType.indexOf('FlatList') > -1;

    return class PullToRefreshScrollableComponent extends React.Component {

        static displayName = `PullToRefresh${getDisplayName(ScrollableComponent)}`;

        static propTypes = {
            finished: PropTypes.bool,
            onAppend: PropTypes.func,
            innerRef: PropTypes.func,
        };

        static defaultProps = {
            finished: false,
        };

        hasData = false;

        constructor(props) {
            super(props);

            if (likeVirtualizedList) {
                this.hasData = props.data && props.data.length > 0 || props.sections && props.sections.length > 0;
            }
            if (likeListView) {
                this.hasData = props.dataSource && props.dataSource.getRowCount() > 0;
            }

            this._renderFooter = this._renderFooter.bind(this);
            this._ListFooterComponent = this._ListFooterComponent.bind(this);
            this._onEndReached = this._onEndReached.bind(this);
            this._innerRef = this._innerRef.bind(this);
        }

        componentWillReceiveProps(nextProps) {
            const nextRefreshing = nextProps.refreshControl ? nextProps.refreshControl.props.refreshing : nextProps.refreshing;
            const refreshing = this.props.refreshControl ? this.props.refreshControl.props.refreshing : this.props.refreshing;
            if (isFlatList && nextRefreshing !== refreshing && nextRefreshing === false) {
                // 修复下拉刷新后，不能触发 onEndReached 的问题
                this._scrollableRef._listRef._sentEndForContentLength = 0;
            }
            if (likeVirtualizedList && (nextProps.data !== this.props.data || nextProps.sections !== this.props.sections)) {
                this.hasData = nextProps.data && nextProps.data.length > 0 || nextProps.sections && nextProps.sections.length > 0;
            }
            if (likeListView && nextProps.dataSource !== this.props.dataSource) {
                this.hasData = nextProps.dataSource && nextProps.dataSource.getRowCount() > 0;
            }
        }

        _renderIndicator() {
            return <PullUpIndicator finished={this.props.finished} />;
        }

        _renderFooter() {
            const originRenderFooter = this.props.renderFooter;
            if (typeof originRenderFooter === 'function') {
                return (
                    <View>
                        {originRenderFooter()}
                        {this._renderIndicator()}
                    </View>
                );
            } else {
                return this._renderIndicator();
            }
        }

        _ListFooterComponent() {
            const originListFooterComponent = this.props.ListFooterComponent;
            if (typeof originListFooterComponent === 'function') {
                return (
                    <View>
                        {originListFooterComponent()}
                        {this._renderIndicator()}
                    </View>
                );
            } else {
                return this._renderIndicator();
            }
        }

        _onEndReached(info) {
            const originOnEndReached = this.props.onEndReached;
            originOnEndReached && originOnEndReached(info);
            if (!this.hasData || this.props.finished) {
                return;
            }
            this.props.onAppend(info);
        }

        _innerRef(c) {
            this._scrollableRef = c;
            this.props.innerRef && this.props.innerRef(c);
        }

        render() {
            const props = {
                ...this.props,
            };

            if (likeListView && this.props.onAppend) {
                props.renderFooter = this._renderFooter;
            }
            if (likeVirtualizedList && this.props.onAppend) {
                props.ListFooterComponent = this._ListFooterComponent;
            }
            if ((likeListView || likeVirtualizedList) && this.props.onAppend) {
                props.onEndReached = this._onEndReached;
            }

            return (
                <ScrollableComponent
                    ref={this._innerRef}
                    {...props}
                />
            );
        }
    };
}

export default PullToRefreshHOC;
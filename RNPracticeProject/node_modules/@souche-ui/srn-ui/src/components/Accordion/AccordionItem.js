import React from 'react';
import {
    View,
    Text,
    TouchableHighlight,
    StyleSheet,
} from 'react-native';
import PropTypes from 'prop-types';
import FontSize from '../../const/FontSize';
import theme from '../../theme';
import Icon from '../../components/Icon';

class AccordionItem extends React.PureComponent {

    constructor(props) {
        super(props);

        this._handlePressIn = this._handlePressIn.bind(this);
        this._handlePressOut = this._handlePressOut.bind(this);
    }

    _handlePressIn() {
        this.button && this.button.setNativeProps({
            style: { backgroundColor: theme('color_press') },
        });
    }

    _handlePressOut() {
        this.button && this.button.setNativeProps({
            style: { backgroundColor: 'transparent' },
        });
    }

    render () {
        const {
            index,
            active,
            direction,
            titleAlign,
            title,
            activeTitle,
            children,
            onChange,
        } = this.props;

        const isTitleAlignCenter = titleAlign === 'center';
        const _activeTitle = activeTitle || title;
        const content = <View style={!active && styles.collapsed}>{children}</View>;

        return (
            <View style={styles.container}>
                {direction === 'up' ? content : null}
                {(active && direction === 'up') || index !== 0 ? <View style={styles.divide} /> : null}
                <TouchableHighlight
                    ref={c => { this.button = c; }}
                    activeOpacity={1}
                    underlayColor={'transparent'}
                    onPressIn={this._handlePressIn}
                    onPressOut={this._handlePressOut}
                    onPress={() => {
                        onChange && onChange(!active);
                    }}
                >
                    <View style={[styles.title, isTitleAlignCenter && styles.centerTitle]}>
                        <Text style={[styles.titleText, isTitleAlignCenter && styles.centerTitleText]}>
                            {active ? _activeTitle : title }
                        </Text>
                        <Icon style={styles.icon} type={active ? Icon.angleUp : Icon.angleDown} color="#cccccc" />
                    </View>
                </TouchableHighlight>
                {direction === 'down' ? content : null}
            </View>
        );
    }
}

AccordionItem.propTypes = {
    index: PropTypes.number, // 内部使用
    active: PropTypes.bool, // 内部使用
    title: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
    ]),
    activeTitle: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
    ]),
    direction: PropTypes.oneOf(['up', 'down']), // 内部使用
    titleAlign: PropTypes.oneOf(['justify', 'center']),
    onChange: PropTypes.func,
};

AccordionItem.defaultProps = {
    active: false,
    direction: 'down',
};

const styles = StyleSheet.create({
    divide: {
        height: StyleSheet.hairlineWidth,
        marginLeft: 16,
        backgroundColor: theme('color_line_b'),
    },
    title: {
        minHeight: 48,
        paddingHorizontal: 16,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
    },
    centerTitle: {
        justifyContent: 'center',
    },
    titleText: {
        color: theme('color_text_title'),
        fontSize: FontSize.P1
    },
    centerTitleText: {
        color: theme('color_text_body'),
        fontSize: FontSize.P2,
    },
    icon: {
        marginLeft: 4,
    },
    collapsed: {
        position: 'absolute',
        left: 9999,
    },
});

export default AccordionItem;
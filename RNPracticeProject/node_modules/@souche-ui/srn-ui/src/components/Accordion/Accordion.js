import React from 'react';
import {
    View,
    StyleSheet,
} from 'react-native';
import PropTypes from 'prop-types';
import AccordionItem from './AccordionItem';
import theme from '../../theme';

class Accordion extends React.Component {

    static Item = AccordionItem;

    constructor(props) {
        super(props);

        this.checkActiveKeyType(props);

        this.state = {
            activeKey: this.fixActiveKey(props),
        };
    }

    checkActiveKeyType(props) {
        if (!props.defaultActiveKey) {
            return;
        }
        if (!Array.isArray(props.defaultActiveKey) && props.multiple) {
            console.warn('multiple 为 true 时 defaultActiveKey 必须是数组');
        }
        if (typeof props.defaultActiveKey !== 'string' && !props.multiple) {
            console.warn('multiple 为 false 时 defaultActiveKey 必须是字符串');
        }
    }

    fixActiveKey(props) {
        return props.defaultActiveKey || (props.multiple ? [] : '');
    }

    cloneActiveKey(activeKey) {
        if (typeof activeKey === 'string') {
            return activeKey;
        } else if (Array.isArray(activeKey)) {
            return activeKey.slice(0);
        } else {
            return this.props.multiple ? [] : '';
        }
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.defaultActiveKey !== this.props.defaultActiveKey) {
            this.checkActiveKeyType(nextProps);
            this.setState({
                activeKey: this.fixActiveKey(nextProps),
            });
        }
    }

    isChildActive(state, key) {
        const activeKey = state.activeKey;
        if (typeof activeKey === 'string') {
            return activeKey === key;
        } else if (Array.isArray(activeKey)) {
            return activeKey.indexOf(key) > -1;
        } else {
            return false;
        }
    }

    getNextActiveKey(prevState, key) {
        const prevActiveKey = prevState.activeKey;
        if (typeof prevActiveKey === 'string') {
            return prevActiveKey === key ? '' : key;
        } else if (Array.isArray(prevActiveKey)) {
            if (prevActiveKey.indexOf(key) > -1) {
                return prevActiveKey.filter(n => n !== key);
            } else {
                return Array.from(new Set(prevActiveKey).add(key));
            }
        } else {
            return this.props.multiple ? [] : '';
        }
    }

    render() {
        const {
            direction,
            titleAlign,
            onChange,
            children,
        } = this.props;

        return (
            <View style={styles.container}>
                {React.Children.map(children, (child, index) => {
                    return React.cloneElement(child, {
                        index,
                        active: this.isChildActive(this.state, child.key || String(index)),
                        direction,
                        titleAlign: child.props.titleAlign || titleAlign,
                        onChange: (...args) => {
                            child.props.onChange && child.props.onChange(...args);
                            this.setState(prevState => ({
                                activeKey: this.getNextActiveKey(prevState, child.key || String(index))
                            }));
                            onChange && onChange(this.state.activeKey);
                        }
                    });
                })}
            </View>
        );
    }
}

Accordion.propTypes = {
    defaultActiveKey: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string),
    ]),
    direction: PropTypes.oneOf(['up', 'down']),
    titleAlign: PropTypes.oneOf(['justify', 'center']),
    multiple: PropTypes.bool,
    onChange: PropTypes.func,
};

Accordion.defaultProps = {
    direction: 'down',
    titleAlign: 'justify',
    multiple: false,
};

const styles = StyleSheet.create({
    container: {
        backgroundColor: theme('color_white'),
    },
});

export default Accordion;
import React from 'react';
import {
    View,
    Text,
    StyleSheet,
    Image,
    TouchableOpacity,
} from 'react-native';
import PropTypes from 'prop-types';
import Color from '../../const/Color';
import FontSize from '../../const/FontSize';
import theme from '../../theme';
import Icon from '../Icon';
import { isIPhoneX } from '../../util/deviceUtil';

const responsiveFontSize = f => isIPhoneX() ? f + 1 : f;

const OVERFLOW_HEIGHT = 0;
const ARROW_WIDTH = 12, ARROW_HEIGHT = 6, ARROW_POSITION_LEFT = 12, ARROW_POSITION_RIGHT = 12;

class Tip extends React.Component {

    constructor(props) {
        super(props);

        const arrowLayout = this.getArrowLayout(props);

        this.state = {
            imageLayout: {
                width: 50,
                height: 50,
            },
            arrowDirection: arrowLayout.direction,
            arrowAlign: arrowLayout.align,
            containerWidth: 0,
            containerHeight: 0,
        };

        this.handleClose = this.handleClose.bind(this);
        this.handleContainerLayout = this.handleContainerLayout.bind(this);
        this.handleImageLayout = this.handleImageLayout.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.placement !== this.props.placement) {
            const arrowLayout = this.getArrowLayout(nextProps);
            this.setState({
                arrowDirection: arrowLayout.direction,
                arrowAlign: arrowLayout.align,
            });
        }
    }

    getArrowLayout(props) {
        const arrowLayout = props.placement.match(/([^A-Z]*)(.*)/);
        return {
            direction: arrowLayout[1].replace(/^\S/, c => c.toUpperCase()),
            align: arrowLayout[2] || 'Center',
        };
    }

    setPosition(pos) {
        if (this.closed && this.props.displayOnce) {
            // 如果已经关闭，则不作任何操作
            return;
        }
        this.position = { x: pos.x, y: pos.y };
        let { y: top, x: left } = pos;

        // 垂直方向位置
        if (this.state.arrowDirection === 'Bottom') {
            top = top;
        } else if (this.state.arrowDirection === 'Top') {
            top = top - this.state.containerHeight - 11;
        }

        // 水平方向位置
        if (this.state.arrowAlign === 'Left') {
            left = left - ARROW_POSITION_LEFT - ARROW_WIDTH / 2;
        } else if (this.state.arrowAlign === 'Center') {
            left = left - this.state.containerWidth / 2;
        } else if (this.state.arrowAlign === 'Right') {
            left = left - this.state.containerWidth + ARROW_POSITION_RIGHT + ARROW_WIDTH / 2;
        }

        this.tip.setNativeProps({
            style: { top, left }
        });
    }

    setPositionByTarget(targetLayout) {
        if (this.closed && this.props.displayOnce) {
            // 如果已经关闭，则不作任何操作
            return;
        }
        this.targetLayout = targetLayout;
        let top = 0, left = 0;

        // 垂直方向位置
        if (this.state.arrowDirection === 'Bottom') {
            top = targetLayout.y + targetLayout.height;
        } else if (this.state.arrowDirection === 'Top') {
            top = targetLayout.y - this.state.containerHeight - 11;
        }

        // 水平方向位置
        if (this.state.arrowAlign === 'Left') {
            left = targetLayout.x + targetLayout.width / 2 - ARROW_POSITION_LEFT - ARROW_WIDTH / 2;
        } else if (this.state.arrowAlign === 'Center') {
            left = targetLayout.x + targetLayout.width / 2 - this.state.containerWidth / 2;
        } else if (this.state.arrowAlign === 'Right') {
            left = targetLayout.x + targetLayout.width / 2 - this.state.containerWidth + ARROW_POSITION_RIGHT + ARROW_WIDTH / 2;
        }

        this.tip.setNativeProps({
            style: { top, left }
        });
    }

    handleClose() {
        this.tip.setNativeProps({
            style: { top: -1000, left: -1000 }
        });
        this.closed = true;
        this.props.onClose && this.props.onClose();
    }

    handleContainerLayout(e) {
        this.setState({
            containerWidth: e.nativeEvent.layout.width,
            containerHeight: e.nativeEvent.layout.height
        }, () => {
            this.position && this.setPosition(this.position);
            this.targetLayout && this.setPositionByTarget(this.targetLayout);
            this.position = null;
            this.targetLayout = null;
        });
    }

    handleImageLayout(e) {
        this.setState({ imageLayout: e.nativeEvent.layout });
    }

    render() {
        const {
            title,
            linkTitle,
            imageSource,
            onLinkPress,
            showCloseIcon
        } = this.props;

        return (
            <View ref={c => { this.tip = c; }} style={[styles.wrapper]}>
                {/* 气泡 */}
                <View style={[styles.container, !showCloseIcon && styles.containerWithoutClose]} onLayout={this.handleContainerLayout}>
                    {/* 文本部分 */}
                    {
                        React.isValidElement(title) ?
                            title :
                            (
                                <View style={[styles.content, imageSource && styles.shortContent]}>
                                    <Text style={styles.title}>{title}</Text>
                                    {linkTitle ? <Text style={styles.link} onPress={onLinkPress}>{linkTitle}</Text> : null}
                                </View>
                            )
                    }
                    {/* 图片部分 */}
                    {imageSource ? <View
                        style={[styles.imageHolder, { width: this.state.imageLayout.height }]}
                        onLayout={this.handleImageLayout}
                    /> : null}
                    {/* 关闭按钮 */}
                    {showCloseIcon && <TouchableOpacity style={styles.close} onPress={this.handleClose} hitSlop={{top: 4, right: 4, bottom: 4, left: 4}}>
                        <Icon type={Icon.close} size="xs" color={theme('color_primary')} />
                    </TouchableOpacity>}
                </View>
                <View style={[styles.image, { left: this.state.imageLayout.x }]}>
                    {imageSource ? <Image
                        style={[{ height: this.state.imageLayout.height, width: this.state.imageLayout.width }]}
                        source={imageSource}
                        resizeMode="contain"
                    /> : null}
                </View>
                {/* 箭头 */}
                <View
                    style={[
                        styles.arrowWrapper,
                        styles[`arrowWrapper${this.state.arrowDirection}`],
                        styles[`arrowWrapperAlign${this.state.arrowAlign}`],
                        this.state.arrowAlign === 'Center' && { left: this.state.containerWidth / 2 - 6 },
                    ]}
                />
                <View
                    style={[
                        styles.arrow,
                        styles[`arrow${this.state.arrowDirection}`],
                        styles[`arrowAlign${this.state.arrowAlign}`],
                        this.state.arrowAlign === 'Center' && { left: this.state.containerWidth / 2 - 5 },
                    ]}
                />
            </View>
        );
    }
}

Tip.propTypes = {
    title: PropTypes.string,
    linkTitle: PropTypes.string,
    imageSource: Image.propTypes.source,
    placement: PropTypes.oneOf(['topLeft', 'top', 'topRight', 'bottomLeft', 'bottom', 'bottomRight']),
    onClose: PropTypes.func,
    onLinkPress: PropTypes.func,
    showCloseIcon: PropTypes.bool,
    displayOnce: PropTypes.bool
};

Tip.defaultProps = {
    placement: 'bottomLeft',
    showCloseIcon: true,
    displayOnce: true
};

const styles = StyleSheet.create({
    wrapper: {
        minHeight: 50,
        position: 'absolute',
        top: -1000,
        left: -1000,
        zIndex: 2,
    },
    container: {
        marginTop: 5 + StyleSheet.hairlineWidth,
        marginBottom: 5 + StyleSheet.hairlineWidth,
        borderColor: Color.Yellow1,
        borderWidth: 1,
        borderRadius: 4,
        paddingLeft: 15,
        paddingRight: 7,
        backgroundColor: Color.Yellow2,
        shadowColor: '#000000',
        shadowOffset: { height: 1 },
        shadowOpacity: 0.3,
        shadowRadius: 6,
        flex: 1,
        flexDirection: 'row',
        alignItems: 'flex-start',
    },
    containerWithoutClose: {
        paddingRight: 15,
    },
    content: {
        paddingVertical: 11,
        width: 174,
    },
    shortContent: {
        width: 144,
    },
    title: {
        color: theme('color_text_title'),
        fontSize: responsiveFontSize(FontSize.P2),
        lineHeight: responsiveFontSize(FontSize.P2 + 6),
    },
    link: {
        color: theme('color_primary_text'),
        fontSize: responsiveFontSize(FontSize.P3),
        lineHeight: responsiveFontSize(FontSize.P2 + 6),
    },
    imageHolder: {
        marginTop: -6 - OVERFLOW_HEIGHT,
        marginLeft: 12,
        alignSelf: 'stretch',
    },
    image: {
        position: 'absolute',
        bottom: 6
    },
    close: {
        marginTop: 16,
        marginLeft: 8,
    },
    arrowWrapper: {
        position: 'absolute',
        borderLeftWidth: ARROW_WIDTH / 2,
        borderLeftColor: 'transparent',
        borderRightWidth: ARROW_WIDTH / 2,
        borderRightColor: 'transparent',
    },
    // eslint-disable-next-line react-native/no-unused-styles
    arrowWrapperTop: {
        bottom: 0,
        borderTopWidth: ARROW_HEIGHT,
        borderTopColor: Color.Yellow1,
    },
    // eslint-disable-next-line react-native/no-unused-styles
    arrowWrapperBottom: {
        top: 0,
        borderBottomWidth: ARROW_HEIGHT,
        borderBottomColor: Color.Yellow1,
    },
    // eslint-disable-next-line react-native/no-unused-styles
    arrowWrapperAlignLeft: {
        left: ARROW_POSITION_LEFT,
    },
    // eslint-disable-next-line react-native/no-unused-styles
    arrowWrapperAlignRight: {
        right: ARROW_POSITION_RIGHT,
    },
    arrow: {
        position: 'absolute',
        borderLeftWidth: ARROW_WIDTH / 2 - 1,
        borderLeftColor: 'transparent',
        borderRightWidth: ARROW_WIDTH / 2 - 1,
        borderRightColor: 'transparent',
    },
    // eslint-disable-next-line react-native/no-unused-styles
    arrowTop: {
        bottom: 1 + StyleSheet.hairlineWidth,
        borderTopWidth: ARROW_HEIGHT,
        borderTopColor: Color.Yellow2,
    },
    // eslint-disable-next-line react-native/no-unused-styles
    arrowBottom: {
        top: 1 + StyleSheet.hairlineWidth,
        borderBottomWidth: ARROW_HEIGHT,
        borderBottomColor: Color.Yellow2,
    },
    // eslint-disable-next-line react-native/no-unused-styles
    arrowAlignLeft: {
        left: ARROW_POSITION_LEFT + 1,
    },
    // eslint-disable-next-line react-native/no-unused-styles
    arrowAlignRight: {
        right: ARROW_POSITION_RIGHT + 1,
    },
});

export default Tip;

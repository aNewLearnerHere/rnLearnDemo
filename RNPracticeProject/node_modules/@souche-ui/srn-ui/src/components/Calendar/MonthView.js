import React from 'react';
import {
    View,
    Text,
    TouchableWithoutFeedback,
    StyleSheet,
    Dimensions,
} from 'react-native';
import PropTypes from 'prop-types';

import { getDaysOfMonth } from '../../util/dateUtil';
import FontSize from '../../const/FontSize';
import { format, getPureDay } from './date';
import Badge from '../Badge';
import theme from '../../theme';

const DAY_HEIGHT = 56;
const MARK_HEIGHT = 36;
const MARK_RADIUS = MARK_HEIGHT / 2;
const LARGE_MARK_HEIGHT = 44;
const LARGE_MARK_RADIUS = LARGE_MARK_HEIGHT / 2;
const WINDOW_WIDTH = Dimensions.get('window').width;

class MonthView extends React.PureComponent {
    constructor(props) {
        super(props);

        this.state = {
            weekList: this.getWeekList(this.props.year, this.props.month),
        };
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.year !== this.props.year ||
            nextProps.month !== this.props.month) {
                this.setState({
                    weekList: this.getWeekList(nextProps.year, nextProps.month)
                });
            }
    }

    getWeekList(year, month, mondayFirst = false) {
        const firstDay = new Date(year, month - 1, 1).getDay(); // 表示这个月第一天是星期几
        const dayCount = getDaysOfMonth(year, month); // 表示这个月有多少天
        const padStart = (firstDay + (mondayFirst ? 6 : 7)) % 7;
        const count = 42; //Math.ceil((padStart + dayCount) / 7) * 7;
        const weekList = [];
        for (let i = 0; i < count; i++) {
            const weekIndex = Math.floor(i / 7);
            const content = i < padStart || i >= padStart + dayCount ? false : i - padStart + 1;
            if (weekList[weekIndex]) {
                weekList[weekIndex].push(content);
            } else {
                weekList[weekIndex] = [content];
            }
        }
        return weekList;
    }

    handleSelect(date) {
        this.props.onSelect && this.props.onSelect(date);
    }

    renderDay(year, month, day, selectedDate, type, start, end, j, week, dayCountOfMonth, today) {
        const currentDate = (new Date(year, month - 1, day)).valueOf();
        const isToday = today === currentDate;
        const { disabled, badge, dot } = this.props.getMark(currentDate);
        let selected = false, firstSelected = false, lastSelected = false, sameDay = false;
        if (selectedDate && day) {
            if (type === 'single') {
                if (selectedDate === currentDate) {
                    firstSelected = true;
                    lastSelected = true;
                    selected = true;
                }
            }
            else if (type === 'range') {
                if (start && !end && currentDate === start) {
                    firstSelected = true;
                    lastSelected = true;
                    selected = true;
                }
                if (start && end) {
                    firstSelected = currentDate === start || j === 0 || day === 1;
                    lastSelected = currentDate === end || j === week.length - 1 || (day === dayCountOfMonth);
                    selected = currentDate >= start && currentDate <= end;
                    sameDay = selected && start === end;
                }
            }
        }
        const dayText = isToday ? '今天' : day ? day.toString() : day;
        const dayContent = (
            <View style={[
                styles.day,
                selected && styles.selectedDay,
                firstSelected && styles.firstSelectedDay,
                lastSelected && styles.lastSelectedDay,
            ]}>
                <Text style={[
                    styles.dayText,
                    isToday && styles.todayText,
                    selected && styles.selectedDayText,
                    disabled && styles.disabledDayText,
                ]}>{dayText}</Text>
            </View>
        );

        return (
            <View key={j} style={styles.dayWrapperWithBadge}>
                <TouchableWithoutFeedback
                    disabled={disabled}
                    onPress={() => this.handleSelect(new Date(year, month - 1, day))}
                >
                    <View style={styles.dayWrapper}>
                        <View style={[
                            styles.baseFiller,
                            selected && !firstSelected && styles.activeFiller
                        ]} />
                        <View style={sameDay && styles.circle}>
                            {dayContent}
                        </View>
                        <View style={[
                            styles.baseFiller,
                            selected && !lastSelected && styles.activeFiller
                        ]} />
                    </View>
                </TouchableWithoutFeedback>
                {badge || dot ? <View style={badge ? styles.badgeWrapper : styles.dotWrapper}>
                    {badge ? <Badge text={badge} /> : <Badge dot />}
                </View> : null}
            </View>
        );
    }

    render() {
        const { year, month, value, type } = this.props;
        const selectedDate = value instanceof Date ? getPureDay(value).valueOf() : value;
        const start = value && value.start && getPureDay(value.start).valueOf();
        const end = value && value.end && getPureDay(value.end).valueOf();
        const today = getPureDay(new Date()).valueOf();
        const dayCountOfMonth = getDaysOfMonth(year, month);

        return (
            <View>
                <View style={styles.header}>
                    <Text style={styles.headerText}>{format(new Date(year, month - 1), 'YYYY年MM月')}</Text>
                </View>
                {this.state.weekList.map((week, i) => {
                    return (
                        <View key={i} style={styles.week}>
                            {week.map((day, j) => {
                                if (day) {
                                    return this.renderDay(year, month, day, selectedDate, type, start, end, j, week, dayCountOfMonth, today);
                                } else {
                                    return <View key={j} style={styles.emptyDay} />;
                                }
                            })}
                        </View>
                    );
                })}
            </View>
        );
    }
}

MonthView.propTypes = {
    type: PropTypes.oneOf(['single', 'range']),
    year: PropTypes.number.isRequired,
    month: PropTypes.number.isRequired,
    value: PropTypes.oneOfType([
        PropTypes.instanceOf(Date),
        PropTypes.shape({
            start: PropTypes.instanceOf(Date),
            end: PropTypes.instanceOf(Date),
        })
    ]),
    markedDates: PropTypes.arrayOf(
        PropTypes.shape({
            type: PropTypes.string.isRequired,
            date: PropTypes.instanceOf(Date),
            start: PropTypes.instanceOf(Date),
            end: PropTypes.instanceOf(Date),
            disabled: PropTypes.bool,
            badge: PropTypes.any,
            dot: PropTypes.bool,
        })
    ),
    onSelect: PropTypes.func,
};

MonthView.defaultProps = {
    type: 'single',
    markedDates: [],
};

const styles = StyleSheet.create({
    header: {
        paddingHorizontal: 16,
    },
    headerText: {
        height: 20,
        color: theme('color_text_title'),
        fontSize: FontSize.P1,
        fontWeight: 'bold',
    },
    week: {
        flexDirection: 'row',
    },
    dayWrapperWithBadge: {
        flex: 1,
    },
    dayWrapper: {
        height: DAY_HEIGHT,
        flexDirection: 'row',
        alignItems: 'center',
    },
    emptyDay: {
        flex: 1,
        height: DAY_HEIGHT,
    },
    baseFiller: {
        flex: 1,
        marginHorizontal: -1,
        height: MARK_HEIGHT,
    },
    activeFiller: {
        backgroundColor: theme('color_primary'),
    },
    day: {
        position: 'relative',
        alignItems: 'center',
        justifyContent: 'center',
        width: MARK_HEIGHT,
        height: MARK_HEIGHT,
    },
    circle: {
        width: LARGE_MARK_HEIGHT,
        height: LARGE_MARK_HEIGHT,
        borderWidth: 1,
        borderColor: theme('color_primary'),
        borderRadius: LARGE_MARK_RADIUS,
        alignItems: 'center',
        justifyContent: 'center',
    },
    selectedDay: {
        backgroundColor: theme('color_primary'),
    },
    firstSelectedDay: {
        borderTopLeftRadius: MARK_RADIUS,
        borderBottomLeftRadius: MARK_RADIUS,
    },
    lastSelectedDay: {
        borderTopRightRadius: MARK_RADIUS,
        borderBottomRightRadius: MARK_RADIUS,
    },
    dayText: {
        color: theme('color_text_title'),
        fontSize: FontSize.P1,
    },
    selectedDayText: {
        color: theme('color_text_anti'),
    },
    disabledDayText: {
        color: theme('color_text_hint'),
    },
    todayText: {
        color: theme('color_primary'),
        fontSize: FontSize.P3,
    },
    badgeWrapper: {
        position: 'absolute',
        top: 4,
        left: WINDOW_WIDTH / 14 + 6,
    },
    dotWrapper: {
        position: 'absolute',
        top: 8,
        right: 10,
    },
});

export default MonthView;
import React from 'react';
import {
    Text,
    StyleSheet,
} from 'react-native';
import PropTypes from 'prop-types';
import theme from '../../theme';

class AutoLinkText extends React.PureComponent {

    static urlRegexp = /((?:(?:ht|f)tp(?:s?)\:\/\/|~\/|\/)?(?:\w+:\w+@)?(?:(?:(?:[-\w\d{1-3}]+\.)+(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|co\.uk|ac\.uk|it|fr|tv|museum|asia|local|travel|[a-z]{2}))|(?:(?:\b25[0-5]\b|\b[2][0-4][0-9]\b|\b[0-1]?[0-9]?[0-9]\b)(?:\.(?:\b25[0-5]\b|\b[2][0-4][0-9]\b|\b[0-1]?[0-9]?[0-9]\b)){3}))(?::[\d]{1,5})?(?:(?:(?:\/(?:[-\w~!$+|.,=]|%[a-f\d]{2})+)+|\/)+|\?|#)?(?:(?:\?(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)(?:&(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)*)*(?:#(?:[-\w~!$ |\/.,*:;=]|%[a-f\d]{2})*)?)/g;

    constructor(props) {
        super(props);
        this._setRef = this._setRef.bind(this);
    }

    setNativeProps(props) {
        this.textRef.setNativeProps(props);
    }

    _setRef(ref) {
        this.textRef = ref;
    }

    _fixChildren(children) {
        let fixed = children || '';
        if (Array.isArray(fixed)) {
            fixed = fixed.join('');
        }
        return fixed;
    }

    render() {
        const { children, onLinkPress } = this.props;

        if (!onLinkPress || typeof onLinkPress !== 'function') {
            // 没有 onLinkPress，则渲染为一个普通的 Text
            return <Text ref={this._setRef} {...this.props} />;
        }

        const splitedChildren = this._fixChildren(children).split(AutoLinkText.urlRegexp);
        const autoLinkedChildren = splitedChildren.map(child => {
            if (AutoLinkText.urlRegexp.test(child)) {
                const uri = child;
                if (!/\w+\:\/\//.test(child)) {
                    // 如果 uri 没有协议部分，自动归为 http 协议
                    uri = 'http://' + child;
                }
                return (
                    <Text
                        key={child}
                        style={styles.link}
                        onPress={() => onLinkPress({ uri })}
                    >{child}</Text>
                );
            } else {
                return child;
            }
        });

        return (
            <Text ref={this._setRef} {...this.props}>
                {autoLinkedChildren}
            </Text>
        );
    }
}

AutoLinkText.propTypes = {
    onLinkPress: PropTypes.func.isRequired,
};

AutoLinkText.defaultProps = {
    children: '',
};

const styles = StyleSheet.create({
    link: {
        color: theme('color_link'),
    },
});

export default AutoLinkText;